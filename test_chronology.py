#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–≥–æ–º –ø–æ—Ä—è–¥–∫–µ.
"""

import asyncio
import logging
from typing import List, Dict, Any, Optional
from unittest.mock import Mock, AsyncMock

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class MockMessage:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    
    def __init__(self, message_id: int, text: str = "", grouped_id: Optional[int] = None, 
                 reply_to: Optional[int] = None, media=None):
        self.id = message_id
        self.message = text
        self.grouped_id = grouped_id
        self.reply_to = reply_to
        self.media = media
        self.entities = None

class ChronologyTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–∏."""
    
    def __init__(self):
        self.logger = logging.getLogger('chronology_test')
        self.processed_order = []  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    async def simulate_message_processing(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π."""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        messages = self._create_test_messages()
        
        self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        self.logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(messages)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        pending_albums = {}
        
        for message in messages:
            self.logger.info(f"\nüì® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}: '{message.message[:30]}'")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            success = await self._process_message_chronologically(
                message, pending_albums
            )
            
            if success:
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                await self._process_message_comments(message)
                
                self.processed_order.append(f"MSG_{message.id}")
                self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–ª—å–±–æ–º—ã
        await self._finalize_pending_albums(pending_albums)
        
        self._show_results()
    
    def _create_test_messages(self) -> List[MockMessage]:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
        messages = []
        
        # –ü–æ—Å—Ç 1 (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        messages.append(MockMessage(1, "–ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç - –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"))
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É 1
        messages.append(MockMessage(2, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –∫ –ø–æ—Å—Ç—É 1", reply_to=1))
        messages.append(MockMessage(3, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –∫ –ø–æ—Å—Ç—É 1", reply_to=1))
        
        # –ê–ª—å–±–æ–º (–ø–æ—Å—Ç 2) - —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º grouped_id
        messages.append(MockMessage(4, "–ü–æ—Å—Ç 2 - –∞–ª—å–±–æ–º, —Ñ–æ—Ç–æ 1", grouped_id=100))
        messages.append(MockMessage(5, "–ü–æ—Å—Ç 2 - –∞–ª—å–±–æ–º, —Ñ–æ—Ç–æ 2", grouped_id=100))
        messages.append(MockMessage(6, "–ü–æ—Å—Ç 2 - –∞–ª—å–±–æ–º, —Ñ–æ—Ç–æ 3", grouped_id=100))
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–ª—å–±–æ–º—É
        messages.append(MockMessage(7, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É", reply_to=4))
        messages.append(MockMessage(8, "–ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ 1", grouped_id=200, reply_to=4))
        messages.append(MockMessage(9, "–ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ 2", grouped_id=200, reply_to=4))
        
        # –ü–æ—Å—Ç 3 (–æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        messages.append(MockMessage(10, "–¢—Ä–µ—Ç–∏–π –ø–æ—Å—Ç - —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"))
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É 3
        messages.append(MockMessage(11, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É 3", reply_to=10))
        
        # –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é)
        messages.append(MockMessage(12, "–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_to=11))
        
        self.logger.info("üìù –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        self.logger.info("   üìå –ü–æ—Å—Ç 1 (ID: 1) + 2 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (ID: 2, 3)")
        self.logger.info("   üé¨ –ê–ª—å–±–æ–º (ID: 4-6) + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 7) + –∞–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (ID: 8-9)")
        self.logger.info("   üìå –ü–æ—Å—Ç 3 (ID: 10) + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 11) + –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 12)")
        
        return messages
    
    async def _process_message_chronologically(self, message: MockMessage, 
                                             pending_albums: Dict[int, List[MockMessage]]) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        if message.grouped_id:
            return await self._handle_album_message(message, pending_albums)
        else:
            return await self._process_single_message(message)
    
    async def _handle_album_message(self, message: MockMessage, 
                                   pending_albums: Dict[int, List[MockMessage]]) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞."""
        
        grouped_id = message.grouped_id
        
        if grouped_id not in pending_albums:
            pending_albums[grouped_id] = []
        pending_albums[grouped_id].append(message)
        
        self.logger.info(f"   üìé –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∞–ª—å–±–æ–º {grouped_id} (—Ç–µ–ø–µ—Ä—å {len(pending_albums[grouped_id])} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∞–ª—å–±–æ–º–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º—ã –±—ã –ø—Ä–æ–≤–µ—Ä—è–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        next_message_id = message.id + 1
        next_in_album = any(
            msg.id == next_message_id and msg.grouped_id == grouped_id 
            for msg in self._get_all_test_messages() 
            if msg.id > message.id
        )
        
        if not next_in_album:
            # –ê–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω
            album_messages = pending_albums.pop(grouped_id)
            album_messages.sort(key=lambda x: x.id)
            
            self.logger.info(f"   üé¨ –ê–ª—å–±–æ–º {grouped_id} –∑–∞–≤–µ—Ä—à–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞
            await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            album_ids = [str(msg.id) for msg in album_messages]
            self.processed_order.append(f"ALBUM_{grouped_id}({','.join(album_ids)})")
            
            return True
        else:
            # –ê–ª—å–±–æ–º –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            self.logger.info(f"   ‚è≥ –ê–ª—å–±–æ–º {grouped_id} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False
    
    async def _process_single_message(self, message: MockMessage) -> bool:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        self.logger.info(f"   üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        return True
    
    async def _process_message_comments(self, parent_message: MockMessage) -> None:
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é."""
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        comments = [
            msg for msg in self._get_all_test_messages() 
            if msg.reply_to == parent_message.id
        ]
        
        if comments:
            self.logger.info(f"   üìù –ù–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            pending_comment_albums = {}
            
            for comment in sorted(comments, key=lambda x: x.id):
                self.logger.info(f"     üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id}: '{comment.message[:20]}'")
                
                success = await self._process_message_chronologically(
                    comment, pending_comment_albums
                )
                
                if success:
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                    await self._process_message_comments(comment)
                    self.processed_order.append(f"COMMENT_{comment.id}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–ª—å–±–æ–º—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            await self._finalize_pending_albums(pending_comment_albums)
    
    async def _finalize_pending_albums(self, pending_albums: Dict[int, List[MockMessage]]) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–ª—å–±–æ–º–æ–≤."""
        
        for grouped_id, album_messages in pending_albums.items():
            if album_messages:
                album_messages.sort(key=lambda x: x.id)
                self.logger.info(f"üé¨ –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–ª—å–±–æ–º {grouped_id} ({len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                
                await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                album_ids = [str(msg.id) for msg in album_messages]
                self.processed_order.append(f"FINAL_ALBUM_{grouped_id}({','.join(album_ids)})")
        
        pending_albums.clear()
    
    def _get_all_test_messages(self) -> List[MockMessage]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏)."""
        return self._create_test_messages()
    
    def _show_results(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        
        self.logger.info("\n" + "="*60)
        self.logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –•–†–û–ù–û–õ–û–ì–ò–ò")
        self.logger.info("="*60)
        
        self.logger.info("\nüîÑ –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for i, item in enumerate(self.processed_order, 1):
            self.logger.info(f"  {i:2d}. {item}")
        
        self.logger.info("\n‚úÖ –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
        self.logger.info("   1. –°—Ç—Ä–æ–≥–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è: —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É")
        self.logger.info("   2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        self.logger.info("   3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∞–ª—å–±–æ–º–æ–≤: –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –æ—Å—Ç–∞—é—Ç—Å—è —Ü–µ–ª—ã–º–∏")
        self.logger.info("   4. –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º —Ç–æ–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è")
        
        self.logger.info("\nüéØ –û–ñ–ò–î–ê–ï–ú–´–ô –ü–û–†–Ø–î–û–ö –í –¶–ï–õ–ï–í–û–ú –ö–ê–ù–ê–õ–ï:")
        expected_order = [
            "–ü–æ—Å—Ç 1 (—Å–æ–æ–±—â–µ–Ω–∏–µ 1)",
            "‚îú‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 (—Å–æ–æ–±—â–µ–Ω–∏–µ 2)",
            "‚îú‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 (—Å–æ–æ–±—â–µ–Ω–∏–µ 3)",
            "–ê–ª—å–±–æ–º (—Å–æ–æ–±—â–µ–Ω–∏—è 4-6)",
            "‚îú‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É (—Å–æ–æ–±—â–µ–Ω–∏–µ 7)",
            "‚îú‚îÄ –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (—Å–æ–æ–±—â–µ–Ω–∏—è 8-9)",
            "–ü–æ—Å—Ç 3 (—Å–æ–æ–±—â–µ–Ω–∏–µ 10)",
            "‚îú‚îÄ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É 3 (—Å–æ–æ–±—â–µ–Ω–∏–µ 11)",
            "    ‚îî‚îÄ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–µ 12)"
        ]
        
        for order in expected_order:
            self.logger.info(f"   {order}")
        
        self.logger.info("\n" + "="*60)

async def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    tester = ChronologyTester()
    await tester.simulate_message_processing()

if __name__ == "__main__":
    asyncio.run(main())