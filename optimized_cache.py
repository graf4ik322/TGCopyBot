"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è TelegramCopier.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLite + LRU –∫—ç—à –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏.
"""

import sqlite3
import json
import pickle
import logging
from typing import List, Optional, Dict, Any
from functools import lru_cache
from dataclasses import dataclass
from collections import OrderedDict
import threading
import time
import psutil
import os

from telethon.tl.types import Message


def message_to_dict(message: Message) -> Dict[str, Any]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Telethon Message –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å.
    –£–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç –∏ –¥—Ä—É–≥–∏–µ –Ω–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã.
    """
    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_dict = {
            'id': message.id,
            'date': message.date.isoformat() if message.date else None,
            'message': message.message or '',
            'from_id': getattr(message.from_id, 'user_id', None) if message.from_id else None,
            'to_id': getattr(message.peer_id, 'channel_id', None) if message.peer_id else None,
            'reply_to_msg_id': message.reply_to_msg_id,
            'entities': [],
            'media_type': None,
            'grouped_id': getattr(message, 'grouped_id', None),
            'views': getattr(message, 'views', None),
            'forwards': getattr(message, 'forwards', None),
        }
        
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º entities –±–µ–∑–æ–ø–∞—Å–Ω–æ
        if hasattr(message, 'entities') and message.entities:
            for entity in message.entities:
                try:
                    entity_dict = {
                        'type': entity.__class__.__name__,
                        'offset': entity.offset,
                        'length': entity.length,
                    }
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ entities
                    if hasattr(entity, 'url'):
                        entity_dict['url'] = entity.url
                    if hasattr(entity, 'user_id'):
                        entity_dict['user_id'] = entity.user_id
                    msg_dict['entities'].append(entity_dict)
                except Exception:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ entities
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –±–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if hasattr(message, 'media') and message.media:
            msg_dict['media_type'] = message.media.__class__.__name__
        
        return msg_dict
        
    except Exception as e:
        # Fallback - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        return {
            'id': getattr(message, 'id', 0),
            'date': None,
            'message': getattr(message, 'message', '') or '',
            'from_id': None,
            'to_id': None,
            'reply_to_msg_id': getattr(message, 'reply_to_msg_id', None),
            'entities': [],
            'media_type': None,
            'grouped_id': None,
            'views': None,
            'forwards': None,
            'error': str(e)
        }


class MessageProxy:
    """
    –õ–µ–≥–∫–∏–π –æ–±—ä–µ–∫—Ç-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã Telethon Message.
    –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç.
    """
    def __init__(self, msg_dict: Dict[str, Any]):
        self.id = msg_dict.get('id', 0)
        self.message = msg_dict.get('message', '')
        self.from_id = msg_dict.get('from_id')
        self.to_id = msg_dict.get('to_id')
        self.reply_to_msg_id = msg_dict.get('reply_to_msg_id')
        self.grouped_id = msg_dict.get('grouped_id')
        self.views = msg_dict.get('views')
        self.forwards = msg_dict.get('forwards')
        self.media_type = msg_dict.get('media_type')
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            from datetime import datetime
            if msg_dict.get('date'):
                self.date = datetime.fromisoformat(msg_dict['date'])
            else:
                # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∫–∞–∫ timestamp
                self.date = datetime.fromtimestamp(self.id) if self.id > 1000000000 else None
        except:
            self.date = None
        
        # –§–ª–∞–≥–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
        self._is_from_discussion_group = False
        self._parent_message_id = None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self._original_data = msg_dict
    
    def __str__(self):
        return f"MessageProxy(id={self.id}, message='{self.message[:50]}...')"
    
    def __repr__(self):
        return self.__str__()


def dict_to_message_proxy(msg_dict: Dict[str, Any]) -> MessageProxy:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ MessageProxy –æ–±—ä–µ–∫—Ç.
    """
    return MessageProxy(msg_dict)


@dataclass
class MemoryStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
    total_memory_mb: float
    cache_size: int
    database_size_mb: float
    efficiency_ratio: float


class LRUCache:
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è LRU –∫—ç—à–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É."""
    
    def __init__(self, max_size: int = 1000):
        self.max_size = max_size
        self.cache = OrderedDict()
        self.lock = threading.RLock()
    
    def get(self, key: int) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)."""
        with self.lock:
            if key in self.cache:
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü (most recently used)
                value = self.cache.pop(key)
                self.cache[key] = value
                return value
            return None
    
    def put(self, key: int, value: List[Dict[str, Any]]) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à."""
        with self.lock:
            if key in self.cache:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                self.cache.pop(key)
            elif len(self.cache) >= self.max_size:
                # –£–¥–∞–ª—è–µ–º oldest item
                self.cache.popitem(last=False)
            
            self.cache[key] = value
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à."""
        with self.lock:
            self.cache.clear()
    
    def size(self) -> int:
        """–†–∞–∑–º–µ—Ä –∫—ç—à–∞."""
        return len(self.cache)


class OptimizedCommentsStorage:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏.
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    1. SQLite –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    2. LRU –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–∞–º—è—Ç–∏
    3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
    """
    
    def __init__(self, 
                 db_path: str = "comments_cache.db",
                 memory_limit_mb: int = 100,
                 lru_cache_size: int = 1000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
        
        Args:
            db_path: –ü—É—Ç—å –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            memory_limit_mb: –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –∫—ç—à–∞ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö
            lru_cache_size: –†–∞–∑–º–µ—Ä LRU –∫—ç—à–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤)
        """
        self.db_path = db_path
        self.memory_limit_mb = memory_limit_mb
        self.logger = logging.getLogger('telegram_copier.optimized_cache')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.lru_cache = LRUCache(lru_cache_size)
        self.connection = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'cache_hits': 0,
            'cache_misses': 0,
            'db_reads': 0,
            'db_writes': 0,
            'memory_cleanups': 0
        }
        
        self._init_database()
        self.logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        self.logger.info(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        self.logger.info(f"   üß† –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {memory_limit_mb} MB")
        self.logger.info(f"   üì¶ –†–∞–∑–º–µ—Ä LRU –∫—ç—à–∞: {lru_cache_size} –ø–æ—Å—Ç–æ–≤")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.connection = sqlite3.connect(self.db_path, check_same_thread=False)
            self.connection.execute("""
                CREATE TABLE IF NOT EXISTS comments (
                    post_id INTEGER PRIMARY KEY,
                    comments_data BLOB,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    access_count INTEGER DEFAULT 0,
                    last_access TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            self.connection.execute("""
                CREATE INDEX IF NOT EXISTS idx_post_id ON comments(post_id)
            """)
            
            # –ò–Ω–¥–µ–∫—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.connection.execute("""
                CREATE INDEX IF NOT EXISTS idx_last_access ON comments(last_access)
            """)
            
            self.connection.commit()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def store_comments_batch(self, comments_by_post: Dict[int, List[Message]]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–∞—Ç—á–æ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            comments_by_post: –°–ª–æ–≤–∞—Ä—å {post_id: [comments]}
        """
        if not comments_by_post:
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_data = []
            for post_id, comments in comments_by_post.items():
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Telethon Message –æ–±—ä–µ–∫—Ç—ã –≤ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–µ —Å–ª–æ–≤–∞—Ä–∏
                comments_dicts = []
                for comment in comments:
                    try:
                        comment_dict = message_to_dict(comment)
                        comments_dicts.append(comment_dict)
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {getattr(comment, 'id', 'unknown')}: {e}")
                        continue
                
                if comments_dicts:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
                    comments_json = json.dumps(comments_dicts, ensure_ascii=False)
                    insert_data.append((post_id, comments_json))
            
            if insert_data:
                # –ë–∞—Ç—á–µ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞
                self.connection.executemany("""
                    INSERT OR REPLACE INTO comments (post_id, comments_data) 
                    VALUES (?, ?)
                """, insert_data)
                
                self.connection.commit()
                self.stats['db_writes'] += len(insert_data)
                
                total_comments = sum(len(json.loads(data[1])) for data in insert_data)
                self.logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(insert_data)} —Å–≤—è–∑–µ–π –ø–æ—Å—Ç->–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ({total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)")
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –±–∞–∑—É: {e}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
    
    async def get_comments_for_post(self, post_id: int) -> List[MessageProxy]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        Args:
            post_id: ID –ø–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ MessageProxy –æ–±—ä–µ–∫—Ç–æ–≤ (—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å Message, –Ω–æ –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∏–µ–Ω—Ç)
        """
        # –£—Ä–æ–≤–µ–Ω—å 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º LRU –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        cached_comments = self.lru_cache.get(post_id)
        if cached_comments is not None:
            self.stats['cache_hits'] += 1
            self.logger.debug(f"üí® –ö—ç—à-–ø–æ–ø–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {len(cached_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä–∏ –≤ MessageProxy –æ–±—ä–µ–∫—Ç—ã
            return [dict_to_message_proxy(comment_dict) for comment_dict in cached_comments]
        
        # –£—Ä–æ–≤–µ–Ω—å 2: –ß–∏—Ç–∞–µ–º –∏–∑ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            self.stats['cache_misses'] += 1
            self.stats['db_reads'] += 1
            
            cursor = self.connection.execute("""
                SELECT comments_data FROM comments 
                WHERE post_id = ?
            """, (post_id,))
            
            row = cursor.fetchone()
            if row:
                # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ JSON
                comments_dicts = json.loads(row[0])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ LRU –∫—ç—à –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏)
                self.lru_cache.put(post_id, comments_dicts)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
                self.connection.execute("""
                    UPDATE comments 
                    SET access_count = access_count + 1, last_access = CURRENT_TIMESTAMP
                    WHERE post_id = ?
                """, (post_id,))
                self.connection.commit()
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MessageProxy –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                message_proxies = [dict_to_message_proxy(comment_dict) for comment_dict in comments_dicts]
                
                self.logger.debug(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –ë–î –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {len(message_proxies)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                return message_proxies
            else:
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç
                empty_list = []
                self.lru_cache.put(post_id, empty_list)  # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                return empty_list
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return []
    
    async def preload_comments_optimized(self, sample_batch: List[Message], 
                                       discussion_groups: set) -> None:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏.
        
        Args:
            sample_batch: –û–±—Ä–∞–∑–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            discussion_groups: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID discussion groups
        """
        if not discussion_groups:
            self.logger.info("üí¨ Discussion groups –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        total_comments = 0
        total_posts_with_comments = 0
        
        for discussion_group_id in discussion_groups:
            try:
                self.logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ discussion group {discussion_group_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                comments_batch = {}
                batch_size = 500  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 500 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ —Ä–∞–∑
                
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion group
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç integration —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–¥–æ–º
                
                await self.store_comments_batch(comments_batch)
                total_comments += sum(len(comments) for comments in comments_batch.values())
                total_posts_with_comments += len(comments_batch)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                await self._check_memory_usage()
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ discussion group {discussion_group_id}: {e}")
        
        self.logger.info(f"üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
        self.logger.info(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        self.logger.info(f"   üìä –î–ª—è {total_posts_with_comments} –ø–æ—Å—Ç–æ–≤")
        self.logger.info(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def _check_memory_usage(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            
            if memory_mb > self.memory_limit_mb:
                self.logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB > {self.memory_limit_mb} MB")
                await self._cleanup_memory()
                self.stats['memory_cleanups'] += 1
                
            self.logger.debug(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f} MB")
            
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {e}")
    
    async def _cleanup_memory(self) -> None:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏."""
        # –û—á–∏—â–∞–µ–º LRU –∫—ç—à
        old_cache_size = self.lru_cache.size()
        self.lru_cache.clear()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        import gc
        collected = gc.collect()
        
        self.logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –∫—ç—à ({old_cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤), "
                        f"—Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    def get_memory_stats(self) -> MemoryStats:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏."""
        try:
            # –†–∞–∑–º–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ø–∞–º—è—Ç–∏
            process = psutil.Process()
            total_memory_mb = process.memory_info().rss / 1024 / 1024
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size_mb = 0
            if os.path.exists(self.db_path):
                db_size_mb = os.path.getsize(self.db_path) / 1024 / 1024
            
            # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞
            total_requests = self.stats['cache_hits'] + self.stats['cache_misses']
            efficiency_ratio = self.stats['cache_hits'] / total_requests if total_requests > 0 else 0
            
            return MemoryStats(
                total_memory_mb=total_memory_mb,
                cache_size=self.lru_cache.size(),
                database_size_mb=db_size_mb,
                efficiency_ratio=efficiency_ratio
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return MemoryStats(0, 0, 0, 0)
    
    def get_performance_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        return {
            'cache_hits': self.stats['cache_hits'],
            'cache_misses': self.stats['cache_misses'],
            'db_reads': self.stats['db_reads'],
            'db_writes': self.stats['db_writes'],
            'memory_cleanups': self.stats['memory_cleanups'],
            'cache_hit_ratio': (
                self.stats['cache_hits'] / 
                (self.stats['cache_hits'] + self.stats['cache_misses'])
                if (self.stats['cache_hits'] + self.stats['cache_misses']) > 0 else 0
            )
        }
    
    def cleanup_old_data(self, days_old: int = 7) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.
        
        Args:
            days_old: –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        """
        try:
            cursor = self.connection.execute("""
                DELETE FROM comments 
                WHERE last_access < datetime('now', '-{} days')
            """.format(days_old))
            
            deleted_count = cursor.rowcount
            self.connection.commit()
            
            if deleted_count > 0:
                self.logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        if self.connection:
            self.connection.close()
            self.logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
class OptimizedTelegramCopier:
    """
    –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å.
    """
    
    def __init__(self, *args, **kwargs):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–ª–∞—Å—Å–µ
        # ...
        
        # –ó–∞–º–µ–Ω—è–µ–º in-memory –∫—ç—à –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        self.optimized_storage = OptimizedCommentsStorage(
            memory_limit_mb=kwargs.get('memory_limit_mb', 100),
            lru_cache_size=kwargs.get('lru_cache_size', 1000)
        )
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏
        # self.comments_cache = {}  # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ!
        # self.comments_cache_loaded = False  # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ!
    
    async def get_comments_from_cache(self, message) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        return await self.optimized_storage.get_comments_for_post(message.id)
    
    async def preload_all_comments_cache(self, sample_batch) -> None:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è discussion groups –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ
        discussion_groups = set()
        # ... –∫–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è discussion groups ...
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É
        await self.optimized_storage.preload_comments_optimized(
            sample_batch, discussion_groups
        )
    
    def cleanup_temp_files(self) -> None:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞."""
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.optimized_storage.cleanup_old_data(days_old=7)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        stats = self.optimized_storage.get_performance_stats()
        memory_stats = self.optimized_storage.get_memory_stats()
        
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∞:")
        self.logger.info(f"   üí® Cache hit ratio: {stats['cache_hit_ratio']:.1%}")
        self.logger.info(f"   üíæ –ü–∞–º—è—Ç—å: {memory_stats.total_memory_mb:.1f} MB")
        self.logger.info(f"   üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {memory_stats.database_size_mb:.1f} MB")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.optimized_storage.close()