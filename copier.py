"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –≥—Ä—É–ø–ø—ã.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Ç–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.
"""

import asyncio
import logging
import os
from typing import List, Optional, Union, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import (
    Message, MessageMediaPhoto, MessageMediaDocument, 
    MessageMediaWebPage, InputMediaPhoto, InputMediaDocument,
    MessageEntityTextUrl, MessageEntityUrl, MessageEntityMention,
    MessageEntityHashtag, MessageEntityBold, MessageEntityItalic,
    MessageEntityCode, MessageEntityPre, MessageEntityStrike,
    MessageEntityUnderline, MessageEntitySpoiler, MessageEntityBlockquote,
    ChannelParticipantAdmin, ChannelParticipantCreator
)
from telethon.errors import FloodWaitError, PeerFloodError, MediaInvalidError
from telethon.tl import functions
# from telethon.tl.functions.channels import GetParticipantRequest - —É–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_permissions
from telethon.tl.functions.messages import GetHistoryRequest
from utils import (RateLimiter, handle_flood_wait, save_last_message_id, ProgressTracker, 
                   sanitize_filename, format_file_size, MessageDeduplicator, PerformanceMonitor)
from album_handler import AlbumHandler
from message_tracker import MessageTracker


class TelegramCopier:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É Telegram –≥—Ä—É–ø–ø–∞–º–∏."""
    
    def __init__(self, client: TelegramClient, source_group_id: str, target_group_id: str,
                 rate_limiter: RateLimiter, dry_run: bool = False, resume_file: str = 'last_message_id.txt',
                 use_message_tracker: bool = True, tracker_file: str = 'copied_messages.json', 
                 add_debug_tags: bool = False, flatten_structure: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            client: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π Telegram –∫–ª–∏–µ–Ω—Ç
            source_group_id: ID –∏–ª–∏ username –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            target_group_id: ID –∏–ª–∏ username —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            rate_limiter: –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            dry_run: –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            resume_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            use_message_tracker: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
            tracker_file: –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            add_debug_tags: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ debug —Ç–µ–≥–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            flatten_structure: –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)
        """
        self.client = client
        self.source_group_id = source_group_id
        self.target_group_id = target_group_id
        self.rate_limiter = rate_limiter
        self.dry_run = dry_run
        self.resume_file = resume_file
        self.logger = logging.getLogger('telegram_copier.copier')
        
        # –ö—ç—à –¥–ª—è entities
        self.source_entity = None
        self.target_entity = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.copied_messages = 0
        self.failed_messages = 0
        self.skipped_messages = 0
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.deduplicator = MessageDeduplicator()
        self.performance_monitor = PerformanceMonitor()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª—å–±–æ–º–æ–≤
        self.album_handler = AlbumHandler(client)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        self.use_message_tracker = use_message_tracker
        self.add_debug_tags = add_debug_tags
        
        # –ù–û–í–û–ï: –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        self.flatten_structure = flatten_structure
        if self.flatten_structure:
            self.logger.info("üîÑ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.use_message_tracker:
            self.message_tracker = MessageTracker(tracker_file)
            self.logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π: {tracker_file}")
        else:
            self.message_tracker = None
            self.logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–∏–Ω–≥ (last_message_id.txt)")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.deduplicator.cleanup_old_hashes()
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è entities –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞.
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            try:
                self.source_entity = await self.client.get_entity(self.source_group_id)
                self.logger.info(f"–ò—Å—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω–∞: {self.source_entity.title}")
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if self.source_group_id.startswith('-100'):
                    try:
                        numeric_id = int(self.source_group_id)
                        self.logger.info(f"–ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {numeric_id}")
                        self.source_entity = await self.client.get_entity(numeric_id)
                        self.logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {self.source_entity.title}")
                    except Exception as e2:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {e2}")
                        raise e
                else:
                    raise e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª—É
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                async for message in self.client.iter_messages(self.source_entity, limit=1):
                    break
                else:
                    self.logger.warning("–ò—Å—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
            except Exception as e:
                self.logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—Ç–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: {e}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º entity —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            try:
                self.target_entity = await self.client.get_entity(self.target_group_id)
                self.logger.info(f"–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω–∞: {self.target_entity.title}")
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if self.target_group_id.startswith('-100'):
                    try:
                        numeric_id = int(self.target_group_id)
                        self.logger.info(f"–ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {numeric_id}")
                        self.target_entity = await self.client.get_entity(numeric_id)
                        self.logger.info(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {self.target_entity.title}")
                    except Exception as e2:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {e2}")
                        raise e
                else:
                    raise e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                me = await self.client.get_me()
                
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if hasattr(self.target_entity, 'broadcast'):
                    # –≠—Ç–æ –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
                        full_chat = await self.client(functions.channels.GetFullChannelRequest(self.target_entity))
                        if hasattr(full_chat, 'full_chat') and hasattr(full_chat.full_chat, 'participants_count'):
                            self.logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {full_chat.full_chat.participants_count}")
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        try:
                            permissions = await self.client.get_permissions(self.target_entity, me.id)
                            
                            if permissions.is_admin:
                                self.logger.info("‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                            else:
                                self.logger.warning("‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                                
                        except Exception as e2:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e2}")
                            self.logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
                        self.logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
                else:
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    try:
                        participants = await self.client.get_participants(self.target_entity, limit=1)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
                        is_member = False
                        async for participant in self.client.iter_participants(self.target_entity, limit=None):
                            if participant.id == me.id:
                                is_member = True
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                                if hasattr(participant, 'participant') and hasattr(participant.participant, 'admin_rights'):
                                    admin_rights = participant.participant.admin_rights
                                    if admin_rights and not admin_rights.post_messages:
                                        self.logger.warning("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ")
                                break
                        
                        if not is_member:
                            self.logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã")
                            return False
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: {e}")
            return False
    
    async def get_total_messages_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Returns:
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å GetHistoryRequest
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID
            first_message = None
            async for msg in self.client.iter_messages(self.source_entity, limit=1):
                first_message = msg
                break
            
            if not first_message:
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º ID
            history = await self.client(GetHistoryRequest(
                peer=self.source_entity,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=1,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_count = getattr(history, 'count', 0)
            
            if total_count > 0:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {total_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
                return total_count
            else:
                # Fallback: –ø–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
                self.logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                message_count = 0
                async for message in self.client.iter_messages(self.source_entity, limit=None):
                    message_count += 1
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_count % 1000 == 0:
                        self.logger.info(f"–ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                return message_count
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            return 10000  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    async def copy_all_messages(self, resume_from_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª.
        –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–æ–≥–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏).
        
        Args:
            resume_from_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã'}
        
        # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
        if self.message_tracker:
            self.message_tracker.set_channels(
                str(self.source_group_id), 
                str(self.target_group_id)
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = await self.get_total_messages_count()
        if total_messages == 0:
            self.logger.warning("–í –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return {'total_messages': 0, 'copied_messages': 0}
        
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        progress_tracker = ProgressTracker(total_messages)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if self.message_tracker and not resume_from_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
            last_copied_id = self.message_tracker.get_last_copied_id()
            if last_copied_id:
                resume_from_id = last_copied_id
                self.logger.info(f"üìä –¢—Ä–µ–∫–µ—Ä: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID {last_copied_id}")
        
        min_id = resume_from_id if resume_from_id else 0
        
        try:
            # –†–µ–∂–∏–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ–ª–∞–≥–æ–º self.flatten_structure –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ –Ω–∏–∂–µ
            
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è iter_messages
            iter_params = {
                'entity': self.source_entity,
                'reverse': True,  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º - –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                'limit': None     # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            }
            
            # –ï—Å–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if min_id:
                self.logger.info(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: {min_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ min_id
                has_new_messages = False
                async for test_message in self.client.iter_messages(self.source_entity, min_id=min_id, limit=1):
                    has_new_messages = True
                    break
                
                if not has_new_messages:
                    self.logger.info(f"üéØ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ ID {min_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
                    return {
                        'total_messages': total_messages,
                        'copied_messages': 0,
                        'failed_messages': 0,
                        'skipped_messages': 0,
                        'status': 'up_to_date',
                        'message': f'–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ ID {min_id} —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã'
                    }
                
                iter_params['min_id'] = min_id  # –ò—Å–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID <= min_id
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_tracker = ProgressTracker(total_messages)
            message_count = 0
            
            # –ü–†–û–°–¢–ê–Ø –†–ê–ë–û–ß–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
            pending_album_messages = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
            
            async for message in self.client.iter_messages(**iter_params):
                message_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                if self.deduplicator.is_message_processed(message):
                    self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    self.skipped_messages += 1
                    continue
                
                try:
                    # –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –°–†–ê–ó–£ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ, –Ω–æ —É–ª—É—á—à–µ–Ω–Ω–æ)
                    success = await self._process_message_chronologically(
                        message, pending_album_messages, progress_tracker
                    )
                    
                    if success:
                        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
                        if not self.flatten_structure:
                            await self._process_message_comments(message, progress_tracker)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        save_last_message_id(message.id, self.resume_file)
                        self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    
                except FloodWaitError as e:
                    await handle_flood_wait(e, self.logger)
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                    success = await self._process_message_chronologically(
                        message, pending_album_messages, progress_tracker
                    )
                    if success:
                        await self._process_message_comments(message, progress_tracker)
                        save_last_message_id(message.id, self.resume_file)
                        if not self.dry_run:
                            self.rate_limiter.record_message_sent()
                    
                except (PeerFloodError, MediaInvalidError) as e:
                    self.logger.warning(f"Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                    self.failed_messages += 1
                    progress_tracker.update(False)
                    
                except Exception as e:
                    self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {type(e).__name__}: {e}")
                    self.failed_messages += 1
                    progress_tracker.update(False)
            
            # –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã
            await self._finalize_pending_albums(pending_album_messages, progress_tracker)
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ")
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {'error': str(e)}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = progress_tracker.get_final_stats()
        final_stats.update({
            'copied_messages': self.copied_messages,
            'failed_messages': self.failed_messages,
            'skipped_messages': self.skipped_messages
        })
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if self.copied_messages > 0 and not self.dry_run:
            try:
                target_count = await self.get_target_messages_count()
                final_stats['target_messages_count'] = target_count
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ {target_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {e}")
        
        self.logger.info(f"üìä –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied_messages}, "
                        f"–û—à–∏–±–æ–∫: {self.failed_messages}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_messages}")
        
        return final_stats
    
    async def _process_message_chronologically(self, message: Message, 
                                            pending_album_messages: Dict[int, List[Message]],
                                            progress_tracker: ProgressTracker) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∞–ª—å–±–æ–º—ã, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pending_album_messages: –°–ª–æ–≤–∞—Ä—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
        if hasattr(message, 'grouped_id') and message.grouped_id:
            return await self._handle_album_message_chronologically(
                message, pending_album_messages, progress_tracker
            )
        else:
            # –≠—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            return await self._process_single_message_chronologically(message, progress_tracker)
    
    async def _handle_album_message_chronologically(self, message: Message,
                                                  pending_album_messages: Dict[int, List[Message]],
                                                  progress_tracker: ProgressTracker) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
        –£–õ–£–ß–®–ï–ù–û: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–ª—å–±–æ–º–æ–≤.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞
            pending_album_messages: –°–ª–æ–≤–∞—Ä—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –∞–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, False –µ—Å–ª–∏ –µ—â–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è
        """
        grouped_id = message.grouped_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–ª—å–±–æ–º
        if grouped_id not in pending_album_messages:
            pending_album_messages[grouped_id] = []
        pending_album_messages[grouped_id].append(message)
        
        self.logger.debug(f"üìé –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∞–ª—å–±–æ–º {grouped_id}")
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        next_message = await self._peek_next_message(message.id)
        
        # –ú–µ—Ç–æ–¥ 2: –ê–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω, –µ—Å–ª–∏:
        # 1. –°–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç, –ò–õ–ò
        # 2. –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∞–ª—å–±–æ–º—É, –ò–õ–ò
        # 3. –ê–ª—å–±–æ–º –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è)
        album_messages = pending_album_messages[grouped_id]
        max_album_size = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–ª—å–±–æ–º–∞ –≤ Telegram
        
        album_completed = (
            next_message is None or 
            not hasattr(next_message, 'grouped_id') or 
            next_message.grouped_id != grouped_id or
            len(album_messages) >= max_album_size
        )
        
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ –∞–ª—å–±–æ–º –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ reverse=True,
        # —Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º–µ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        if not album_completed and len(album_messages) > 1:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –ø–æ ID
            sorted_messages = sorted(album_messages, key=lambda x: x.id)
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ ID, –≤–æ–∑–º–æ–∂–Ω–æ –∞–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω
            if message.id == sorted_messages[-1].id:
                self.logger.debug(f"–ê–ª—å–±–æ–º {grouped_id} –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID)")
                album_completed = True
        
        if album_completed:
            # –ê–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            album_messages = pending_album_messages.pop(grouped_id)
            album_messages.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            
            self.logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∞–ª—å–±–æ–º {grouped_id} –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º–µ—é—Ç –º–µ–¥–∏–∞
            media_count = sum(1 for msg in album_messages if msg.media)
            if media_count == 0:
                self.logger.warning(f"–ê–ª—å–±–æ–º {grouped_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
                if album_messages:
                    return await self._process_single_message_chronologically(album_messages[0], progress_tracker)
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞–ª—å–±–æ–º–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            total_size = 0
            for msg in album_messages:
                if msg.media and hasattr(msg.media, 'document') and msg.media.document:
                    total_size += getattr(msg.media.document, 'size', 0)
                elif msg.message:
                    total_size += len(msg.message.encode('utf-8'))
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
            success = await self.copy_album(album_messages)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
            for msg in album_messages:
                progress_tracker.update(success)
                self.performance_monitor.record_message_processed(success, total_size // len(album_messages))
            
            if success:
                self.copied_messages += len(album_messages)
                self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º {grouped_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
                
                # –¢—Ä–µ–∫–µ—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–µ—Ç–æ–¥–µ copy_album —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ target_ids
                
                # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                if not self.dry_run:
                    await self.rate_limiter.wait_if_needed()
                    self.rate_limiter.record_message_sent()
            else:
                self.failed_messages += len(album_messages)
                self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–ª—å–±–æ–º {grouped_id}")
            
            return success
        else:
            # –ê–ª—å–±–æ–º –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.logger.debug(f"‚è≥ –ê–ª—å–±–æ–º {grouped_id} –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω ({len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π), –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False  # –ü–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    
    async def _peek_next_message(self, current_message_id: int) -> Optional[Message]:
        """
        –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
        
        Args:
            current_message_id: ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None
        """
        try:
            async for next_msg in self.client.iter_messages(
                self.source_entity, 
                min_id=current_message_id, 
                limit=1
            ):
                return next_msg
            return None
        except Exception as e:
            self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ {current_message_id}: {e}")
            return None
    
    async def _process_single_message_chronologically(self, message: Message, 
                                                    progress_tracker: ProgressTracker) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        message_size = 0
        if message.media and hasattr(message.media, 'document') and message.media.document:
            message_size = getattr(message.media.document, 'size', 0)
        elif message.message:
            message_size = len(message.message.encode('utf-8'))
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = await self.copy_single_message(message)
        progress_tracker.update(success)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_monitor.record_message_processed(success, message_size)
        
        if success:
            self.copied_messages += 1
            self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç—Ä–µ–∫–µ—Ä - target_id –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ copy_single_message
            
            # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
            if not self.dry_run:
                await self.rate_limiter.wait_if_needed()
                self.rate_limiter.record_message_sent()
        else:
            self.failed_messages += 1
            self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
        
        return success
    
    async def _process_message_comments(self, parent_message: Message, 
                                      progress_tracker: ProgressTracker) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        
        Args:
            parent_message: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            comment_count = 0
            pending_comment_albums = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
            
            # –í–ê–ñ–ù–û: reverse=True –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            async for comment in self.client.iter_messages(
                self.source_entity, 
                reply_to=parent_message.id,
                reverse=True,
                limit=None
            ):
                comment_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                if self.deduplicator.is_message_processed(comment):
                    self.logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    self.skipped_messages += 1
                    continue
                
                try:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞–ª—å–±–æ–º–æ–º –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
                    success = await self._process_message_chronologically(
                        comment, pending_comment_albums, progress_tracker
                    )
                    
                    if success:
                        # –†–ï–ö–£–†–°–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                        await self._process_message_comments(comment, progress_tracker)
                        
                        self.logger.debug(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}: {e}")
                    self.failed_messages += 1
                    progress_tracker.update(False)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            await self._finalize_pending_albums(pending_comment_albums, progress_tracker)
            
            if comment_count > 0:
                self.logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id}")
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id}: {e}")
    
    async def _finalize_pending_albums(self, pending_album_messages: Dict[int, List[Message]], 
                                     progress_tracker: ProgressTracker) -> None:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤.
        
        Args:
            pending_album_messages: –°–ª–æ–≤–∞—Ä—å –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–ª—å–±–æ–º–æ–≤
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        """
        for grouped_id, album_messages in pending_album_messages.items():
            if album_messages:
                album_messages.sort(key=lambda x: x.id)
                self.logger.info(f"üé¨ –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª—å–±–æ–º–∞ {grouped_id} ({len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞–ª—å–±–æ–º–∞
                total_size = 0
                for msg in album_messages:
                    if msg.media and hasattr(msg.media, 'document') and msg.media.document:
                        total_size += getattr(msg.media.document, 'size', 0)
                    elif msg.message:
                        total_size += len(msg.message.encode('utf-8'))
                
                try:
                    success = await self.copy_album(album_messages)
                    
                    for msg in album_messages:
                        progress_tracker.update(success)
                        self.performance_monitor.record_message_processed(success, total_size // len(album_messages))
                    
                    if success:
                        self.copied_messages += len(album_messages)
                        self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º {grouped_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        
                        # –¢—Ä–µ–∫–µ—Ä –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –º–µ—Ç–æ–¥–µ copy_album —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ target_ids
                        
                        if not self.dry_run:
                            await self.rate_limiter.wait_if_needed()
                            self.rate_limiter.record_message_sent()
                    else:
                        self.failed_messages += len(album_messages)
                        self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–ª—å–±–æ–º {grouped_id}")
                
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ {grouped_id}: {e}")
                    self.failed_messages += len(album_messages)
                    for msg in album_messages:
                        progress_tracker.update(False)
        
        pending_album_messages.clear()
    
    async def get_target_messages_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            history = await self.client(GetHistoryRequest(
                peer=self.target_entity,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=1,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            target_count = getattr(history, 'count', 0)
            self.logger.info(f"üìä –í —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ –Ω–∞–π–¥–µ–Ω–æ {target_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return target_count
            
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ: {e}")
            return 0
    
    async def copy_album(self, album_messages: List[Message]) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –µ–¥–∏–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ.
        
        Args:
            album_messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ ID)
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            if not album_messages:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            first_message = album_messages[0]
            
            self.logger.debug(f"–ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if self.dry_run:
                self.logger.info(f"[DRY RUN] –ê–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π: {first_message.message[:50] if first_message.message else '–º–µ–¥–∏–∞'}")
                return True
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–ª—å–±–æ–º–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            # –í Telethon –¥–ª—è –∞–ª—å–±–æ–º–æ–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–º–µ—é—Ç –º–µ–¥–∏–∞
            media_count = sum(1 for msg in album_messages if msg.media)
            self.logger.debug(f"–ê–ª—å–±–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç {media_count} –º–µ–¥–∏–∞ –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if media_count == 0:
                self.logger.warning("–ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if first_message.message:
                    return await self.copy_single_message(first_message)
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
            caption = first_message.message or ""
            
            # –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –ü–û–î–•–û–î: –ü—Ä–æ–±—É–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.logger.debug(f"–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∞—Ä–∏–∞–Ω—Ç 1)")
                send_kwargs = {
                    'entity': self.target_entity,
                    'file': album_messages,  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    'caption': caption,
                }
                
                # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if first_message.entities:
                    send_kwargs['formatting_entities'] = first_message.entities
                
                self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
                sent_messages = await self.client.send_file(**send_kwargs)
                
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö
                self.logger.debug(f"–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º –∫–∞–∫ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã (–≤–∞—Ä–∏–∞–Ω—Ç 2)")
                media_files = []
                for message in album_messages:
                    if message.media:
                        media_files.append(message.media)
                
                if not media_files:
                    self.logger.error("–ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞")
                    return False
                
                try:
                    send_kwargs = {
                        'entity': self.target_entity,
                        'file': media_files,  # –ú–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç–æ–≤
                        'caption': caption,
                    }
                    
                    if first_message.entities:
                        send_kwargs['formatting_entities'] = first_message.entities
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –º–µ–¥–∏–∞
                    sent_messages = await self.client.send_file(**send_kwargs)
                    
                except Exception as e2:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º –∫–∞–∫ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã: {e2}")
                    
                    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º InputMedia –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    self.logger.debug(f"–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª—å–±–æ–º —á–µ—Ä–µ–∑ InputMedia (–≤–∞—Ä–∏–∞–Ω—Ç 3)")
                    
                    try:
                        # –°–æ–∑–¥–∞–µ–º InputMedia –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∞–ª—å–±–æ–º–∞
                        input_media = []
                        for message in album_messages:
                            if message.media:
                                if isinstance(message.media, MessageMediaPhoto):
                                    input_media.append(InputMediaPhoto(message.media.photo))
                                elif isinstance(message.media, MessageMediaDocument):
                                    input_media.append(InputMediaDocument(message.media.document))
                        
                        if not input_media:
                            self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å InputMedia –æ–±—ä–µ–∫—Ç—ã")
                            return False
                        
                        self.logger.debug(f"–°–æ–∑–¥–∞–Ω–æ {len(input_media)} InputMedia –æ–±—ä–µ–∫—Ç–æ–≤")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º —á–µ—Ä–µ–∑ send_message —Å InputMedia
                        from telethon.tl.functions.messages import SendMultiMediaRequest
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞
                        request = SendMultiMediaRequest(
                            peer=self.target_entity,
                            multi_media=input_media,
                            message=caption or "",
                            random_id=None
                        )
                        
                        result = await self.client(request)
                        sent_messages = result.updates
                        
                        self.logger.info(f"–ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ InputMedia: {len(input_media)} —Ñ–∞–π–ª–æ–≤")
                        
                    except Exception as e3:
                        self.logger.error(f"–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {e}, {e2}, {e3}")
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                        self.logger.warning("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        success_count = 0
                        for message in album_messages:
                            if await self.copy_single_message(message):
                                success_count += 1
                        return success_count > 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞ (–¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
            if isinstance(sent_messages, list):
                self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if self.message_tracker and sent_messages:
                    source_ids = [msg.id for msg in album_messages]
                    target_ids = [msg.id for msg in sent_messages]
                    self.message_tracker.mark_album_copied(source_ids, target_ids)
            else:
                self.logger.warning(f"‚ö†Ô∏è –ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_messages.id} - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–ª—å–±–æ–º–∞
                if self.message_tracker:
                    source_ids = [msg.id for msg in album_messages]
                    target_ids = [sent_messages.id]
                    self.message_tracker.mark_album_copied(source_ids, target_ids)
            
            return True
            
        except MediaInvalidError as e:
            self.logger.warning(f"–ú–µ–¥–∏–∞ –∞–ª—å–±–æ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if album_messages and album_messages[0].message:
                try:
                    first_message = album_messages[0]
                    text_kwargs = {
                        'entity': self.target_entity,
                        'message': first_message.message,
                        'link_preview': False
                    }
                    if first_message.entities:
                        text_kwargs['formatting_entities'] = first_message.entities
                    await self.client.send_message(**text_kwargs)
                    self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∞–ª—å–±–æ–º–∞ (–º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                    return True
                except Exception as text_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–ª—å–±–æ–º–∞: {text_error}")
            return False
            
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}")
            return False
    
    async def copy_single_message(self, message: Message) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.message and not message.media:
                self.skipped_messages += 1
                return True
            
            # –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ê–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ copy_album()
            if hasattr(message, 'grouped_id') and message.grouped_id:
                self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞ {message.grouped_id}, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ")
            
            self.logger.debug(f"–ö–æ–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
            
            if self.dry_run:
                self.logger.info(f"[DRY RUN] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: {message.message[:50] if message.message else '–º–µ–¥–∏–∞'}")
                return True
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï 1:1 –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = message.message or ""
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_kwargs = {
                'entity': self.target_entity,
                'message': text,
                'link_preview': False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ï—Å–ª–∏ –µ—Å—Ç—å entities, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∞—á–µ parse_mode=None
            if message.entities:
                send_kwargs['formatting_entities'] = message.entities
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ 1:1 –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.media:
                if isinstance(message.media, MessageMediaPhoto):
                    # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º send_file —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –º–µ–¥–∏–∞
                    file_kwargs = {
                        'entity': self.target_entity,
                        'file': message.media,
                        'caption': text,
                        'force_document': False
                    }
                    if message.entities:
                        file_kwargs['formatting_entities'] = message.entities
                    sent_message = await self.client.send_file(**file_kwargs)
                    
                elif isinstance(message.media, MessageMediaDocument):
                    # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_file
                    file_kwargs = {
                        'entity': self.target_entity,
                        'file': message.media,
                        'caption': text,
                        'force_document': True
                    }
                    if message.entities:
                        file_kwargs['formatting_entities'] = message.entities
                    sent_message = await self.client.send_file(**file_kwargs)
                elif isinstance(message.media, MessageMediaWebPage):
                    # –î–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å entities
                    sent_message = await self.client.send_message(**send_kwargs)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                    try:
                        file_kwargs = {
                            'entity': self.target_entity,
                            'file': message.media,
                            'caption': text
                        }
                        if message.entities:
                            file_kwargs['formatting_entities'] = message.entities
                        sent_message = await self.client.send_file(**file_kwargs)
                    except Exception as media_error:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ {type(message.media)}: {media_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        sent_message = await self.client.send_message(**send_kwargs)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                sent_message = await self.client.send_message(**send_kwargs)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.message_tracker and sent_message:
                self.message_tracker.mark_message_copied(message.id, sent_message.id)
            
            self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ {sent_message.id}")
            return True
            
        except MediaInvalidError as e:
            self.logger.warning(f"–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.message:
                try:
                    text_kwargs = {
                        'entity': self.target_entity,
                        'message': message.message,
                        'link_preview': False
                    }
                    if message.entities:
                        text_kwargs['formatting_entities'] = message.entities
                    await self.client.send_message(**text_kwargs)
                    self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} (–º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                    return True
                except Exception as text_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {text_error}")
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return False
    
    def cleanup_temp_files(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        temp_dir = "temp_media"
        if os.path.exists(temp_dir):
            try:
                for file_name in os.listdir(temp_dir):
                    file_path = os.path.join(temp_dir, file_name)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                os.rmdir(temp_dir)
                self.logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def copy_messages_range(self, start_id: int, end_id: int) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID.
        
        Args:
            start_id: –ù–∞—á–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            end_id: –ö–æ–Ω–µ—á–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã'}
        
        self.logger.info(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start_id} –ø–æ {end_id}")
        
        copied = 0
        failed = 0
        
        try:
            async for message in self.client.iter_messages(
                self.source_entity,
                min_id=start_id - 1,
                max_id=end_id + 1,
                reverse=True
            ):
                if start_id <= message.id <= end_id:
                    success = await self.copy_single_message(message)
                    if success:
                        copied += 1
                    else:
                        failed += 1
                    
                    if not self.dry_run:
                        await self.rate_limiter.wait_if_needed()
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return {'error': str(e)}
        
        return {
            'copied_messages': copied,
            'failed_messages': failed,
            'start_id': start_id,
            'end_id': end_id
        }