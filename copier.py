"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –≥—Ä—É–ø–ø—ã.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–µ–∑ –º–µ—Ç–æ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏.
"""

import asyncio
import logging
import os
from typing import List, Optional, Union, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import (
    Message, MessageMediaPhoto, MessageMediaDocument, 
    MessageMediaWebPage, InputMediaPhoto, InputMediaDocument,
    MessageEntityTextUrl, MessageEntityUrl, MessageEntityMention,
    MessageEntityHashtag, MessageEntityBold, MessageEntityItalic,
    MessageEntityCode, MessageEntityPre, MessageEntityStrike,
    MessageEntityUnderline, MessageEntitySpoiler, MessageEntityBlockquote,
    ChannelParticipantAdmin, ChannelParticipantCreator, PeerChannel,
    DocumentAttributeFilename
)
from telethon.errors import FloodWaitError, PeerFloodError, MediaInvalidError
from telethon.tl import functions
# from telethon.tl.functions.channels import GetParticipantRequest - —É–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º get_permissions
from telethon.tl.functions.messages import GetHistoryRequest
from utils import (RateLimiter, handle_flood_wait, save_last_message_id, ProgressTracker, 
                   sanitize_filename, format_file_size, MessageDeduplicator, PerformanceMonitor)
from album_handler import AlbumHandler
from message_tracker import MessageTracker


class TelegramCopier:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É Telegram –≥—Ä—É–ø–ø–∞–º–∏."""
    
    def __init__(self, client: TelegramClient, source_group_id: str, target_group_id: str,
                 rate_limiter: RateLimiter, dry_run: bool = False, resume_file: str = 'last_message_id.txt',
                 use_message_tracker: bool = True, tracker_file: str = 'copied_messages.json', 
                 add_debug_tags: bool = False, flatten_structure: bool = False, 
                 debug_message_ids: bool = False, batch_size: int = 100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            client: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π Telegram –∫–ª–∏–µ–Ω—Ç
            source_group_id: ID –∏–ª–∏ username –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            target_group_id: ID –∏–ª–∏ username —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            rate_limiter: –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            dry_run: –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            resume_file: –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            use_message_tracker: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
            tracker_file: –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            add_debug_tags: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ debug —Ç–µ–≥–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
            flatten_structure: –ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å)
            debug_message_ids: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Ç–µ–∫—Å—Ç—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        """
        self.client = client
        self.source_group_id = source_group_id
        self.target_group_id = target_group_id
        self.rate_limiter = rate_limiter
        self.dry_run = dry_run
        self.resume_file = resume_file
        self.logger = logging.getLogger('telegram_copier.copier')
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é
        self.batch_size = batch_size
        self.logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞: {batch_size}")
        
        # –ö—ç—à –¥–ª—è entities
        self.source_entity = None
        self.target_entity = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.copied_messages = 0
        self.failed_messages = 0
        self.skipped_messages = 0
        
        # –ù–û–í–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´: –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.deduplicator = MessageDeduplicator()
        self.performance_monitor = PerformanceMonitor()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª—å–±–æ–º–æ–≤
        self.album_handler = AlbumHandler(client)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        self.use_message_tracker = use_message_tracker
        self.add_debug_tags = add_debug_tags
        
        # –ù–û–í–û–ï: –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        self.debug_message_ids = debug_message_ids
        if self.debug_message_ids:
            self.logger.info("üêõ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - ID —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Ç–µ–∫—Å—Ç—É")
        
        # –ù–û–í–û–ï: –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        self.flatten_structure = flatten_structure
        if self.flatten_structure:
            self.logger.info("üîÑ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã")
        
        # –ù–û–í–û–ï: –ö—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.comments_cache = {}  # {channel_post_id: [comments]}
        self.comments_cache_loaded = False
        self.discussion_groups_cache = set()  # –ö—ç—à ID discussion groups
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.use_message_tracker:
            self.message_tracker = MessageTracker(tracker_file)
            self.logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π: {tracker_file}")
        else:
            self.message_tracker = None
            self.logger.info("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–∏–Ω–≥ (last_message_id.txt)")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.deduplicator.cleanup_old_hashes()
    
    def _add_debug_id_to_text(self, text: str, message_id: int) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –∫ —Ç–µ–∫—Å—Ç—É –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.
        
        Args:
            text: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –¢–µ–∫—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º ID (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º)
        """
        if not self.debug_message_ids:
            return text
        
        debug_suffix = f"\n\nüêõ DEBUG: Message ID {message_id}"
        
        if text:
            return text + debug_suffix
        else:
            # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ debug ID
            return debug_suffix.strip()
    
    async def initialize(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è entities –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞.
        
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            try:
                self.source_entity = await self.client.get_entity(self.source_group_id)
                self.logger.info(f"–ò—Å—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω–∞: {self.source_entity.title}")
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if self.source_group_id.startswith('-100'):
                    try:
                        numeric_id = int(self.source_group_id)
                        self.logger.info(f"–ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {numeric_id}")
                        self.source_entity = await self.client.get_entity(numeric_id)
                        self.logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {self.source_entity.title}")
                    except Exception as e2:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {e2}")
                        raise e
                else:
                    raise e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª—É
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                async for message in self.client.iter_messages(self.source_entity, limit=1):
                    break
                else:
                    self.logger.warning("–ò—Å—Ö–æ–¥–Ω–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
            except Exception as e:
                self.logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—Ç–µ–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞: {e}")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º entity —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
            try:
                self.target_entity = await self.client.get_entity(self.target_group_id)
                self.logger.info(f"–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞/–∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω–∞: {self.target_entity.title}")
            except Exception as e:
                # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if self.target_group_id.startswith('-100'):
                    try:
                        numeric_id = int(self.target_group_id)
                        self.logger.info(f"–ü—Ä–æ–±—É–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: {numeric_id}")
                        self.target_entity = await self.client.get_entity(numeric_id)
                        self.logger.info(f"–¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {self.target_entity.title}")
                    except Exception as e2:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ —á–∏—Å–ª–æ–≤–æ–π ID: {e2}")
                        raise e
                else:
                    raise e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                me = await self.client.get_me()
                
                # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if hasattr(self.target_entity, 'broadcast'):
                    # –≠—Ç–æ –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
                        full_chat = await self.client(functions.channels.GetFullChannelRequest(self.target_entity))
                        if hasattr(full_chat, 'full_chat') and hasattr(full_chat.full_chat, 'participants_count'):
                            self.logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {full_chat.full_chat.participants_count}")
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                        try:
                            permissions = await self.client.get_permissions(self.target_entity, me.id)
                            
                            if permissions.is_admin:
                                self.logger.info("‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                            else:
                                self.logger.warning("‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                                
                        except Exception as e2:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e2}")
                            self.logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
                        self.logger.info("‚ÑπÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤")
                else:
                    # –≠—Ç–æ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    try:
                        participants = await self.client.get_participants(self.target_entity, limit=1)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã
                        is_member = False
                        async for participant in self.client.iter_participants(self.target_entity, limit=None):
                            if participant.id == me.id:
                                is_member = True
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                                if hasattr(participant, 'participant') and hasattr(participant.participant, 'admin_rights'):
                                    admin_rights = participant.participant.admin_rights
                                    if admin_rights and not admin_rights.post_messages:
                                        self.logger.warning("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ")
                                break
                        
                        if not is_member:
                            self.logger.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã")
                            return False
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ: {e}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: {e}")
            return False
    
    async def get_total_messages_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Returns:
            –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å GetHistoryRequest
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ ID
            first_message = None
            async for msg in self.client.iter_messages(self.source_entity, limit=1):
                first_message = msg
                break
            
            if not first_message:
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º ID
            history = await self.client(GetHistoryRequest(
                peer=self.source_entity,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=1,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            total_count = getattr(history, 'count', 0)
            
            if total_count > 0:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {total_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ")
                return total_count
            else:
                # Fallback: –ø–æ–¥—Å—á–µ—Ç —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ü–∏—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º)
                self.logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                message_count = 0
                async for message in self.client.iter_messages(self.source_entity, limit=None):
                    message_count += 1
                    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
                    if message_count % 1000 == 0:
                        self.logger.info(f"–ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                return message_count
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            return 10000  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    
    async def get_all_comments_from_discussion_group(self, discussion_group_id: int) -> Dict[int, List[Message]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ discussion group –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ ID –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞.
        
        Args:
            discussion_group_id: ID discussion group
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {channel_post_id: [comments]}
        """
        comments_by_post = {}
        
        try:
            discussion_group = PeerChannel(discussion_group_id)
            self.logger.info(f"üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ discussion group {discussion_group_id}")
            
            message_count = 0
            forward_messages = {}  # channel_post_id -> discussion_message_id
            all_comments = []
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ discussion group
            async for disc_message in self.client.iter_messages(discussion_group, limit=None):
                message_count += 1
                
                if message_count % 1000 == 0:
                    self.logger.info(f"   üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ discussion group...")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                if (hasattr(disc_message, 'forward') and disc_message.forward and 
                    hasattr(disc_message.forward, 'channel_post')):
                    channel_post_id = disc_message.forward.channel_post
                    forward_messages[channel_post_id] = disc_message.id
                    self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –∫–∞–Ω–∞–ª {channel_post_id} -> discussion {disc_message.id}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (reply_to —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                elif hasattr(disc_message, 'reply_to') and disc_message.reply_to:
                    all_comments.append(disc_message)
            
            self.logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {len(forward_messages)} –ø–µ—Ä–µ—Å–ª–æ–∫ –∏ {len(all_comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –ø–æ—Å—Ç–∞–º –∫–∞–Ω–∞–ª–∞
            for comment in all_comments:
                reply_to_id = comment.reply_to.reply_to_msg_id
                
                # –ù–∞—Ö–æ–¥–∏–º, –∫ –∫–∞–∫–æ–º—É –ø–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                for channel_post_id, discussion_msg_id in forward_messages.items():
                    if discussion_msg_id == reply_to_id:
                        if channel_post_id not in comments_by_post:
                            comments_by_post[channel_post_id] = []
                        comments_by_post[channel_post_id].append(comment)
                        break
            
            self.logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {len(comments_by_post)} –ø–æ—Å—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion group {discussion_group_id}: {e}")
        
        return comments_by_post
    
    async def get_comments_for_message(self, message: Message) -> List[Message]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ discussion group.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        comments = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
            if not hasattr(message, 'replies') or not message.replies:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ replies")
                return comments
            
            self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: replies = {message.replies}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if not hasattr(message.replies, 'comments') or not message.replies.comments:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                return comments
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞
            if not hasattr(message.replies, 'channel_id') or not message.replies.channel_id:
                self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–µ—Ç channel_id –≤ replies")
                return comments
                
            # –ü–æ–ª—É—á–∞–µ–º discussion group
            discussion_group_id = message.replies.channel_id
            self.logger.info(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–∞–π–¥–µ–Ω–∞ discussion group —Å ID {discussion_group_id}")
            
            try:
                discussion_group = PeerChannel(discussion_group_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏–∑ discussion group
                comment_count = 0
                
                # –í discussion groups —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ ID
                # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–º—É
                try:
                    # –ù–û–í–´–ô –ü–û–î–•–û–î: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –≤ discussion group
                    # –ß–∞—Å—Ç–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ discussion group —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ID –≤ –∫–∞–Ω–∞–ª–µ
                    target_discussion_message_id = None
                    
                    # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –ø–æ ID
                    try:
                        direct_message = await self.client.get_messages(discussion_group, ids=message.id)
                        if direct_message and not direct_message.empty:
                            target_discussion_message_id = message.id
                            self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø: –∫–∞–Ω–∞–ª {message.id} -> discussion {message.id}")
                    except Exception as direct_error:
                        self.logger.debug(f"–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {direct_error}")
                    
                    # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ forward, –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                    if not target_discussion_message_id:
                        checked_messages = 0
                        
                        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å forward_header, —É–∫–∞–∑—ã–≤–∞—é—â–∏–º –Ω–∞ –Ω–∞—à –ø–æ—Å—Ç
                        async for disc_message in self.client.iter_messages(
                            discussion_group,
                            limit=200  # –†–∞–∑—É–º–Ω—ã–π –ª–∏–º–∏—Ç
                        ):
                            checked_messages += 1
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ forward_header
                            if (hasattr(disc_message, 'forward') and disc_message.forward and 
                                hasattr(disc_message.forward, 'channel_post')):
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
                                if disc_message.forward.channel_post == message.id:
                                    target_discussion_message_id = disc_message.id
                                    self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ forward: –∫–∞–Ω–∞–ª {message.id} -> discussion {disc_message.id} (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {checked_messages} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                                    break
                        
                        if not target_discussion_message_id:
                            self.logger.debug(f"Forward –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {checked_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                    if not target_discussion_message_id:
                        message_text = getattr(message, 'message', '').strip()
                        if message_text and len(message_text) > 20:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ–∫—Å—Ç–∞
                            search_text = message_text[:100]  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                            self.logger.debug(f"–ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: '{search_text[:30]}...'")
                            
                            async for disc_message in self.client.iter_messages(
                                discussion_group,
                                limit=50,
                                reverse=True  # –ò—â–µ–º –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                            ):
                                if hasattr(disc_message, 'message') and disc_message.message:
                                    disc_text = disc_message.message.strip()
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É
                                    if disc_text and (search_text in disc_text or disc_text in search_text):
                                        target_discussion_message_id = disc_message.id
                                        self.logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: –∫–∞–Ω–∞–ª {message.id} -> discussion {disc_message.id}")
                                        break
                    
                    if target_discussion_message_id:
                        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                        self.logger.debug(f"–ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {target_discussion_message_id} –≤ discussion group {discussion_group_id}")
                        async for comment in self.client.iter_messages(
                            discussion_group, 
                            reply_to=target_discussion_message_id,
                            limit=None
                        ):
                            comments.append(comment)
                            comment_count += 1
                            
                            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            if comment_count % 500 == 0:
                                self.logger.debug(f"   üì• –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: —Å–æ–±—Ä–∞–Ω–æ {comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
                    else:
                        self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ discussion group {discussion_group_id}")
                            
                except asyncio.TimeoutError:
                    self.logger.warning(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Å–±–æ—Ä–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} (—Å–æ–±—Ä–∞–Ω–æ {comment_count})")
                except Exception as iter_error:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {iter_error}")
                    
                if comment_count > 0:
                    self.logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: —Å–æ–±—Ä–∞–Ω–æ {comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion group {discussion_group_id}")
                else:
                    self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ discussion group –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
            except Exception as group_error:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ discussion group {discussion_group_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {group_error}")
                
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            
        return comments
    
    async def copy_all_messages(self, resume_from_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª.
        –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø: –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–æ–≥–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏).
        
        Args:
            resume_from_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã'}
        
        # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
        if self.message_tracker:
            self.message_tracker.set_channels(
                str(self.source_group_id), 
                str(self.target_group_id)
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = await self.get_total_messages_count()
        if total_messages == 0:
            self.logger.warning("–í –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return {'total_messages': 0, 'copied_messages': 0}
        
        self.logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        progress_tracker = ProgressTracker(total_messages)
        
        # –ù–û–í–û–ï: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        if self.flatten_structure:
            self.logger.info("üîÑ –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã")
        else:
            self.logger.info("üîó –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç —Å–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if self.message_tracker and not resume_from_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
            last_copied_id = self.message_tracker.get_last_copied_id()
            if last_copied_id:
                resume_from_id = last_copied_id
                self.logger.info(f"üìä –¢—Ä–µ–∫–µ—Ä: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID {last_copied_id}")
        
        min_id = resume_from_id if resume_from_id else 0
        
        try:
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–ª—å–±–æ–º–æ–≤
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞—Ç–µ–º –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ª—å–±–æ–º–∞–º
            self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–ª—å–±–æ–º–æ–≤")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è iter_messages
            iter_params = {
                'entity': self.source_entity,
                'reverse': True,  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º - –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                'limit': None     # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–∞—Ä–∞–º–µ—Ç—Ä 'replies' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ current Telethon API
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ —á–∞—Å—Ç—å –æ–±—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            }
            
            # –ï—Å–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if min_id:
                self.logger.info(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID: {min_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ min_id
                has_new_messages = False
                async for test_message in self.client.iter_messages(self.source_entity, min_id=min_id, limit=1):
                    has_new_messages = True
                    break
                
                if not has_new_messages:
                    self.logger.info(f"üéØ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ ID {min_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
                    return {
                        'total_messages': total_messages,
                        'copied_messages': 0,
                        'failed_messages': 0,
                        'skipped_messages': 0,
                        'status': 'up_to_date',
                        'message': f'–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ ID {min_id} —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã'
                    }
                
                iter_params['min_id'] = min_id  # –ò—Å–∫–ª—é—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID <= min_id
            
            # –≠–¢–ê–ü 1: –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            all_messages = []
            message_count = 0
            
            async for message in self.client.iter_messages(**iter_params):
                message_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                if self.deduplicator.is_message_processed(message):
                    self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    self.skipped_messages += 1
                    continue
                
                all_messages.append(message)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(all_messages) % 1000 == 0:
                    self.logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            
            self.logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(all_messages)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –≠–¢–ê–ü 1.5: –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
            if self.flatten_structure:
                self.logger.info("üîÑ –°–±–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion groups...")
                comments_collected = 0
                messages_with_comments = 0
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ discussion groups
                discussion_groups = set()
                for message in all_messages:
                    if (hasattr(message, 'replies') and message.replies and
                        hasattr(message.replies, 'comments') and message.replies.comments and
                        hasattr(message.replies, 'channel_id') and message.replies.channel_id):
                        discussion_groups.add(message.replies.channel_id)
                
                if discussion_groups:
                    self.logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(discussion_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö discussion groups")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≤—Å–µ—Ö discussion groups
                    all_comments_by_post = {}
                    for discussion_group_id in discussion_groups:
                        comments_by_post = await self.get_all_comments_from_discussion_group(discussion_group_id)
                        all_comments_by_post.update(comments_by_post)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º
                    for message in all_messages[:]:
                        if message.id in all_comments_by_post:
                            comments = all_comments_by_post[message.id]
                            messages_with_comments += 1
                            
                            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            for comment in comments:
                                comment._is_from_discussion_group = True
                                comment._parent_message_id = message.id
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –æ–±—â–µ–º—É —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                            all_messages.extend(comments)
                            comments_collected += len(comments)
                            
                            self.logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                    
                    self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:")
                    self.logger.info(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {messages_with_comments}")
                    self.logger.info(f"   üí¨ –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_collected}")
                    
                    if comments_collected > 0:
                        self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ {comments_collected} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion groups")
                    else:
                        self.logger.info("‚ÑπÔ∏è  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ discussion groups")
                else:
                    self.logger.info("‚ÑπÔ∏è  Discussion groups –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –≠–¢–ê–ü 1.6: –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω—ã–µ + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            if comments_collected > 0:
                self.logger.info("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏...")
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
                all_messages.sort(key=lambda msg: msg.date if hasattr(msg, 'date') and msg.date else msg.id)
                
                self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏")
            
            self.logger.info(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏): {len(all_messages)}, –Ω–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É")
            
            # –≠–¢–ê–ü 2: –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∞–ª—å–±–æ–º–∞–º, –ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            grouped_messages = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            processed_albums = set()  # —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ª—å–±–æ–º—ã
            
            # –ù–û–í–û–ï: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
            main_posts_count = 0
            comments_count = 0
            albums_in_comments_count = 0
            albums_in_main_count = 0
            
            for message in all_messages:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ª–∏–±–æ –æ–±—ã—á–Ω—ã–º–∏ reply, –ª–∏–±–æ –∏–∑ discussion group
                is_comment = (hasattr(message, 'reply_to') and message.reply_to is not None) or \
                           (hasattr(message, '_is_from_discussion_group') and message._is_from_discussion_group)
                
                if is_comment:
                    comments_count += 1
                else:
                    main_posts_count += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
                if hasattr(message, 'grouped_id') and message.grouped_id:
                    if message.grouped_id not in grouped_messages:
                        grouped_messages[message.grouped_id] = []
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∞–ª—å–±–æ–º—ã –ø–æ —Ç–∏–ø—É
                        if is_comment:
                            albums_in_comments_count += 1
                        else:
                            albums_in_main_count += 1
                    grouped_messages[message.grouped_id].append(message)
                    self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –∞–ª—å–±–æ–º {message.grouped_id}")
            
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:")
            self.logger.info(f"   üìå –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {main_posts_count}")
            self.logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}")
            self.logger.info(f"   üé¨ –ê–ª—å–±–æ–º–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö: {albums_in_main_count}")
            self.logger.info(f"   üé¨ –ê–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: {albums_in_comments_count}")
            self.logger.info(f"   üì¶ –í—Å–µ–≥–æ –∞–ª—å–±–æ–º–æ–≤: {len(grouped_messages)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_tracker = ProgressTracker(total_messages)
            
            # –≠–¢–ê–ü 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ò–°–•–û–î–ù–û–ú –ü–û–†–Ø–î–ö–ï
            for message in all_messages:
                try:
                    # –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ª–∏–±–æ –æ–±—ã—á–Ω—ã–º–∏ reply, –ª–∏–±–æ –∏–∑ discussion group
                    is_comment = (hasattr(message, 'reply_to') and message.reply_to is not None) or \
                               (hasattr(message, '_is_from_discussion_group') and message._is_from_discussion_group)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
                    if hasattr(message, 'grouped_id') and message.grouped_id:
                        grouped_id = message.grouped_id
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∞–ª—å–±–æ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        if grouped_id in processed_albums:
                            continue
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å –∞–ª—å–±–æ–º —Ü–µ–ª–∏–∫–æ–º
                        album_messages = grouped_messages[grouped_id]
                        album_messages.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –∞–ª—å–±–æ–º–∞
                        album_type = "–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" if is_comment else "–æ—Å–Ω–æ–≤–Ω–æ–π"
                        self.logger.info(f"üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º {grouped_id} ({album_type}) –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∞–ª—å–±–æ–º–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        total_size = 0
                        for msg in album_messages:
                            if msg.media and hasattr(msg.media, 'document') and msg.media.document:
                                total_size += getattr(msg.media.document, 'size', 0)
                            elif msg.message:
                                total_size += len(msg.message.encode('utf-8'))
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
                        # –í —Ä–µ–∂–∏–º–µ flatten_structure –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã
                        success = await self.copy_album(album_messages)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
                        for msg in album_messages:
                            progress_tracker.update(success)
                            self.performance_monitor.record_message_processed(success, total_size // len(album_messages))
                        
                        if success:
                            self.copied_messages += len(album_messages)
                            album_status = "‚úÖ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω" if not is_comment else "‚úÖ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"
                            self.logger.info(f"{album_status}: –∞–ª—å–±–æ–º {grouped_id}")
                            
                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
                            last_album_message_id = max(msg.id for msg in album_messages)
                            save_last_message_id(last_album_message_id, self.resume_file)
                            self.logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω ID {last_album_message_id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞")
                        else:
                            self.failed_messages += len(album_messages)
                            album_status = "‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" if not is_comment else "‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"
                            self.logger.warning(f"{album_status}: –∞–ª—å–±–æ–º {grouped_id}")
                        
                        # –ü–æ–º–µ—á–∞–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                        processed_albums.add(grouped_id)
                        
                        # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if not self.dry_run:
                            await self.rate_limiter.wait_if_needed()
                            if success:
                                self.rate_limiter.record_message_sent()
                    
                    else:
                        # –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å–Ω–æ–≤–Ω–æ–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                        message_size = 0
                        if message.media and hasattr(message.media, 'document') and message.media.document:
                            message_size = getattr(message.media.document, 'size', 0)
                        elif message.message:
                            message_size = len(message.message.encode('utf-8'))
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        message_type = "üí¨ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" if is_comment else "üìå –ø–æ—Å—Ç"
                        if not self.flatten_structure and is_comment:
                            # –í —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                            self.logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {message_type} {message.id} (—Å–≤—è–∑–∞–Ω —Å {message.reply_to})")
                        else:
                            self.logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {message_type} {message.id}")
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        success = await self.copy_single_message(message)
                        progress_tracker.update(success)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        self.performance_monitor.record_message_processed(success, message_size)
                        
                        if success:
                            self.copied_messages += 1
                            success_status = "‚úÖ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ" if not is_comment else "‚úÖ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"
                            self.logger.debug(f"{success_status}: —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                            save_last_message_id(message.id, self.resume_file)
                            self.logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω ID {message.id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
                        else:
                            self.failed_messages += 1
                            fail_status = "‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å" if not is_comment else "‚ùå –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)"
                            self.logger.warning(f"{fail_status}: —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                        
                        # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if not self.dry_run:
                            await self.rate_limiter.wait_if_needed()
                            if success:
                                self.rate_limiter.record_message_sent()
                
                except FloodWaitError as e:
                    await handle_flood_wait(e, self.logger)
                    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if hasattr(message, 'grouped_id') and message.grouped_id and message.grouped_id not in processed_albums:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–ª—å–±–æ–º
                        grouped_id = message.grouped_id
                        album_messages = grouped_messages[grouped_id]
                        album_messages.sort(key=lambda x: x.id)
                        success = await self.copy_album(album_messages)
                        
                        for msg in album_messages:
                            progress_tracker.update(success)
                        
                        if success:
                            self.copied_messages += len(album_messages)
                            self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º {grouped_id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ FloodWait")
                            last_album_message_id = max(msg.id for msg in album_messages)
                            save_last_message_id(last_album_message_id, self.resume_file)
                            self.logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω ID {last_album_message_id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞ (FloodWait)")
                            if not self.dry_run:
                                self.rate_limiter.record_message_sent()
                        else:
                            self.failed_messages += len(album_messages)
                            self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–ª—å–±–æ–º {grouped_id} –¥–∞–∂–µ –ø–æ—Å–ª–µ FloodWait")
                        
                        processed_albums.add(grouped_id)
                        
                    else:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        success = await self.copy_single_message(message)
                        progress_tracker.update(success)
                        
                        if success:
                            self.copied_messages += 1
                            self.logger.debug(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ FloodWait")
                            save_last_message_id(message.id, self.resume_file)
                            self.logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω ID {message.id} –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (FloodWait)")
                            if not self.dry_run:
                                self.rate_limiter.record_message_sent()
                        else:
                            self.failed_messages += 1
                            self.logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –¥–∞–∂–µ –ø–æ—Å–ª–µ FloodWait")
                
                except (PeerFloodError, MediaInvalidError) as e:
                    if hasattr(message, 'grouped_id') and message.grouped_id:
                        grouped_id = message.grouped_id
                        if grouped_id not in processed_albums:
                            album_messages = grouped_messages[grouped_id]
                            self.logger.warning(f"Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è –∞–ª—å–±–æ–º–∞ {grouped_id}: {e}")
                            self.failed_messages += len(album_messages)
                            for msg in album_messages:
                                progress_tracker.update(False)
                            processed_albums.add(grouped_id)
                    else:
                        self.logger.warning(f"Telegram API –æ—à–∏–±–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                        self.failed_messages += 1
                        progress_tracker.update(False)
                
                except Exception as e:
                    if hasattr(message, 'grouped_id') and message.grouped_id:
                        grouped_id = message.grouped_id
                        if grouped_id not in processed_albums:
                            album_messages = grouped_messages[grouped_id]
                            self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞ {grouped_id}: {type(e).__name__}: {e}")
                            self.failed_messages += len(album_messages)
                            for msg in album_messages:
                                progress_tracker.update(False)
                            processed_albums.add(grouped_id)
                    else:
                        self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {type(e).__name__}: {e}")
                        self.failed_messages += 1
                        progress_tracker.update(False)
            
            self.logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ")
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {'error': str(e)}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = progress_tracker.get_final_stats()
        final_stats.update({
            'copied_messages': self.copied_messages,
            'failed_messages': self.failed_messages,
            'skipped_messages': self.skipped_messages
        })
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if self.copied_messages > 0 and not self.dry_run:
            try:
                target_count = await self.get_target_messages_count()
                final_stats['target_messages_count'] = target_count
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ {target_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {e}")
        
        self.logger.info(f"üìä –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied_messages}, "
                        f"–û—à–∏–±–æ–∫: {self.failed_messages}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_messages}")
        
        return final_stats
    
    async def copy_all_messages_batch(self, resume_from_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –ü–ê–ú–Ø–¢–ò –ò –•–†–û–ù–û–õ–û–ì–ò–ò –ø–æ—Å–ª–µ 500-600 –ø–æ—Å—Ç–æ–≤.
        
        Args:
            resume_from_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã'}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
        if self.message_tracker:
            self.message_tracker.set_channels(
                str(self.source_group_id), 
                str(self.target_group_id)
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = await self.get_total_messages_count()
        if total_messages == 0:
            self.logger.warning("–í –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return {'total_messages': 0, 'copied_messages': 0}
        
        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ë–ê–¢–ß–ï–í–û–ï –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –º–µ—Ç–æ–¥–µ)
        if self.flatten_structure:
            self.logger.info("üîÑ –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã")
        else:
            self.logger.info("üîó –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç —Å–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        if self.message_tracker and not resume_from_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
            last_copied_id = self.message_tracker.get_last_copied_id()
            if last_copied_id:
                resume_from_id = last_copied_id
                self.logger.info(f"üìä –¢—Ä–µ–∫–µ—Ä: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID {last_copied_id}")
        
        min_id = resume_from_id if resume_from_id else 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_tracker = ProgressTracker(total_messages)
        
        try:
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            batch_number = 1
            
                    # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É
        async for batch in self._get_message_batches(min_id):
            if not batch:  # –ü—É—Å—Ç–æ–π –±–∞—Ç—á - –∫–æ–Ω–µ—Ü
                break
            
            self.logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á #{batch_number}: {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ù–û–í–û–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –±–∞—Ç—á–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            if not self.comments_cache_loaded:
                await self.preload_all_comments_cache(batch)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            batch_stats = await self._process_message_batch(batch, progress_tracker)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.copied_messages += batch_stats['copied']
                self.failed_messages += batch_stats['failed'] 
                self.skipped_messages += batch_stats['skipped']
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–∞
                self.logger.info(f"‚úÖ –ë–∞—Ç—á #{batch_number} –∑–∞–≤–µ—Ä—à–µ–Ω: "
                               f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {batch_stats['copied']}, "
                               f"–æ—à–∏–±–æ–∫ {batch_stats['failed']}, "
                               f"–ø—Ä–æ–ø—É—â–µ–Ω–æ {batch_stats['skipped']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if batch:
                    last_message_id = max(msg.id for msg in batch)
                    save_last_message_id(last_message_id, self.resume_file)
                    self.logger.debug(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–π ID {last_message_id}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                await self._cleanup_batch_memory()
                
                batch_number += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞
                if len(batch) < self.batch_size:
                    self.logger.info("üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞–Ω–∞–ª–∞ (–±–∞—Ç—á –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–∞)")
                    break
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞—Ç—á–µ–≤–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {'error': str(e)}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = progress_tracker.get_final_stats()
        final_stats.update({
            'copied_messages': self.copied_messages,
            'failed_messages': self.failed_messages,
            'skipped_messages': self.skipped_messages,
            'batches_processed': batch_number - 1,
            'batch_size': self.batch_size
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        if self.copied_messages > 0 and not self.dry_run:
            try:
                target_count = await self.get_target_messages_count()
                final_stats['target_messages_count'] = target_count
                self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ {target_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {e}")
        
        self.logger.info(f"üéâ –ë–∞—Ç—á–µ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! "
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_number-1} –±–∞—Ç—á–µ–π. "
                        f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied_messages}, "
                        f"–û—à–∏–±–æ–∫: {self.failed_messages}, "
                        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_messages}")
        
        return final_stats
    
    async def _get_message_batches(self, min_id: int = 0):
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∞—Ç—á–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å!
        
        Args:
            min_id: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Yields:
            –ë–∞—Ç—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–º self.batch_size
        """
        offset_id = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–ª—è reverse=True
        
        while True:
            try:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ç—á–∞
                iter_params = {
                    'entity': self.source_entity,
                    'limit': self.batch_size,
                    'reverse': True,  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º offset_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
                if offset_id > 0:
                    iter_params['offset_id'] = offset_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º min_id –µ—Å–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
                if min_id > 0:
                    iter_params['min_id'] = min_id
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π
                batch = []
                
                async for message in self.client.iter_messages(**iter_params):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                    if self.deduplicator.is_message_processed(message):
                        self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    batch.append(message)
                
                # –ï—Å–ª–∏ –±–∞—Ç—á –ø—É—Å—Ç–æ–π - –∫–æ–Ω–µ—Ü
                if not batch:
                    break
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞–ª–∏ –ª–∏ –∞–ª—å–±–æ–º
                batch = await self._ensure_complete_albums(batch, iter_params)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º offset_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                # –í reverse=True —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ) —Å–æ–æ–±—â–µ–Ω–∏—è
                offset_id = batch[-1].id
                
                self.logger.debug(f"üì¶ –ü–æ–ª—É—á–µ–Ω –±–∞—Ç—á –∏–∑ {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π "
                                f"(ID –æ—Ç {batch[0].id} –¥–æ {batch[-1].id})")
                
                yield batch
                
                # –ï—Å–ª–∏ –±–∞—Ç—á –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
                if len(batch) < self.batch_size:
                    break
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break
    
    async def _ensure_complete_albums(self, batch: List[Message], iter_params: dict) -> List[Message]:
        """
        –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–ª—å–±–æ–º—ã –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞–Ω—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏.
        
        Args:
            batch: –ò—Å—Ö–æ–¥–Ω—ã–π –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π
            iter_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è iter_messages
            
        Returns:
            –ë–∞—Ç—á —Å –ø–æ–ª–Ω—ã–º–∏ –∞–ª—å–±–æ–º–∞–º–∏
        """
        if not batch:
            return batch
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–ª—å–±–æ–º—ã –≤ –±–∞—Ç—á–µ
        albums_in_batch = {}
        for message in batch:
            if hasattr(message, 'grouped_id') and message.grouped_id:
                if message.grouped_id not in albums_in_batch:
                    albums_in_batch[message.grouped_id] = []
                albums_in_batch[message.grouped_id].append(message)
        
        if not albums_in_batch:
            return batch  # –ù–µ—Ç –∞–ª—å–±–æ–º–æ–≤ - –±–∞—Ç—á –≥–æ—Ç–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –Ω–µ–ø–æ–ª–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–Ω—Ü–µ –±–∞—Ç—á–∞
        last_message = batch[-1]
        incomplete_albums = []
        
        for grouped_id, album_messages in albums_in_batch.items():
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–∞—Ç—á–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–ª—å–±–æ–º—É,
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∞–ª—å–±–æ–º–∞ –ø–æ—Å–ª–µ –±–∞—Ç—á–∞
            if any(msg.id == last_message.id for msg in album_messages):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    check_params = iter_params.copy()
                    check_params['offset_id'] = last_message.id
                    check_params['limit'] = 10  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    
                    async for next_message in self.client.iter_messages(**check_params):
                        if (hasattr(next_message, 'grouped_id') and 
                            next_message.grouped_id == grouped_id):
                            # –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞—Ç—á—É
                            batch.append(next_message)
                            album_messages.append(next_message)
                            self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {next_message.id} –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ {grouped_id}")
                        else:
                            # –ê–ª—å–±–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω
                            break
                            
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª—å–±–æ–º–∞ {grouped_id}: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞—Ç—á –ø–æ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        batch.sort(key=lambda msg: msg.id)
        
        if len(batch) > len(albums_in_batch) * 2:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            self.logger.debug(f"–ë–∞—Ç—á —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∞–ª—å–±–æ–º–æ–≤")
        
        return batch
    
    async def _process_message_batch(self, batch: List[Message], progress_tracker: ProgressTracker) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            batch: –ë–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
        """
        batch_stats = {'copied': 0, 'failed': 0, 'skipped': 0}
        
        self.logger.debug(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ –∏–∑ {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        batch_with_comments = []
        
        if self.flatten_structure:
            self.logger.debug("üí¨ –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ
            for message in batch:
                batch_with_comments.append(message)
                
                # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –∫—ç—à–∞
                try:
                    comments = await self.get_comments_from_cache(message)
                    if comments:
                        self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫—ç—à–µ")
                        
                        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
                        for comment in comments:
                            comment._is_from_discussion_group = True
                            comment._parent_message_id = message.id
                        
                        batch_with_comments.extend(comments)
                    else:
                        self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫—ç—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –±–∞—Ç—á (—Å–æ–æ–±—â–µ–Ω–∏—è + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            batch_with_comments.sort(key=lambda msg: msg.date if hasattr(msg, 'date') and msg.date else msg.id)
            self.logger.debug(f"üìä –ë–∞—Ç—á —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ {len(batch_with_comments)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")
            
        else:
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–∞—Ç—á
            batch_with_comments = batch
            self.logger.debug("üîó –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –±–∞—Ç—á")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –±–∞—Ç—á–µ
        albums = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        single_messages = []
        
        for message in batch_with_comments:
            if hasattr(message, 'grouped_id') and message.grouped_id:
                if message.grouped_id not in albums:
                    albums[message.grouped_id] = []
                albums[message.grouped_id].append(message)
            else:
                single_messages.append(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö ID (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è)
        all_items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in single_messages:
            all_items.append(('single', msg))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º—ã (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        for grouped_id, album_messages in albums.items():
            album_messages.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∞–ª—å–±–æ–º–∞
            all_items.append(('album', album_messages))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        all_items.sort(key=lambda item: item[1].id if item[0] == 'single' else item[1][0].id)
        
        self.logger.debug(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(all_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(single_messages)} –æ–¥–∏–Ω–æ—á–Ω—ã—Ö, {len(albums)} –∞–ª—å–±–æ–º–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for item_type, item_data in all_items:
            try:
                success = False
                if item_type == 'single':
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = item_data
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–ª–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if hasattr(message, '_is_from_discussion_group') and message._is_from_discussion_group:
                        # –≠—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ discussion group
                        self.logger.debug(f"üí¨ –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {message.id} (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Å—Ç: {getattr(message, '_parent_message_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
                    else:
                        # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        self.logger.debug(f"üìù –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                    
                    success = await self.copy_single_message(message)
                    
                    if success:
                        batch_stats['copied'] += 1
                        save_last_message_id(message.id, self.resume_file)
                    else:
                        batch_stats['failed'] += 1
                    
                    progress_tracker.update(success)
                    
                    # –ù–û–í–û–ï: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
                    if not self.flatten_structure and success and not hasattr(message, '_is_from_discussion_group'):
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        try:
                            self.logger.debug(f"üîó –ó–∞–ø—É—Å–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
                            comments_stats = await self._process_comments_recursively(message)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞
                            batch_stats['copied'] += comments_stats['copied']
                            batch_stats['failed'] += comments_stats['failed']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            for _ in range(comments_stats['copied'] + comments_stats['failed']):
                                progress_tracker.update(True if comments_stats['copied'] > 0 else False)
                            
                            if comments_stats['copied'] > 0 or comments_stats['failed'] > 0:
                                self.logger.debug(f"üìä –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                                f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {comments_stats['copied']}, –æ—à–∏–±–æ–∫ {comments_stats['failed']}")
                                        
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                
                elif item_type == 'album':
                    # –ê–ª—å–±–æ–º
                    album_messages = item_data
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º–æ–º –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    is_comment_album = any(hasattr(msg, '_is_from_discussion_group') and msg._is_from_discussion_group 
                                         for msg in album_messages)
                    
                    if is_comment_album:
                        parent_id = getattr(album_messages[0], '_parent_message_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        self.logger.debug(f"üí¨ –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Å—Ç: {parent_id})")
                    else:
                        self.logger.debug(f"üì∏ –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    success = await self.copy_album(album_messages)
                    
                    if success:
                        batch_stats['copied'] += len(album_messages)
                        last_album_id = max(msg.id for msg in album_messages)
                        save_last_message_id(last_album_id, self.resume_file)
                    else:
                        batch_stats['failed'] += len(album_messages)
                    
                    for msg in album_messages:
                        progress_tracker.update(success)
                    
                    # –ù–û–í–û–ï: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–ª—å–±–æ–º—É –≤ —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
                    if not self.flatten_structure and success and not is_comment_album:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–ª—å–±–æ–º—É (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å)
                        representative_message = album_messages[0]
                        try:
                            self.logger.debug(f"üîó –ó–∞–ø—É—Å–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–ª—å–±–æ–º–∞ {representative_message.grouped_id}")
                            comments_stats = await self._process_comments_recursively(representative_message)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞
                            batch_stats['copied'] += comments_stats['copied']
                            batch_stats['failed'] += comments_stats['failed']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                            for _ in range(comments_stats['copied'] + comments_stats['failed']):
                                progress_tracker.update(True if comments_stats['copied'] > 0 else False)
                            
                            if comments_stats['copied'] > 0 or comments_stats['failed'] > 0:
                                self.logger.debug(f"üìä –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–ª—å–±–æ–º—É {representative_message.grouped_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                                f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {comments_stats['copied']}, –æ—à–∏–±–æ–∫ {comments_stats['failed']}")
                                        
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–ª—å–±–æ–º–∞ {representative_message.grouped_id}: {e}")
                
                # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                if not self.dry_run and success:
                    await self.rate_limiter.wait_if_needed()
                    self.rate_limiter.record_message_sent()
            
            except FloodWaitError as e:
                await handle_flood_wait(e, self.logger)
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                if item_type == 'single':
                    success = await self.copy_single_message(item_data)
                    if success:
                        batch_stats['copied'] += 1
                    else:
                        batch_stats['failed'] += 1
                else:
                    success = await self.copy_album(item_data)
                    if success:
                        batch_stats['copied'] += len(item_data)
                    else:
                        batch_stats['failed'] += len(item_data)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {item_type}: {e}")
                if item_type == 'single':
                    batch_stats['failed'] += 1
                else:
                    batch_stats['failed'] += len(item_data)
        
        return batch_stats
    
    async def _cleanup_batch_memory(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞."""
        import gc
        gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—ã–π)
        self.deduplicator.cleanup_old_hashes()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        await asyncio.sleep(0.1)

    async def _process_comments_recursively(self, parent_message: Message, depth: int = 0, 
                                          max_depth: int = 10) -> Dict[str, int]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º (–ª—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏).
        
        Args:
            parent_message: –°–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            depth: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏)
            max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        """
        comments_stats = {'copied': 0, 'failed': 0}
        
        if depth >= max_depth:
            self.logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ {max_depth} –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return comments_stats
        
        try:
            # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –∫—ç—à–∞
            comments = await self.get_comments_from_cache(parent_message)
            
            if not comments:
                self.logger.debug(f"{'  ' * depth}üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {parent_message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≥–ª—É–±–∏–Ω–∞ {depth})")
                return comments_stats
            
            self.logger.debug(f"{'  ' * depth}üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id} (–≥–ª—É–±–∏–Ω–∞ {depth})")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –¥–∞—Ç–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            comments.sort(key=lambda c: c.date if hasattr(c, 'date') and c.date else c.id)
            
            for comment in comments:
                try:
                    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    self.logger.debug(f"{'  ' * depth}üí¨ –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} (–≥–ª—É–±–∏–Ω–∞ {depth})")
                    comment_success = await self.copy_single_message(comment)
                    
                    if comment_success:
                        comments_stats['copied'] += 1
                        self.logger.debug(f"{'  ' * depth}‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
                        
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                        nested_stats = await self._process_comments_recursively(comment, depth + 1, max_depth)
                        comments_stats['copied'] += nested_stats['copied']
                        comments_stats['failed'] += nested_stats['failed']
                        
                    else:
                        comments_stats['failed'] += 1
                        self.logger.debug(f"{'  ' * depth}‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}")
                    
                    # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                    if not self.dry_run and comment_success:
                        await self.rate_limiter.wait_if_needed()
                        self.rate_limiter.record_message_sent()
                        
                except Exception as comment_error:
                    self.logger.error(f"{'  ' * depth}–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}: {comment_error}")
                    comments_stats['failed'] += 1
                    
        except Exception as e:
            self.logger.warning(f"{'  ' * depth}–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {parent_message.id} (–≥–ª—É–±–∏–Ω–∞ {depth}): {e}")
        
        if comments_stats['copied'] > 0 or comments_stats['failed'] > 0:
            self.logger.debug(f"{'  ' * depth}üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≥–ª—É–±–∏–Ω–∞ {depth}): "
                            f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {comments_stats['copied']}, –æ—à–∏–±–æ–∫ {comments_stats['failed']}")
        
        return comments_stats
    
    async def get_target_messages_count(self) -> int:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            history = await self.client(GetHistoryRequest(
                peer=self.target_entity,
                offset_id=0,
                offset_date=None,
                add_offset=0,
                limit=1,
                max_id=0,
                min_id=0,
                hash=0
            ))
            
            target_count = getattr(history, 'count', 0)
            self.logger.info(f"üìä –í —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ –Ω–∞–π–¥–µ–Ω–æ {target_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return target_count
            
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ: {e}")
            return 0
    
    async def copy_album(self, album_messages: List[Message]) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –µ–¥–∏–Ω–æ–≥–æ —Ü–µ–ª–æ–≥–æ.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∞–ª—å–±–æ–º–∞–º–∏.
        –ò–°–ü–†–ê–í–õ–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê –° –ê–õ–¨–ë–û–ú–ê–ú–ò –í –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø–•: —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–æ–≤.
        
        Args:
            album_messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ ID)
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            if not album_messages:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            first_message = album_messages[0]
            
            self.logger.debug(f"–ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if self.dry_run:
                self.logger.info(f"[DRY RUN] –ê–ª—å–±–æ–º –∏–∑ {len(album_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π: {first_message.message[:50] if first_message.message else '–º–µ–¥–∏–∞'}")
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –º–µ–¥–∏–∞ (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ protected chats)
            is_from_discussion_group = hasattr(first_message, '_is_from_discussion_group') and first_message._is_from_discussion_group
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏–∑ –∞–ª—å–±–æ–º–∞
            media_files = []
            for message in album_messages:
                if message.media:
                    if is_from_discussion_group:
                        # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        self.logger.debug(f"–°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {message.id} –¥–ª—è –∞–ª—å–±–æ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤")
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞
                        suggested_filename = None
                        
                        if hasattr(message.media, 'document') and message.media.document:
                            doc = message.media.document
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                            for attr in getattr(doc, 'attributes', []):
                                if isinstance(attr, DocumentAttributeFilename):
                                    suggested_filename = attr.file_name
                                    break
                            
                            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ MIME-—Ç–∏–ø–∞
                            if not suggested_filename:
                                mime_type = getattr(doc, 'mime_type', None)
                                if mime_type:
                                    if mime_type.startswith('image/'):
                                        extension = mime_type.split('/')[-1]
                                        if extension == 'jpeg':
                                            extension = 'jpg'
                                        suggested_filename = f"image_{message.id}.{extension}"
                                    elif mime_type.startswith('video/'):
                                        extension = mime_type.split('/')[-1]
                                        suggested_filename = f"video_{message.id}.{extension}"
                                    elif mime_type.startswith('audio/'):
                                        extension = mime_type.split('/')[-1]
                                        suggested_filename = f"audio_{message.id}.{extension}"
                                    else:
                                        suggested_filename = f"document_{message.id}"
                                else:
                                    suggested_filename = f"document_{message.id}"
                        
                        elif isinstance(message.media, MessageMediaPhoto):
                            suggested_filename = f"photo_{message.id}.jpg"
                        
                        if not suggested_filename:
                            suggested_filename = f"media_{message.id}"
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ bytes
                        downloaded_file = await self.client.download_media(message.media, file=bytes)
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        import tempfile
                        import os
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{suggested_filename}") as temp_file:
                            temp_file.write(downloaded_file)
                            temp_file_path = temp_file.name
                        
                        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
                        proper_temp_path = os.path.join(os.path.dirname(temp_file_path), suggested_filename)
                        os.rename(temp_file_path, proper_temp_path)
                        
                        media_files.append(proper_temp_path)
                    else:
                        # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        media_files.append(message.media)
            
            if not media_files:
                self.logger.warning("–ê–ª—å–±–æ–º –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
                # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if first_message.message:
                    return await self.copy_single_message(first_message)
                return False
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –õ–Æ–ë–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞, –≥–¥–µ –æ–Ω –µ—Å—Ç—å
            caption = ""
            caption_entities = None
            caption_message_id = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            for msg in album_messages:
                if msg.message and msg.message.strip():
                    caption = msg.message
                    caption_entities = msg.entities
                    caption_message_id = msg.id
                    self.logger.debug(f"–ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –∞–ª—å–±–æ–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg.id}: '{caption[:50]}...'")
                    break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –Ω–æ –≤–∫–ª—é—á–µ–Ω debug —Ä–µ–∂–∏–º, –¥–æ–±–∞–≤–ª—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
            if not caption and self.debug_message_ids:
                caption_message_id = album_messages[0].id
            
            # –î–æ–±–∞–≤–ª—è–µ–º debug ID –∫ —Ç–µ–∫—Å—Ç—É –∞–ª—å–±–æ–º–∞
            if caption_message_id:
                caption = self._add_debug_id_to_text(caption, caption_message_id)
            
            if not caption and not self.debug_message_ids:
                self.logger.debug("–ê–ª—å–±–æ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞
            send_kwargs = {
                'entity': self.target_entity,
                'file': media_files,  # –ú–∞—Å—Å–∏–≤ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (—Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Å –∏–º–µ–Ω–∞–º–∏ –∏–ª–∏ —Å—Å—ã–ª–æ–∫)
                'caption': caption,
            }
            
            # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
            if caption_entities:
                send_kwargs['formatting_entities'] = caption_entities
            
            self.logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∏–∑ {len(media_files)} –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∫–∞–∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞
            sent_messages = await self.client.send_file(**send_kwargs)
            
            # –í–ê–ñ–ù–û: –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            temp_files_to_cleanup = []
            for media_file in media_files:
                if isinstance(media_file, str) and os.path.exists(media_file) and media_file.startswith('/tmp'):
                    temp_files_to_cleanup.append(media_file)
            
            for temp_file in temp_files_to_cleanup:
                try:
                    os.remove(temp_file)
                    self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file}: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(sent_messages, list):
                self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ —Ñ–∞–π–ª–æ–≤")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if self.message_tracker and sent_messages:
                    source_ids = [msg.id for msg in album_messages]
                    target_ids = [msg.id for msg in sent_messages]
                    self.message_tracker.mark_album_copied(source_ids, target_ids)
            else:
                self.logger.warning(f"‚ö†Ô∏è –ê–ª—å–±–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {sent_messages.id} - –≤–æ–∑–º–æ–∂–Ω–∞ –ø–æ—Ç–µ—Ä—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –∞–ª—å–±–æ–º–∞
                if self.message_tracker:
                    source_ids = [msg.id for msg in album_messages]
                    target_ids = [sent_messages.id]
                    self.message_tracker.mark_album_copied(source_ids, target_ids)
            
            return True
            
        except MediaInvalidError as e:
            self.logger.warning(f"–ú–µ–¥–∏–∞ –∞–ª—å–±–æ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞, –≥–¥–µ –æ–Ω –µ—Å—Ç—å
            text_message = None
            for msg in album_messages:
                if msg.message and msg.message.strip():
                    text_message = msg
                    break
            
            if text_message:
                try:
                    text_kwargs = {
                        'entity': self.target_entity,
                        'message': text_message.message,
                        'link_preview': False
                    }
                    if text_message.entities:
                        text_kwargs['formatting_entities'] = text_message.entities
                    await self.client.send_message(**text_kwargs)
                    self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∞–ª—å–±–æ–º–∞ (–º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                    return True
                except Exception as text_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–ª—å–±–æ–º–∞: {text_error}")
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'media_files' in locals():
                for media_file in media_files:
                    if isinstance(media_file, str) and os.path.exists(media_file) and media_file.startswith('/tmp'):
                        try:
                            os.remove(media_file)
                            self.logger.debug(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {media_file}")
                        except Exception as cleanup_error:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {media_file}: {cleanup_error}")
            
            return False
    
    async def copy_single_message(self, message: Message) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            True –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.message and not message.media:
                self.skipped_messages += 1
                return True
            
            # –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            # –ê–ª—å–±–æ–º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ copy_album()
            if hasattr(message, 'grouped_id') and message.grouped_id:
                self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞ {message.grouped_id}, –Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ")
            
            self.logger.debug(f"–ö–æ–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
            
            if self.dry_run:
                self.logger.info(f"[DRY RUN] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: {message.message[:50] if message.message else '–º–µ–¥–∏–∞'}")
                return True
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï 1:1 –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            text = message.message or ""
            
            # –î–æ–±–∞–≤–ª—è–µ–º debug ID –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
            text = self._add_debug_id_to_text(text, message.id)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_kwargs = {
                'entity': self.target_entity,
                'message': text,
                'link_preview': False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            }
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            # –ï—Å–ª–∏ –µ—Å—Ç—å entities, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∞—á–µ parse_mode=None
            if message.entities:
                send_kwargs['formatting_entities'] = message.entities
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ 1:1 –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.media:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –º–µ–¥–∏–∞ (–¥–ª—è protected chats)
                is_from_discussion_group = hasattr(message, '_is_from_discussion_group') and message._is_from_discussion_group
                
                if isinstance(message.media, MessageMediaPhoto):
                    # –î–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    if is_from_discussion_group:
                        # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        self.logger.debug(f"–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {message.id} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏")
                        downloaded_file = await self.client.download_media(message.media, file=bytes)
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        suggested_filename = f"photo_{message.id}.jpg"
                        import tempfile
                        import os
                        
                        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{suggested_filename}") as temp_file:
                            temp_file.write(downloaded_file)
                            temp_file_path = temp_file.name
                        
                        proper_temp_path = os.path.join(os.path.dirname(temp_file_path), suggested_filename)
                        os.rename(temp_file_path, proper_temp_path)
                        
                        file_kwargs = {
                            'entity': self.target_entity,
                            'file': proper_temp_path,
                            'caption': text,
                            'force_document': False
                        }
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç –Ω–∏–∂–µ
                        temp_file_to_cleanup = proper_temp_path
                    else:
                        # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        file_kwargs = {
                            'entity': self.target_entity,
                            'file': message.media,
                            'caption': text,
                            'force_document': False
                        }
                        temp_file_to_cleanup = None
                    
                    if message.entities:
                        file_kwargs['formatting_entities'] = message.entities
                    sent_message = await self.client.send_file(**file_kwargs)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                    if temp_file_to_cleanup:
                        try:
                            os.remove(temp_file_to_cleanup)
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file_to_cleanup}: {e}")
                    
                elif isinstance(message.media, MessageMediaDocument):
                    # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤/–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ
                    if is_from_discussion_group:
                        # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        self.logger.debug(f"–°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {message.id} –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–º–µ–Ω–∏")
                        downloaded_file = await self.client.download_media(message.media, file=bytes)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                        suggested_filename = None
                        if hasattr(message.media, 'document') and message.media.document:
                            doc = message.media.document
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                            for attr in getattr(doc, 'attributes', []):
                                if isinstance(attr, DocumentAttributeFilename):
                                    suggested_filename = attr.file_name
                                    break
                            
                            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ MIME-—Ç–∏–ø–∞
                            if not suggested_filename:
                                mime_type = getattr(doc, 'mime_type', None)
                                if mime_type:
                                    if mime_type.startswith('image/'):
                                        extension = mime_type.split('/')[-1]
                                        if extension == 'jpeg':
                                            extension = 'jpg'
                                        suggested_filename = f"image_{message.id}.{extension}"
                                    elif mime_type.startswith('video/'):
                                        extension = mime_type.split('/')[-1]
                                        suggested_filename = f"video_{message.id}.{extension}"
                                    elif mime_type.startswith('audio/'):
                                        extension = mime_type.split('/')[-1]
                                        suggested_filename = f"audio_{message.id}.{extension}"
                                    else:
                                        suggested_filename = f"document_{message.id}"
                                else:
                                    suggested_filename = f"document_{message.id}"
                        
                        if not suggested_filename:
                            suggested_filename = f"document_{message.id}"
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                        import tempfile
                        import os
                        
                        with tempfile.NamedTemporaryFile(delete=False, suffix=f"_{suggested_filename}") as temp_file:
                            temp_file.write(downloaded_file)
                            temp_file_path = temp_file.name
                        
                        proper_temp_path = os.path.join(os.path.dirname(temp_file_path), suggested_filename)
                        os.rename(temp_file_path, proper_temp_path)
                        
                        file_kwargs = {
                            'entity': self.target_entity,
                            'file': proper_temp_path,
                            'caption': text,
                            'force_document': True
                        }
                        temp_file_to_cleanup = proper_temp_path
                    else:
                        # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                        file_kwargs = {
                            'entity': self.target_entity,
                            'file': message.media,
                            'caption': text,
                            'force_document': True
                        }
                        temp_file_to_cleanup = None
                    
                    if message.entities:
                        file_kwargs['formatting_entities'] = message.entities
                    sent_message = await self.client.send_file(**file_kwargs)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
                    if temp_file_to_cleanup:
                        try:
                            os.remove(temp_file_to_cleanup)
                        except Exception as e:
                            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file_to_cleanup}: {e}")
                elif isinstance(message.media, MessageMediaWebPage):
                    # –î–ª—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å entities
                    sent_message = await self.client.send_message(**send_kwargs)
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
                    try:
                        if is_from_discussion_group:
                            # –î–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
                            self.logger.debug(f"–°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Ç–∏–ø–∞ {type(message.media)} –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {message.id}")
                            downloaded_file = await self.client.download_media(message.media, file=bytes)
                            
                            file_kwargs = {
                                'entity': self.target_entity,
                                'file': downloaded_file,
                                'caption': text
                            }
                        else:
                            # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
                            file_kwargs = {
                                'entity': self.target_entity,
                                'file': message.media,
                                'caption': text
                            }
                        
                        if message.entities:
                            file_kwargs['formatting_entities'] = message.entities
                        sent_message = await self.client.send_file(**file_kwargs)
                    except Exception as media_error:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ {type(message.media)}: {media_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        sent_message = await self.client.send_message(**send_kwargs)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                sent_message = await self.client.send_message(**send_kwargs)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.message_tracker and sent_message:
                self.message_tracker.mark_message_copied(message.id, sent_message.id)
            
            self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ {sent_message.id}")
            return True
            
        except MediaInvalidError as e:
            self.logger.warning(f"–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.message:
                try:
                    text_kwargs = {
                        'entity': self.target_entity,
                        'message': message.message,
                        'link_preview': False
                    }
                    if message.entities:
                        text_kwargs['formatting_entities'] = message.entities
                    await self.client.send_message(**text_kwargs)
                    self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} (–º–µ–¥–∏–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
                    return True
                except Exception as text_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {text_error}")
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return False
    
    def cleanup_temp_files(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
        temp_dir = "temp_media"
        if os.path.exists(temp_dir):
            try:
                for file_name in os.listdir(temp_dir):
                    file_path = os.path.join(temp_dir, file_name)
                    if os.path.isfile(file_path):
                        os.remove(file_path)
                os.rmdir(temp_dir)
                self.logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def copy_messages_range(self, start_id: int, end_id: int) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ ID.
        
        Args:
            start_id: –ù–∞—á–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
            end_id: –ö–æ–Ω–µ—á–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã'}
        
        self.logger.info(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start_id} –ø–æ {end_id}")
        
        copied = 0
        failed = 0
        
        try:
            async for message in self.client.iter_messages(
                self.source_entity,
                min_id=start_id - 1,
                max_id=end_id + 1,
                reverse=True
            ):
                if start_id <= message.id <= end_id:
                    success = await self.copy_single_message(message)
                    if success:
                        copied += 1
                    else:
                        failed += 1
                    
                    if not self.dry_run:
                        await self.rate_limiter.wait_if_needed()
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            return {'error': str(e)}
        
        return {
            'copied_messages': copied,
            'failed_messages': failed,
            'start_id': start_id,
            'end_id': end_id
        }
    
    async def preload_all_comments_cache(self, sample_batch: List[Message]) -> None:
        """
        –ù–û–í–´–ô –ü–û–î–•–û–î: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –í–°–ï–• discussion groups –∫–∞–Ω–∞–ª–∞
        –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–≤—ã–π –±–∞—Ç—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è discussion groups.
        
        Args:
            sample_batch: –ü–µ—Ä–≤—ã–π –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö discussion groups –∫–∞–Ω–∞–ª–∞
        """
        if self.comments_cache_loaded:
            return  # –ö—ç—à —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        
        try:
            self.logger.info(f"üîÑ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ discussion groups...")
            
            # –≠–¢–ê–ü 1: –°–∫–∞–Ω–∏—Ä—É–µ–º –í–ï–°–¨ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö discussion groups
            discussion_groups = set()
            scanned_messages = 0
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –±–æ–ª—å—à—É—é –≤—ã–±–æ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ discussion groups
            async for message in self.client.iter_messages(self.source_entity, limit=5000):
                scanned_messages += 1
                
                if (hasattr(message, 'replies') and message.replies and
                    hasattr(message.replies, 'comments') and message.replies.comments and
                    hasattr(message.replies, 'channel_id') and message.replies.channel_id):
                    discussion_groups.add(message.replies.channel_id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π
                if scanned_messages % 1000 == 0:
                    self.logger.info(f"   üìä –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scanned_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {len(discussion_groups)} discussion groups")
            
            self.logger.info(f"üìä –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scanned_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                           f"–Ω–∞–π–¥–µ–Ω–æ {len(discussion_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö discussion groups")
            
            if not discussion_groups:
                self.logger.info("üí¨ Discussion groups –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ")
                self.comments_cache_loaded = True
                return
            
            # –≠–¢–ê–ü 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –í–°–ï–• –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö discussion groups
            total_comments = 0
            total_posts_with_comments = 0
            
            for discussion_group_id in discussion_groups:
                self.logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ discussion group {discussion_group_id}")
                
                try:
                    comments_by_post = await self.get_all_comments_from_discussion_group(discussion_group_id)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π –∫—ç—à
                    for post_id, comments in comments_by_post.items():
                        if post_id not in self.comments_cache:
                            self.comments_cache[post_id] = []
                            total_posts_with_comments += 1
                        self.comments_cache[post_id].extend(comments)
                        total_comments += len(comments)
                    
                    # –ü–æ–º–µ—á–∞–µ–º –≥—Ä—É–ø–ø—É –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é
                    self.discussion_groups_cache.add(discussion_group_id)
                    
                    self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments_by_post)} —Å–≤—è–∑–µ–π –ø–æ—Å—Ç->–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {discussion_group_id}")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {discussion_group_id}: {e}")
            
            self.comments_cache_loaded = True
            self.logger.info(f"üéØ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
            self.logger.info(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            self.logger.info(f"   üìä –î–ª—è {total_posts_with_comments} –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            self.logger.info(f"   üìä –ò–∑ {len(discussion_groups)} discussion groups")
            self.logger.info(f"   üöÄ –¢–µ–ø–µ—Ä—å –≤—Å–µ –±–∞—Ç—á–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à!")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
    
    async def get_comments_from_cache(self, message: Message) -> List[Message]:
        """
        –ù–û–í–´–ô –ü–û–î–•–û–î: –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫—ç—à–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –∫—ç—à–∞
        """
        try:
            comments = self.comments_cache.get(message.id, [])
            if comments:
                self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫—ç—à–µ")
            else:
                self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫—ç—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return comments
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –∫—ç—à–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return []