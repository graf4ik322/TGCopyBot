#!/usr/bin/env python3
"""
Telegram Copier v3.0 - Main Entry Point (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramClient (–ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏)
2. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (device_model, system_version, app_version)
3. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ get_entity
4. ‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è entity resolution
"""

import asyncio
import sys
import signal
import logging
from typing import Optional

from config import Config
from telegram_copier_v3 import TelegramCopierV3
from utils import setup_logging, ProcessLock
from secure_telegram_client import TelegramClientFactory
from telegram_entity_manager import TelegramEntityManager


class TelegramCopierAppV3Fixed:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram Copier v3.0 –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.config = Config()
        self.logger = setup_logging()
        self.client_manager = None
        self.client = None
        self.entity_manager = None
        self.copier: Optional[TelegramCopierV3] = None
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
        if self.copier:
            self.copier.stop()
    
    async def run(self) -> bool:
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.config.validate():
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            with ProcessLock():
                self.logger.info("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                await self._initialize_secure_client()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è entity manager
                await self._initialize_entity_manager()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å entity manager
                await self._initialize_copier()
                
                # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                self.running = True
                await self._run_copying_process()
                
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return False
        finally:
            await self._cleanup()
        
        return True
    
    async def _initialize_secure_client(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π."""
        try:
            self.logger.info("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ü—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            proxy_config = self.config.get_proxy_config()
            if proxy_config:
                self.logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {proxy_config['addr']}:{proxy_config['port']}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ–∞–±—Ä–∏–∫—É
            self.client_manager = TelegramClientFactory.create_stable_client(
                session_name=self.config.session_name,
                api_id=self.config.api_id,
                api_hash=self.config.api_hash,
                phone=self.config.phone,
                proxy=proxy_config
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            device_info = self.client_manager.get_device_info()
            self.logger.info(f"üì± –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_info['device_profile']['device_model']}")
            self.logger.info(f"üîß –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã: {device_info['device_profile']['system_version']}")
            self.logger.info(f"üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {device_info['device_profile']['app_version']}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏)
            self.client = await self.client_manager.start_safely()
            
            self.logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def _initialize_entity_manager(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ entities —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º."""
        try:
            self.logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ entities...")
            
            # –°–æ–∑–¥–∞–µ–º entity manager —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
            self.entity_manager = TelegramEntityManager(
                client=self.client,
                max_retries=5
            )
            
            self.logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä entities –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ entity manager: {e}")
            raise
    
    async def _initialize_copier(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π entities."""
        try:
            self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Copier v3.0...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤
            await self._verify_channels()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ v3.0
            self.copier = TelegramCopierV3(
                client=self.client,
                source_channel_id=self.config.source_group_id,
                target_channel_id=self.config.target_group_id,
                database_path="telegram_copier_v3.db",
                dry_run=self.config.dry_run,
                delay_seconds=self.config.delay_seconds,
                flatten_structure=self.config.flatten_structure
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ entities
            await self._initialize_copier_safely()
            
            self.logger.info("‚úÖ Telegram Copier v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    async def _verify_channels(self):
        """–ù–û–í–û–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤."""
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª
            source_info = await self.entity_manager.get_entity_info(self.config.source_group_id)
            if not source_info.get('access', False):
                error_msg = f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: {self.config.source_group_id}"
                if 'error' in source_info:
                    error_msg += f" ({source_info['error']})"
                self.logger.error(error_msg)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await self._suggest_channel_alternatives(self.config.source_group_id, "–∏—Å—Ö–æ–¥–Ω–æ–≥–æ")
                raise Exception(f"–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª: {self.config.source_group_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            target_info = await self.entity_manager.get_entity_info(self.config.target_group_id)
            if not target_info.get('access', False):
                error_msg = f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {self.config.target_group_id}"
                if 'error' in target_info:
                    error_msg += f" ({target_info['error']})"
                self.logger.error(error_msg)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await self._suggest_channel_alternatives(self.config.target_group_id, "—Ü–µ–ª–µ–≤–æ–≥–æ")
                raise Exception(f"–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {self.config.target_group_id}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            self.logger.info(f"‚úÖ –ò—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª: {source_info.get('title', 'N/A')} (ID: {source_info.get('id')})")
            self.logger.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_info.get('title', 'N/A')} (ID: {target_info.get('id')})")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            raise
    
    async def _suggest_channel_alternatives(self, channel_id: str, channel_type: str):
        """–ù–û–í–û–ï: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞."""
        try:
            self.logger.info(f"üîç –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {channel_type} –∫–∞–Ω–∞–ª–∞...")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∫–∞–Ω–∞–ª—ã –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
            dialogs = await self.client.get_dialogs(limit=100)
            suggestions = []
            
            for dialog in dialogs:
                entity = dialog.entity
                if hasattr(entity, 'title') and entity.title:
                    suggestions.append({
                        'id': entity.id,
                        'title': entity.title,
                        'username': getattr(entity, 'username', None),
                        'type': entity.__class__.__name__
                    })
            
            if suggestions:
                self.logger.info(f"üí° –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:")
                for i, suggestion in enumerate(suggestions[:10], 1):
                    username_info = f" (@{suggestion['username']})" if suggestion['username'] else ""
                    self.logger.info(f"   {i}. {suggestion['title']}{username_info} (ID: {suggestion['id']})")
                    
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: {e}")
    
    async def _initialize_copier_safely(self):
        """–ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º."""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                self.logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ {attempt + 1}/{max_attempts}")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞
                await self.copier.initialize()
                
                self.logger.info("‚úÖ –ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                return
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                
                if attempt < max_attempts - 1:
                    # –û—á–∏—â–∞–µ–º –∫—ç—à entity manager –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if self.entity_manager:
                        self.entity_manager.clear_cache()
                    
                    wait_time = 2 ** attempt
                    self.logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(wait_time)
                else:
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    raise
    
    async def _run_copying_process(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Copier v3.0 (–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø)")
            self.logger.info("üìã –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
            self.logger.info("   ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏)")
            self.logger.info("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            self.logger.info("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ entities —Å retry")
            self.logger.info("   ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
            self.logger.info("   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤")
            self.logger.info("   ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            self.logger.info("   ‚úÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            self.logger.info("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞")
            
            if self.config.dry_run:
                self.logger.info("üîß –†–ï–ñ–ò–ú DRY RUN - —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            # –≠—Ç–∞–ø 1: –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
            self.logger.info("üîç –≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î...")
            scan_success = await self.copier.scan_and_save_all_messages()
            
            if not scan_success:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞")
                return
            
            if not self.running:
                return
            
            # –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            self.logger.info("üìã –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ...")
            copy_success = await self.copier.copy_all_messages_chronologically()
            
            if copy_success:
                self.logger.info("üéâ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É entity manager
                if self.entity_manager:
                    stats = self.entity_manager.get_stats()
                    self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Entity Manager: {stats}")
            else:
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            if self.copier:
                self.copier.close()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ client_manager
            if self.client_manager:
                await self.client_manager.disconnect()
            elif self.client:
                await self.client.disconnect()
            
            self.logger.info("üîí –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ Telegram Copier v3.0 (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 70)
    print("üîê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Å—Å–∏–∏")
    print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (device_model, system_version)")
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ entities —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º")
    print("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤")
    print()
    print("üìã –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –ê–ª—å–±–æ–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º")
    print("‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
    print("‚úÖ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    print("‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ—à–∏–±–∫–∏ MediaProxy")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –≤ –ø–æ—Å—Ç–∞—Ö –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
    print("=" * 70)
    print()
    
    app = TelegramCopierAppV3Fixed()
    success = await app.run()
    return 0 if success else 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    exit_code = asyncio.run(main())
    sys.exit(exit_code)