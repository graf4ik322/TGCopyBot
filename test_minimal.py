#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import os
import sys
import tempfile


def test_progress_saving_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ utils)."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    
    def save_progress(message_id: int, filename: str) -> None:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è save_last_message_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_filename = f"{filename}.tmp"
            with open(temp_filename, 'w', encoding='utf-8') as f:
                f.write(str(message_id))
                f.flush()
                os.fsync(f.fileno())
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            if os.path.exists(filename):
                os.replace(temp_filename, filename)
            else:
                os.rename(temp_filename, filename)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            if os.path.exists(f"{filename}.tmp"):
                os.remove(f"{filename}.tmp")
    
    def load_progress(filename: str) -> int:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è load_last_message_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return int(f.read().strip())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None
    
    with tempfile.TemporaryDirectory() as temp_dir:
        progress_file = os.path.join(temp_dir, 'progress.txt')
        
        # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_progress(12345, progress_file)
        assert os.path.exists(progress_file), "–§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω"
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
        loaded_id = load_progress(progress_file)
        assert loaded_id == 12345, f"–û–∂–∏–¥–∞–ª—Å—è ID 12345, –ø–æ–ª—É—á–µ–Ω {loaded_id}"
        
        # –¢–µ—Å—Ç —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω
        temp_file = f"{progress_file}.tmp"
        assert not os.path.exists(temp_file), "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–µ–Ω"
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
        save_progress(67890, progress_file)
        loaded_id = load_progress(progress_file)
        assert loaded_id == 67890, f"–û–∂–∏–¥–∞–ª—Å—è ID 67890, –ø–æ–ª—É—á–µ–Ω {loaded_id}"
        
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")


def test_file_lock_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤...")
    
    import fcntl
    
    with tempfile.TemporaryDirectory() as temp_dir:
        lock_file = os.path.join(temp_dir, 'test.lock')
        
        # –ü–µ—Ä–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
        fd1 = open(lock_file, 'w')
        try:
            fcntl.flock(fd1.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            fd1.write(str(os.getpid()))
            fd1.flush()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è
            fd2 = open(lock_file, 'w')
            try:
                fcntl.flock(fd2.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                fd2.close()
                assert False, "–í—Ç–æ—Ä–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞"
            except (IOError, OSError):
                # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
                fd2.close()
                pass
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–µ—Ä–≤—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            fcntl.flock(fd1.fileno(), fcntl.LOCK_UN)
            fd1.close()
            
            # –¢–µ–ø–µ—Ä—å –Ω–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å
            fd3 = open(lock_file, 'w')
            try:
                fcntl.flock(fd3.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                fcntl.flock(fd3.fileno(), fcntl.LOCK_UN)
                fd3.close()
            except (IOError, OSError):
                fd3.close()
                assert False, "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å"
            
        except (IOError, OSError):
            fd1.close()
            assert False, "–ü–µ—Ä–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞"
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")


def test_config_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å Config –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    class MockConfig:
        def __init__(self):
            self.api_id = int(os.getenv('API_ID', '0'))
            self.api_hash = os.getenv('API_HASH', '')
            self.phone = os.getenv('PHONE', '')
            self.source_group_id = os.getenv('SOURCE_GROUP_ID', '')
            self.target_group_id = os.getenv('TARGET_GROUP_ID', '')
        
        def validate(self) -> bool:
            required_fields = [
                ('API_ID', self.api_id),
                ('API_HASH', self.api_hash),
                ('PHONE', self.phone),
                ('SOURCE_GROUP_ID', self.source_group_id),
                ('TARGET_GROUP_ID', self.target_group_id)
            ]
            
            for field_name, field_value in required_fields:
                if not field_value:
                    return False
            
            if self.api_id == 0:
                return False
            
            return True
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
    for key in ['API_ID', 'API_HASH', 'PHONE', 'SOURCE_GROUP_ID', 'TARGET_GROUP_ID']:
        if key in os.environ:
            del os.environ[key]
    
    config = MockConfig()
    assert not config.validate(), "–ü—É—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π"
    
    # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    os.environ['API_ID'] = '12345678'
    os.environ['API_HASH'] = 'test_hash'
    os.environ['PHONE'] = '+1234567890'
    os.environ['SOURCE_GROUP_ID'] = '@source'
    os.environ['TARGET_GROUP_ID'] = '@target'
    
    config = MockConfig()
    assert config.validate(), "–í–∞–ª–∏–¥–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"
    
    # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for key in ['API_ID', 'API_HASH', 'PHONE', 'SOURCE_GROUP_ID', 'TARGET_GROUP_ID']:
        if key in os.environ:
            del os.environ[key]
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")


def test_utility_functions():
    """–¢–µ—Å—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")
    
    def format_file_size(size_bytes: int) -> str:
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        size = float(size_bytes)
        
        while size >= 1024.0 and i < len(size_names) - 1:
            size /= 1024.0
            i += 1
        
        return f"{size:.1f} {size_names[i]}"
    
    def sanitize_filename(filename: str) -> str:
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            filename = filename.replace(char, '_')
        
        if len(filename) > 255:
            name, ext = os.path.splitext(filename)
            filename = name[:255-len(ext)] + ext
        
        return filename
    
    # –¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    assert format_file_size(0) == "0 B"
    assert format_file_size(1024) == "1.0 KB"
    assert format_file_size(1024 * 1024) == "1.0 MB"
    assert format_file_size(1024 * 1024 * 1024) == "1.0 GB"
    
    # –¢–µ—Å—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    assert sanitize_filename("normal.txt") == "normal.txt"
    assert sanitize_filename("file<>test.txt") == "file__test.txt"
    assert sanitize_filename('file"test|file.txt') == "file_test_file.txt"
    
    # –¢–µ—Å—Ç –¥–ª–∏–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    long_name = "a" * 300 + ".txt"
    sanitized = sanitize_filename(long_name)
    assert len(sanitized) <= 255, f"–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {len(sanitized)}"
    
    print("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("=== –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ ===")
    
    try:
        test_progress_saving_logic()
        test_file_lock_logic()
        test_config_logic()
        test_utility_functions()
        
        print("\nüéâ –í—Å–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("\n‚úÖ –ü–†–û–í–ï–†–ï–ù–û:")
        print("  - –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
        print("  - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("  - –õ–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        print("  - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print("  - –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)