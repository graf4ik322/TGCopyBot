"""
–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram –≥—Ä—É–ø–ø—ã.
–†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£: –ü–∞–º—è—Ç—å + –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è –ø–æ—Å–ª–µ 500-600 –ø–æ—Å—Ç–æ–≤.

–ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–∞–º—è—Ç—å  
2. –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
3. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –±–µ–∑ –º–∞—Å—Å–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
4. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""

import asyncio
import logging
import os
from typing import List, Optional, Union, Dict, Any, AsyncGenerator
from telethon import TelegramClient
from telethon.tl.types import (
    Message, MessageMediaPhoto, MessageMediaDocument, 
    MessageMediaWebPage, InputMediaPhoto, InputMediaDocument,
    MessageEntityTextUrl, MessageEntityUrl, MessageEntityMention,
    MessageEntityHashtag, MessageEntityBold, MessageEntityItalic,
    MessageEntityCode, MessageEntityPre, MessageEntityStrike,
    MessageEntityUnderline, MessageEntitySpoiler, MessageEntityBlockquote,
    ChannelParticipantAdmin, ChannelParticipantCreator, PeerChannel,
    DocumentAttributeFilename
)
from telethon.errors import FloodWaitError, PeerFloodError, MediaInvalidError
from telethon.tl import functions
from telethon.tl.functions.messages import GetHistoryRequest
from utils import (RateLimiter, handle_flood_wait, save_last_message_id, ProgressTracker, 
                   sanitize_filename, format_file_size, MessageDeduplicator, PerformanceMonitor)
from album_handler import AlbumHandler
from message_tracker import MessageTracker


class TelegramCopierFixed:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É Telegram –≥—Ä—É–ø–ø–∞–º–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é.
    """
    
    def __init__(self, client: TelegramClient, source_group_id: str, target_group_id: str,
                 rate_limiter: RateLimiter, dry_run: bool = False, resume_file: str = 'last_message_id.txt',
                 use_message_tracker: bool = True, tracker_file: str = 'copied_messages.json', 
                 add_debug_tags: bool = False, flatten_structure: bool = False, 
                 debug_message_ids: bool = False, batch_size: int = 100):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        
        Args:
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
        """
        self.client = client
        self.source_group_id = source_group_id
        self.target_group_id = target_group_id
        self.rate_limiter = rate_limiter
        self.dry_run = dry_run
        self.resume_file = resume_file
        self.logger = logging.getLogger('telegram_copier.copier_fixed')
        
        # –ù–û–í–û–ï: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.batch_size = batch_size
        self.logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–∞—Ç—á–µ–≤—ã–π –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞: {batch_size}")
        
        # –ö—ç—à –¥–ª—è entities
        self.source_entity = None
        self.target_entity = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.copied_messages = 0
        self.failed_messages = 0
        self.skipped_messages = 0
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.deduplicator = MessageDeduplicator()
        self.performance_monitor = PerformanceMonitor()
        self.album_handler = AlbumHandler(client)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞
        self.use_message_tracker = use_message_tracker
        self.add_debug_tags = add_debug_tags
        self.debug_message_ids = debug_message_ids
        self.flatten_structure = flatten_structure
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.use_message_tracker:
            self.message_tracker = MessageTracker(tracker_file)
            self.logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π: {tracker_file}")
        else:
            self.message_tracker = None
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.deduplicator.cleanup_old_hashes()
    
    async def copy_all_messages_batch(self, resume_from_id: Optional[int] = None) -> Dict[str, Any]:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.
        –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –ü–ê–ú–Ø–¢–ò –ò –•–†–û–ù–û–õ–û–ì–ò–ò.
        
        Args:
            resume_from_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        if not await self.initialize():
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã'}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–∞—Ö
        if self.message_tracker:
            self.message_tracker.set_channels(
                str(self.source_group_id), 
                str(self.target_group_id)
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = await self.get_total_messages_count()
        if total_messages == 0:
            self.logger.warning("–í –∏—Å—Ö–æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return {'total_messages': 0, 'copied_messages': 0}
        
        self.logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ë–ê–¢–ß–ï–í–û–ï –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
        self.logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        min_id = resume_from_id if resume_from_id else 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_tracker = ProgressTracker(total_messages)
        
        try:
            # –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            batch_number = 1
            total_processed = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É
            async for batch in self._get_message_batches(min_id):
                if not batch:  # –ü—É—Å—Ç–æ–π –±–∞—Ç—á - –∫–æ–Ω–µ—Ü
                    break
                
                self.logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á #{batch_number}: {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                batch_stats = await self._process_message_batch(batch, progress_tracker)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.copied_messages += batch_stats['copied']
                self.failed_messages += batch_stats['failed'] 
                self.skipped_messages += batch_stats['skipped']
                total_processed += len(batch)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–∞
                self.logger.info(f"‚úÖ –ë–∞—Ç—á #{batch_number} –∑–∞–≤–µ—Ä—à–µ–Ω: "
                               f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {batch_stats['copied']}, "
                               f"–æ—à–∏–±–æ–∫ {batch_stats['failed']}, "
                               f"–ø—Ä–æ–ø—É—â–µ–Ω–æ {batch_stats['skipped']}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if batch:
                    last_message_id = max(msg.id for msg in batch)
                    save_last_message_id(last_message_id, self.resume_file)
                    self.logger.debug(f"üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ø–æ—Å–ª–µ–¥–Ω–∏–π ID {last_message_id}")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                await self._cleanup_batch_memory()
                
                batch_number += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –∫–æ–Ω—Ü–∞
                if len(batch) < self.batch_size:
                    self.logger.info("üìÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞–Ω–∞–ª–∞ (–±–∞—Ç—á –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–∞)")
                    break
        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞—Ç—á–µ–≤–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return {'error': str(e)}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        final_stats = progress_tracker.get_final_stats()
        final_stats.update({
            'copied_messages': self.copied_messages,
            'failed_messages': self.failed_messages,
            'skipped_messages': self.skipped_messages,
            'batches_processed': batch_number - 1,
            'batch_size': self.batch_size
        })
        
        self.logger.info(f"üéâ –ë–∞—Ç—á–µ–≤–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! "
                        f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {batch_number-1} –±–∞—Ç—á–µ–π. "
                        f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {self.copied_messages}, "
                        f"–û—à–∏–±–æ–∫: {self.failed_messages}, "
                        f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.skipped_messages}")
        
        return final_stats
    
    async def _get_message_batches(self, min_id: int = 0) -> AsyncGenerator[List[Message], None]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–∞—Ç—á–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å!
        
        Args:
            min_id: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Yields:
            –ë–∞—Ç—á–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–º self.batch_size
        """
        offset_id = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö –¥–ª—è reverse=True
        
        while True:
            try:
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ç—á–∞
                iter_params = {
                    'entity': self.source_entity,
                    'limit': self.batch_size,
                    'reverse': True,  # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º offset_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
                if offset_id > 0:
                    iter_params['offset_id'] = offset_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º min_id –µ—Å–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
                if min_id > 0:
                    iter_params['min_id'] = min_id
                
                # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π
                batch = []
                async for message in self.client.iter_messages(**iter_params):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
                    if self.deduplicator.is_message_processed(message):
                        self.logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    batch.append(message)
                
                # –ï—Å–ª–∏ –±–∞—Ç—á –ø—É—Å—Ç–æ–π - –∫–æ–Ω–µ—Ü
                if not batch:
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º offset_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞—Ç—á–∞
                # –í reverse=True —Ä–µ–∂–∏–º–µ –±–µ—Ä–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ (—Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ) —Å–æ–æ–±—â–µ–Ω–∏—è
                offset_id = batch[-1].id
                
                self.logger.debug(f"üì¶ –ü–æ–ª—É—á–µ–Ω –±–∞—Ç—á –∏–∑ {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π "
                                f"(ID –æ—Ç {batch[0].id} –¥–æ {batch[-1].id})")
                
                yield batch
                
                # –ï—Å–ª–∏ –±–∞—Ç—á –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á
                if len(batch) < self.batch_size:
                    break
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                break
    
    async def _process_message_batch(self, batch: List[Message], progress_tracker: ProgressTracker) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        
        Args:
            batch: –ë–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            progress_tracker: –¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞
        """
        batch_stats = {'copied': 0, 'failed': 0, 'skipped': 0}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã –≤ –±–∞—Ç—á–µ
        albums = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        single_messages = []
        
        for message in batch:
            if hasattr(message, 'grouped_id') and message.grouped_id:
                if message.grouped_id not in albums:
                    albums[message.grouped_id] = []
                albums[message.grouped_id].append(message)
            else:
                single_messages.append(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö ID (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è)
        all_items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in single_messages:
            all_items.append(('single', msg))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º—ã (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        for grouped_id, album_messages in albums.items():
            album_messages.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∞–ª—å–±–æ–º–∞
            all_items.append(('album', album_messages))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        all_items.sort(key=lambda item: item[1].id if item[0] == 'single' else item[1][0].id)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for item_type, item_data in all_items:
            try:
                if item_type == 'single':
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = item_data
                    success = await self.copy_single_message(message)
                    
                    if success:
                        batch_stats['copied'] += 1
                        save_last_message_id(message.id, self.resume_file)
                    else:
                        batch_stats['failed'] += 1
                    
                    progress_tracker.update(success)
                
                elif item_type == 'album':
                    # –ê–ª—å–±–æ–º
                    album_messages = item_data
                    success = await self.copy_album(album_messages)
                    
                    if success:
                        batch_stats['copied'] += len(album_messages)
                        last_album_id = max(msg.id for msg in album_messages)
                        save_last_message_id(last_album_id, self.resume_file)
                    else:
                        batch_stats['failed'] += len(album_messages)
                    
                    for msg in album_messages:
                        progress_tracker.update(success)
                
                # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
                if not self.dry_run and success:
                    await self.rate_limiter.wait_if_needed()
                    self.rate_limiter.record_message_sent()
                
            except FloodWaitError as e:
                await handle_flood_wait(e, self.logger)
                # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É... (–∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {item_type}: {e}")
                if item_type == 'single':
                    batch_stats['failed'] += 1
                else:
                    batch_stats['failed'] += len(item_data)
        
        return batch_stats
    
    async def _cleanup_batch_memory(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞."""
        import gc
        gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏)
        self.deduplicator.cleanup_old_hashes(keep_recent=1000)
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º copier.py
    # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è entities –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞."""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ copier.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        try:
            # ... –∫–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ ...
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def get_total_messages_count(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ copier.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return 0  # placeholder
    
    async def copy_single_message(self, message: Message) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ copier.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return True  # placeholder
    
    async def copy_album(self, album_messages: List[Message]) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ copier.py –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        return True  # placeholder