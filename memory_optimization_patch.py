"""
–ü–∞—Ç—á –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ TelegramCopier.
–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–¥—É.
"""

from optimized_cache import OptimizedCommentsStorage
import logging


def apply_memory_optimization(copier_instance, memory_limit_mb=100):
    """
    –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É TelegramCopier.
    
    Args:
        copier_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramCopier
        memory_limit_mb: –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100 MB)
    """
    logger = logging.getLogger('telegram_copier.memory_optimization')
    logger.info(f"üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏ (–ª–∏–º–∏—Ç: {memory_limit_mb} MB)")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    copier_instance.optimized_storage = OptimizedCommentsStorage(
        memory_limit_mb=memory_limit_mb,
        lru_cache_size=min(1000, memory_limit_mb * 10)  # 10 –ø–æ—Å—Ç–æ–≤ –Ω–∞ MB
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    copier_instance._original_get_comments_from_cache = copier_instance.get_comments_from_cache
    copier_instance._original_preload_all_comments_cache = copier_instance.preload_all_comments_cache
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    async def optimized_get_comments_from_cache(message):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º MessageProxy –æ–±—ä–µ–∫—Ç—ã –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        # –û–Ω–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ Message –æ–±—ä–µ–∫—Ç–∞–º–∏ –ø–æ API
        message_proxies = await copier_instance.optimized_storage.get_comments_for_post(message.id)
        
        # MessageProxy –æ–±—ä–µ–∫—Ç—ã —É–∂–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        return message_proxies
    
    async def optimized_preload_all_comments_cache(sample_batch):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        if copier_instance.comments_cache_loaded:
            return
        
        logger.info("üîÑ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê: –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ discussion groups...")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ discussion groups (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
        discussion_groups = set()
        scanned_messages = 0
        
        # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        scan_limit = min(2000, memory_limit_mb * 20)  # 20 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ MB –ø–∞–º—è—Ç–∏
        
        async for message in copier_instance.client.iter_messages(
            copier_instance.source_entity, 
            limit=scan_limit
        ):
            scanned_messages += 1
            
            if (hasattr(message, 'replies') and message.replies and
                hasattr(message.replies, 'comments') and message.replies.comments and
                hasattr(message.replies, 'channel_id') and message.replies.channel_id):
                discussion_groups.add(message.replies.channel_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 500 —Å–æ–æ–±—â–µ–Ω–∏–π
            if scanned_messages % 500 == 0:
                logger.info(f"   üìä –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scanned_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                           f"–Ω–∞–π–¥–µ–Ω–æ {len(discussion_groups)} discussion groups")
        
        logger.info(f"üìä –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {scanned_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                   f"–Ω–∞–π–¥–µ–Ω–æ {len(discussion_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö discussion groups")
        
        if not discussion_groups:
            logger.info("üí¨ Discussion groups –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ")
            copier_instance.comments_cache_loaded = True
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        total_comments = 0
        total_posts_with_comments = 0
        
        for discussion_group_id in discussion_groups:
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ discussion group {discussion_group_id}")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                comments_by_post = await copier_instance.get_all_comments_from_discussion_group(discussion_group_id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await copier_instance.optimized_storage.store_comments_batch(comments_by_post)
                
                total_comments += sum(len(comments) for comments in comments_by_post.values())
                total_posts_with_comments += len(comments_by_post)
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(comments_by_post)} —Å–≤—è–∑–µ–π –ø–æ—Å—Ç->–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {discussion_group_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                await copier_instance.optimized_storage._check_memory_usage()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã {discussion_group_id}: {e}")
        
        copier_instance.comments_cache_loaded = True
        logger.info(f"üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê:")
        logger.info(f"   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        logger.info(f"   üìä –î–ª—è {total_posts_with_comments} –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
        logger.info(f"   üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏: ~{total_comments * 0.001:.1f} MB)")
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥—ã
    copier_instance.get_comments_from_cache = optimized_get_comments_from_cache
    copier_instance.preload_all_comments_cache = optimized_preload_all_comments_cache
    
    # –û–±–Ω—É–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    if hasattr(copier_instance, 'comments_cache'):
        old_cache_size = len(copier_instance.comments_cache)
        copier_instance.comments_cache.clear()
        logger.info(f"üßπ –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π –∫—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ({old_cache_size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def get_memory_optimization_stats():
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏."""
        performance_stats = copier_instance.optimized_storage.get_performance_stats()
        memory_stats = copier_instance.optimized_storage.get_memory_stats()
        
        return {
            'cache_hit_ratio': performance_stats['cache_hit_ratio'],
            'total_memory_mb': memory_stats.total_memory_mb,
            'database_size_mb': memory_stats.database_size_mb,
            'cache_size': memory_stats.cache_size,
            'memory_cleanups': performance_stats['memory_cleanups'],
            'efficiency_ratio': memory_stats.efficiency_ratio
        }
    
    copier_instance.get_memory_optimization_stats = get_memory_optimization_stats
    
    # –î–æ–±–∞–≤–ª—è–µ–º cleanup –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    original_cleanup = getattr(copier_instance, 'cleanup_temp_files', lambda: None)
    
    def enhanced_cleanup():
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏."""
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        original_cleanup()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if hasattr(copier_instance, 'optimized_storage'):
            copier_instance.optimized_storage.cleanup_old_data(days_old=7)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = get_memory_optimization_stats()
            logger.info(f"üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–ê–ú–Ø–¢–ò:")
            logger.info(f"   üí® Cache hit ratio: {stats['cache_hit_ratio']:.1%}")
            logger.info(f"   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['total_memory_mb']:.1f} MB")
            logger.info(f"   üóÑÔ∏è –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {stats['database_size_mb']:.1f} MB")
            logger.info(f"   üßπ –û—á–∏—Å—Ç–æ–∫ –ø–∞–º—è—Ç–∏: {stats['memory_cleanups']}")
            
            copier_instance.optimized_storage.close()
    
    copier_instance.cleanup_temp_files = enhanced_cleanup
    
    logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–¥—É
def quick_optimize_memory(copier, memory_limit_mb=50):
    """
    –ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö –º–∞—à–∏–Ω.
    
    Args:
        copier: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramCopier
        memory_limit_mb: –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 MB –¥–ª—è —Å–ª–∞–±—ã—Ö –º–∞—à–∏–Ω)
    """
    apply_memory_optimization(copier, memory_limit_mb)