#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º discussion groups.
"""

import asyncio
import logging
from telethon import TelegramClient
from telethon.tl.types import PeerChannel
from telethon.tl.functions.channels import GetFullChannelRequest

from config import Config


class PrivateChannelDiagnostic:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        self.config = Config()
        self.logger = logging.getLogger('diagnostic')
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
    
    async def run_diagnosis(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            self.client = TelegramClient(
                self.config.session_name,
                self.config.api_id,
                self.config.api_hash
            )
            
            await self.client.start()
            
            if not await self.client.is_user_authorized():
                self.logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            
            self.logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            await self._analyze_source_channel()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
            if self.config.discussion_group_id:
                await self._analyze_discussion_group()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–æ–º –∏ –≥—Ä—É–ø–ø–æ–π
            await self._check_channel_group_links()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        
        finally:
            if self.client:
                await self.client.disconnect()
    
    async def _analyze_source_channel(self):
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        try:
            self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª: {self.config.source_group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            source_entity = await self.client.get_entity(self.config.source_group_id)
            self.logger.info(f"   üìã –¢–∏–ø: {type(source_entity).__name__}")
            self.logger.info(f"   üìã ID: {source_entity.id}")
            self.logger.info(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(source_entity, 'title', 'N/A')}")
            self.logger.info(f"   üìã Username: {getattr(source_entity, 'username', 'N/A')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                full_channel = await self.client(GetFullChannelRequest(source_entity))
                full_chat = full_channel.full_chat
                
                self.logger.info(f"   üìã –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {getattr(full_chat, 'participants_count', 'N/A')}")
                self.logger.info(f"   üìã Linked chat ID: {getattr(full_chat, 'linked_chat_id', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
                if hasattr(full_chat, 'linked_chat_id') and full_chat.linked_chat_id:
                    linked_chat_id = full_chat.linked_chat_id
                    self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {linked_chat_id}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
                    try:
                        linked_entity = await self.client.get_entity(PeerChannel(linked_chat_id))
                        self.logger.info(f"   üìã –°–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: {getattr(linked_entity, 'title', 'N/A')}")
                        self.logger.info(f"   üìã Username —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã: {getattr(linked_entity, 'username', 'N/A')}")
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ: {e}")
                else:
                    self.logger.warning("‚ö†Ô∏è –°–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞")
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ: {e}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
            await self._analyze_channel_messages(source_entity)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞: {e}")
    
    async def _analyze_channel_messages(self, source_entity):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞...")
            
            discussion_groups_found = set()
            messages_with_comments = 0
            total_analyzed = 0
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.client.iter_messages(source_entity, limit=100):
                total_analyzed += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ replies
                if hasattr(message, 'replies') and message.replies:
                    messages_with_comments += 1
                    
                    self.logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}:")
                    self.logger.info(f"      - –ï—Å—Ç—å replies: {bool(message.replies)}")
                    
                    if hasattr(message.replies, 'comments'):
                        self.logger.info(f"      - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã: {message.replies.comments}")
                        
                    if hasattr(message.replies, 'replies'):
                        self.logger.info(f"      - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {message.replies.replies}")
                        
                    if hasattr(message.replies, 'channel_id'):
                        channel_id = message.replies.channel_id
                        self.logger.info(f"      - Channel ID –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {channel_id}")
                        discussion_groups_found.add(channel_id)
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                        try:
                            discussion_entity = await self.client.get_entity(PeerChannel(channel_id))
                            self.logger.info(f"      - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {getattr(discussion_entity, 'title', 'N/A')}")
                        except Exception as e:
                            self.logger.warning(f"      - –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ {channel_id}: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if total_analyzed % 10 == 0:
                    self.logger.info(f"   üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_analyzed} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {messages_with_comments} —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏")
            
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            self.logger.info(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_analyzed} —Å–æ–æ–±—â–µ–Ω–∏–π")
            self.logger.info(f"   - –°–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {messages_with_comments}")
            self.logger.info(f"   - –ù–∞–π–¥–µ–Ω–æ discussion groups: {len(discussion_groups_found)}")
            
            for group_id in discussion_groups_found:
                self.logger.info(f"   - Discussion group ID: {group_id}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async def _analyze_discussion_group(self):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        try:
            self.logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {self.config.discussion_group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
            discussion_entity = await self.client.get_entity(self.config.discussion_group_id)
            self.logger.info(f"   üìã –¢–∏–ø: {type(discussion_entity).__name__}")
            self.logger.info(f"   üìã ID: {discussion_entity.id}")
            self.logger.info(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(discussion_entity, 'title', 'N/A')}")
            self.logger.info(f"   üìã Username: {getattr(discussion_entity, 'username', 'N/A')}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
            await self._analyze_discussion_messages(discussion_entity)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
    
    async def _analyze_discussion_messages(self, discussion_entity):
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        try:
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            
            forwarded_messages = 0
            comments = 0
            total_analyzed = 0
            reply_patterns = {}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
            async for message in self.client.iter_messages(discussion_entity, limit=50):
                total_analyzed += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(message, 'fwd_from') and message.fwd_from:
                    forwarded_messages += 1
                    self.logger.info(f"   üì§ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ:")
                    
                    if hasattr(message.fwd_from, 'channel_post'):
                        channel_post_id = message.fwd_from.channel_post
                        self.logger.info(f"      - –ò—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ: {channel_post_id}")
                    
                    if hasattr(message.fwd_from, 'from_id'):
                        from_id = message.fwd_from.from_id
                        self.logger.info(f"      - –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–∞–Ω–∞–ª–∞: {from_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
                if hasattr(message, 'reply_to') and message.reply_to:
                    comments += 1
                    reply_to_id = message.reply_to.reply_to_msg_id
                    
                    if reply_to_id not in reply_patterns:
                        reply_patterns[reply_to_id] = 0
                    reply_patterns[reply_to_id] += 1
                    
                    self.logger.info(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} - –æ—Ç–≤–µ—Ç –Ω–∞ {reply_to_id}")
            
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            self.logger.info(f"   - –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {total_analyzed} —Å–æ–æ–±—â–µ–Ω–∏–π")
            self.logger.info(f"   - –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {forwarded_messages}")
            self.logger.info(f"   - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–æ—Ç–≤–µ—Ç–æ–≤): {comments}")
            self.logger.info(f"   - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {len(reply_patterns)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            if reply_patterns:
                sorted_patterns = sorted(reply_patterns.items(), key=lambda x: x[1], reverse=True)
                self.logger.info("   üìà –¢–æ–ø –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º:")
                for post_id, comment_count in sorted_patterns[:5]:
                    self.logger.info(f"      - –ü–æ—Å—Ç {post_id}: {comment_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã: {e}")
    
    async def _check_channel_group_links(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–æ–º –∏ –≥—Ä—É–ø–ø–æ–π."""
        try:
            self.logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–æ–º –∏ –≥—Ä—É–ø–ø–æ–π...")
            
            if not self.config.discussion_group_id:
                self.logger.warning("‚ö†Ô∏è ID –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return
            
            source_entity = await self.client.get_entity(self.config.source_group_id)
            discussion_entity = await self.client.get_entity(self.config.discussion_group_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ–±–µ–∏–º —Å—É—â–Ω–æ—Å—Ç—è–º
            self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {getattr(source_entity, 'title', 'N/A')}")
            self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ: {getattr(discussion_entity, 'title', 'N/A')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                async for message in self.client.iter_messages(source_entity, limit=1):
                    self.logger.info(f"‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞: OK")
                    break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            
            try:
                async for message in self.client.iter_messages(discussion_entity, limit=1):
                    self.logger.info(f"‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã: OK")
                    break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    diagnostic = PrivateChannelDiagnostic()
    await diagnostic.run_diagnosis()


if __name__ == "__main__":
    asyncio.run(main())