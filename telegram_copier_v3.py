"""
Telegram Copier v3.0 - Completely rewritten implementation
Following Telethon best practices and addressing all critical issues:

1. ‚úÖ Proper album handling using grouped_id
2. ‚úÖ Correct comment copying from discussion groups  
3. ‚úÖ Persistent SQLite database for state management
4. ‚úÖ Chronological order processing
5. ‚úÖ Proper media handling without MediaProxy issues
6. ‚úÖ Support for all media types in posts and comments

Based on Telethon documentation: https://tl.telethon.dev/
"""

import asyncio
import sqlite3
import logging
import json
import os
import tempfile
from typing import List, Dict, Optional, Any, Tuple, Union
from datetime import datetime, timezone
from dataclasses import dataclass

from telethon import TelegramClient, events
from telethon.tl.types import (
    Message, MessageMediaPhoto, MessageMediaDocument, 
    PeerChannel, DocumentAttributeFilename, MessageEntityTextUrl,
    MessageEntityUrl, MessageEntityMention, MessageEntityHashtag,
    MessageEntityBold, MessageEntityItalic, MessageEntityCode,
    MessageEntityPre, MessageEntityStrike, MessageEntityUnderline,
    MessageEntitySpoiler, MessageEntityBlockquote
)
from telethon.tl import functions
from telethon.tl.functions.contacts import ResolveUsernameRequest
from telethon.tl.functions.channels import GetChannelsRequest
from telethon.errors import FloodWaitError, PeerFloodError, MediaInvalidError, ChannelPrivateError, ChatInvalidError


@dataclass
class ProcessingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    total_posts: int = 0
    copied_posts: int = 0
    failed_posts: int = 0
    total_comments: int = 0
    copied_comments: int = 0
    failed_comments: int = 0
    total_albums: int = 0
    copied_albums: int = 0
    failed_albums: int = 0


class TelegramCopierV3:
    """
    Telegram Copier v3.0 - –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è.
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
    - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SQLite –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ —á–µ—Ä–µ–∑ grouped_id
    - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ discussion groups
    - –•—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞
    """
    
    def __init__(self, 
                 client: TelegramClient,
                 source_channel_id: Union[int, str],
                 target_channel_id: Union[int, str],
                 database_path: str = "telegram_copier_v3.db",
                 dry_run: bool = False,
                 delay_seconds: int = 3,
                 flatten_structure: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞.
        
        Args:
            client: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π Telegram –∫–ª–∏–µ–Ω—Ç
            source_channel_id: ID –∏–ª–∏ username –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            target_channel_id: ID –∏–ª–∏ username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞  
            database_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            dry_run: –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            delay_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            flatten_structure: –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã
        """
        self.client = client
        self.source_channel_id = source_channel_id
        self.target_channel_id = target_channel_id
        self.database_path = database_path
        self.dry_run = dry_run
        self.delay_seconds = delay_seconds
        self.flatten_structure = flatten_structure
        
        self.logger = logging.getLogger('telegram_copier_v3')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        if self.flatten_structure:
            self.logger.info("üîÑ –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –ø—Ä–µ–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã")
        
        # –ö—ç—à –¥–ª—è entities
        self.source_entity = None
        self.target_entity = None
        self.discussion_entity = None
        self.target_discussion_entity = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = ProcessingStats()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.db_connection = None
        
        # –§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_requested = False
    
    async def initialize(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π entities."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self._init_database()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ entities –∫–∞–Ω–∞–ª–æ–≤ —Å retry
            self.source_entity = await self._get_entity_safe(self.source_channel_id, "–∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            self.target_entity = await self._get_entity_safe(self.target_channel_id, "—Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
            
            self.logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫: {getattr(self.source_entity, 'title', 'N/A')}")
            self.logger.info(f"‚úÖ –¶–µ–ª—å: {getattr(self.target_entity, 'title', 'N/A')}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ discussion groups
            await self._find_discussion_groups()
            
            self.logger.info("‚úÖ –ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ v3.0 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def _get_entity_safe(self, entity_id: Union[str, int], entity_name: str, max_retries: int = 5):
        """
        –£–õ–£–ß–®–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ entity —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º.
        
        Args:
            entity_id: ID –∏–ª–∏ username entity
            entity_name: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            
        Returns:
            Entity –æ–±—ä–µ–∫—Ç
            
        Raises:
            Exception: –ï—Å–ª–∏ entity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
        """
        from telethon.errors import FloodWaitError, PeerFloodError, ChannelPrivateError, ChatInvalidError
        import asyncio
        
        # –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram API
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–æ–∏—Å–∫–∞
            if not self.client.is_connected():
                await self.client.connect()
                await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        except Exception as e:
            self.logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        
        self.logger.info(f"üîç –ü–æ–∏—Å–∫ {entity_name}: {entity_id}")
        
        # –ù–û–í–û–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        await self._diagnose_entity_access(entity_id, entity_name)
        
        # –†–ê–°–®–ò–†–ï–ù–ù–´–ï —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
        strategies = [
            lambda: self._get_entity_direct(entity_id),
            lambda: self._get_entity_via_full_dialogs(entity_id),
            lambda: self._get_entity_via_peer_resolver(entity_id),
            lambda: self._get_entity_legacy_mode(entity_id),  # –ù–û–í–û–ï: –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
            lambda: self._get_entity_via_username_resolve(entity_id),
            lambda: self._get_entity_via_search(entity_id),
            lambda: self._get_entity_force_fetch(entity_id)   # –ù–û–í–û–ï: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
        ]
        
        last_exception = None
        
        for attempt in range(max_retries):
            self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {entity_name}")
            
            for strategy_idx, strategy in enumerate(strategies):
                try:
                    entity = await strategy()
                    if entity:
                        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π entity
                        if await self._validate_entity_access(entity, entity_name):
                            self.logger.info(f"‚úÖ {entity_name} –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_idx + 1})")
                            return entity
                        else:
                            self.logger.warning(f"‚ö†Ô∏è {entity_name} –Ω–∞–π–¥–µ–Ω, –Ω–æ –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω")
                            continue
                        
                except (FloodWaitError, PeerFloodError) as e:
                    wait_time = getattr(e, 'seconds', 30)
                    self.logger.warning(f"FloodWait –¥–ª—è {entity_name}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å")
                    await asyncio.sleep(wait_time)
                    
                except (ChannelPrivateError, ChatInvalidError) as e:
                    self.logger.error(f"‚ùå {entity_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                    raise Exception(f"{entity_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
                except Exception as e:
                    last_exception = e
                    error_msg = str(e)
                    
                    # –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
                    if "HistoryGetFailedError" in error_msg or "GetChannelDifferenceRequest" in error_msg:
                        self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {strategy_idx + 1}")
                        await asyncio.sleep(2)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è API
                        continue
                    elif "internal issues" in error_msg.lower():
                        self.logger.warning(f"‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram, –∂–¥–µ–º...")
                        await asyncio.sleep(5)
                        continue
                    
                    self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_idx + 1} –¥–ª—è {entity_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                    continue
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
            if attempt < max_retries - 1:
                sleep_time = min(2 ** attempt, 30)  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
                self.logger.debug(f"–ü–∞—É–∑–∞ {sleep_time}—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                await asyncio.sleep(sleep_time)
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        error_msg = f"Entity {entity_name} ({entity_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫"
        if last_exception:
            error_msg += f". –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_exception}"
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        self.logger.error(f"‚ùå {error_msg}")
        await self._log_diagnostic_info(entity_id, entity_name)
        
        raise Exception(error_msg)
    
    async def _diagnose_entity_access(self, entity_id: Union[str, int], entity_name: str):
        """–ù–û–í–û–ï: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ entity."""
        try:
            self.logger.debug(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ {entity_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not await self.client.is_user_authorized():
                self.logger.warning("‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            self.logger.debug(f"üì± –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} (ID: {me.id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø entity_id
            if isinstance(entity_id, int):
                self.logger.debug(f"üî¢ –ü–æ–∏—Å–∫ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID: {entity_id}")
            else:
                self.logger.debug(f"üìù –ü–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID: {entity_id}")
                
        except Exception as e:
            self.logger.debug(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def _get_entity_direct(self, entity_id: Union[str, int]):
        """–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ entity."""
        try:
            return await self.client.get_entity(entity_id)
        except Exception:
            return None
    
    async def _get_entity_via_full_dialogs(self, entity_id: Union[str, int]):
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–æ–≤."""
        try:
            self.logger.debug("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–´–ô —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            dialogs = await self.client.get_dialogs()
            self.logger.debug(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")
            
            # –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
            for dialog in dialogs:
                if self._match_entity(dialog.entity, entity_id):
                    self.logger.debug(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ –¥–∏–∞–ª–æ–≥–∞—Ö: {getattr(dialog.entity, 'title', 'N/A')}")
                    return dialog.entity
                    
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ get_entity –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            return await self.client.get_entity(entity_id)
            
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return None
    
    async def _get_entity_via_username_resolve(self, entity_id: Union[str, int]):
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ username."""
        try:
            if isinstance(entity_id, str):
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                username = entity_id.lstrip('@')
                
                # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ resolve_username
                result = await self.client(functions.contacts.ResolveUsernameRequest(username))
                
                if result.chats:
                    return result.chats[0]
                if result.users:
                    return result.users[0]
                    
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ resolve username: {e}")
            return None
    
    async def _get_entity_via_peer_resolver(self, entity_id: Union[str, int]):
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ PeerChannel resolver."""
        try:
            if isinstance(entity_id, int):
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å PeerChannel –∏ –ø–æ–ª—É—á–∏—Ç—å entity
                from telethon.tl.types import PeerChannel
                peer = PeerChannel(entity_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                result = await self.client(functions.channels.GetChannelsRequest([peer]))
                if result.chats:
                    return result.chats[0]
                    
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ peer resolver: {e}")
            return None
    
    async def _get_entity_legacy_mode(self, entity_id: Union[str, int]):
        """–ù–û–í–û–ï: –ü–æ–∏—Å–∫ entity –≤ —Ä–µ–∂–∏–º–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏."""
        try:
            self.logger.debug("üîÑ –†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏...")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
            try:
                return await self.client.get_entity(entity_id)
            except Exception:
                pass
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ InputPeerChannel (–∫–∞–∫ –≤ v2)
            if isinstance(entity_id, int):
                try:
                    from telethon.tl.types import InputPeerChannel
                    from telethon.utils import get_peer_id, resolve_id
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID
                    channel_ids_to_try = [
                        entity_id,
                        abs(entity_id),
                        entity_id + 1000000000000,  # –î–æ–±–∞–≤–ª—è–µ–º offset –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
                    ]
                    
                    for channel_id in channel_ids_to_try:
                        try:
                            peer = InputPeerChannel(channel_id, 0)  # access_hash = 0 –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
                            result = await self.client(functions.channels.GetChannelsRequest([peer]))
                            if result.chats:
                                return result.chats[0]
                        except Exception:
                            continue
                            
                except Exception:
                    pass
            
            return None
            
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ legacy mode: {e}")
            return None
    
    async def _get_entity_force_fetch(self, entity_id: Union[str, int]):
        """–ù–û–í–û–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ API –º–µ—Ç–æ–¥—ã."""
        try:
            self.logger.debug("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API...")
            
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ GetDialogsRequest —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
            try:
                from telethon.tl.functions.messages import GetDialogsRequest
                from telethon.tl.types import InputPeerEmpty
                
                result = await self.client(GetDialogsRequest(
                    offset_date=None,
                    offset_id=0,
                    offset_peer=InputPeerEmpty(),
                    limit=200,
                    hash=0
                ))
                
                # –ò—â–µ–º —Å—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
                for chat in result.chats:
                    if self._match_entity(chat, entity_id):
                        return chat
                        
            except Exception:
                pass
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ GetFullChannelRequest
            if isinstance(entity_id, int):
                try:
                    from telethon.tl.types import PeerChannel
                    from telethon.tl.functions.channels import GetFullChannelRequest
                    
                    peer = PeerChannel(abs(entity_id))
                    full_channel = await self.client(GetFullChannelRequest(peer))
                    
                    if hasattr(full_channel, 'chats') and full_channel.chats:
                        return full_channel.chats[0]
                        
                except Exception:
                    pass
            
            return None
            
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ force fetch: {e}")
            return None

    async def _get_entity_via_dialogs(self, entity_id: Union[str, int]):
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)."""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            dialogs = await self.client.get_dialogs(limit=200)
            
            # –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
            for dialog in dialogs:
                if self._match_entity(dialog.entity, entity_id):
                    return dialog.entity
                    
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ get_entity –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            return await self.client.get_entity(entity_id)
            
        except Exception:
            return None
    
    async def _get_entity_via_search(self, entity_id: Union[str, int]):
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫."""
        try:
            if isinstance(entity_id, str) and entity_id.startswith('@'):
                username = entity_id[1:]
                
                # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
                result = await self.client(functions.contacts.SearchRequest(
                    q=username,
                    limit=10
                ))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for chat in result.chats:
                    if hasattr(chat, 'username') and chat.username == username:
                        return chat
                        
                for user in result.users:
                    if hasattr(user, 'username') and user.username == username:
                        return user
                        
        except Exception:
            pass
            
        return None
    
    def _match_entity(self, entity, target_id: Union[str, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è entity —Ü–µ–ª–µ–≤–æ–º—É ID."""
        try:
            # –ü–æ ID
            if isinstance(target_id, int) and hasattr(entity, 'id'):
                return entity.id == target_id
                
            # –ü–æ username
            if isinstance(target_id, str):
                if target_id.startswith('@'):
                    username = target_id[1:]
                else:
                    username = target_id
                    
                if hasattr(entity, 'username') and entity.username:
                    return entity.username.lower() == username.lower()
                    
        except Exception:
            pass
            
        return False
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        try:
            self.db_connection = sqlite3.connect(self.database_path)
            self.db_connection.execute("PRAGMA foreign_keys = ON")
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞
            self.db_connection.execute("""
                CREATE TABLE IF NOT EXISTS posts (
                    id INTEGER PRIMARY KEY,
                    channel_id TEXT NOT NULL,
                    message_text TEXT,
                    date_posted TIMESTAMP,
                    media_type TEXT,
                    media_data TEXT,  -- JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–¥–∏–∞
                    entities TEXT,    -- JSON —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                    grouped_id INTEGER,  -- ID –∞–ª—å–±–æ–º–∞
                    has_discussion BOOLEAN DEFAULT FALSE,
                    discussion_group_id TEXT,
                    processed BOOLEAN DEFAULT FALSE,
                    target_message_id INTEGER,
                    processed_at TIMESTAMP,
                    raw_message TEXT  -- –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            self.db_connection.execute("""
                CREATE TABLE IF NOT EXISTS comments (
                    id INTEGER PRIMARY KEY,
                    post_id INTEGER NOT NULL,
                    discussion_group_id TEXT,
                    comment_text TEXT,
                    date_posted TIMESTAMP,
                    media_type TEXT,
                    media_data TEXT,
                    entities TEXT,
                    reply_to_comment_id INTEGER,  -- –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                    processed BOOLEAN DEFAULT FALSE,
                    target_message_id INTEGER,
                    processed_at TIMESTAMP,
                    raw_message TEXT,
                    FOREIGN KEY (post_id) REFERENCES posts (id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            self.db_connection.execute("""
                CREATE TABLE IF NOT EXISTS copy_state (
                    id INTEGER PRIMARY KEY,
                    channel_id TEXT UNIQUE,
                    last_scanned_message_id INTEGER,
                    scan_completed BOOLEAN DEFAULT FALSE,
                    last_copied_message_id INTEGER,
                    total_messages INTEGER DEFAULT 0,
                    processed_messages INTEGER DEFAULT 0,
                    last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.db_connection.execute("CREATE INDEX IF NOT EXISTS idx_posts_date ON posts (date_posted)")
            self.db_connection.execute("CREATE INDEX IF NOT EXISTS idx_posts_processed ON posts (processed)")
            self.db_connection.execute("CREATE INDEX IF NOT EXISTS idx_posts_grouped ON posts (grouped_id)")
            self.db_connection.execute("CREATE INDEX IF NOT EXISTS idx_comments_post ON comments (post_id)")
            self.db_connection.execute("CREATE INDEX IF NOT EXISTS idx_comments_processed ON comments (processed)")
            
            self.db_connection.commit()
            self.logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.database_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    async def _find_discussion_groups(self):
        """–ü–æ–∏—Å–∫ discussion groups –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ linked_chat —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            full_channel = await self.client(functions.channels.GetFullChannelRequest(self.source_entity))
            
            if hasattr(full_channel.full_chat, 'linked_chat_id') and full_channel.full_chat.linked_chat_id:
                self.discussion_entity = await self.client.get_entity(full_channel.full_chat.linked_chat_id)
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ discussion group –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {getattr(self.discussion_entity, 'title', 'N/A')}")
            
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            target_full_channel = await self.client(functions.channels.GetFullChannelRequest(self.target_entity))
            
            if hasattr(target_full_channel.full_chat, 'linked_chat_id') and target_full_channel.full_chat.linked_chat_id:
                self.target_discussion_entity = await self.client.get_entity(target_full_channel.full_chat.linked_chat_id)
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ discussion group —Ü–µ–ª–∏: {getattr(self.target_discussion_entity, 'title', 'N/A')}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ discussion groups: {e}")
    
    async def scan_and_save_all_messages(self) -> bool:
        """
        –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            cursor = self.db_connection.execute("""
                SELECT scan_completed FROM copy_state WHERE channel_id = ?
            """, (str(self.source_entity.id),))
            
            result = cursor.fetchone()
            if result and result[0]:
                self.logger.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return True
            
            self.logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...")
            
            total_messages = 0
            total_comments = 0
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            async for message in self.client.iter_messages(self.source_entity):
                if self.stop_requested:
                    break
                
                await self._save_post_to_db(message)
                total_messages += 1
                
                # –°–∫–∞–Ω–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.replies and message.replies.comments:
                    comments = await self._get_comments_for_post(message)
                    for comment in comments:
                        await self._save_comment_to_db(comment, message.id)
                        total_comments += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if total_messages % 100 == 0:
                    self.logger.info(f"üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {total_messages} –ø–æ—Å—Ç–æ–≤, {total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
            self.db_connection.execute("""
                INSERT OR REPLACE INTO copy_state 
                (channel_id, scan_completed, total_messages, last_update)
                VALUES (?, TRUE, ?, CURRENT_TIMESTAMP)
            """, (str(self.source_entity.id), total_messages))
            
            self.db_connection.commit()
            
            self.logger.info(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_messages} –ø–æ—Å—Ç–æ–≤, {total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def _save_post_to_db(self, message: Message):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞
            media_type = None
            media_data = {}
            
            if message.media:
                media_type = message.media.__class__.__name__
                if hasattr(message.media, 'document') and message.media.document:
                    media_data = {
                        'document_id': message.media.document.id,
                        'mime_type': getattr(message.media.document, 'mime_type', ''),
                        'size': getattr(message.media.document, 'size', 0),
                        'filename': self._extract_filename(message.media.document)
                    }
                elif hasattr(message.media, 'photo') and message.media.photo:
                    media_data = {
                        'photo_id': message.media.photo.id
                    }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ entities
            entities = []
            if message.entities:
                for entity in message.entities:
                    entities.append({
                        'type': entity.__class__.__name__,
                        'offset': entity.offset,
                        'length': entity.length,
                        'url': getattr(entity, 'url', None)
                    })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.db_connection.execute("""
                INSERT OR REPLACE INTO posts
                (id, channel_id, message_text, date_posted, media_type, media_data,
                 entities, grouped_id, has_discussion, discussion_group_id, raw_message)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                message.id,
                str(self.source_entity.id),
                message.message or '',
                message.date.isoformat() if message.date else None,
                media_type,
                json.dumps(media_data) if media_data else None,
                json.dumps(entities) if entities else None,
                message.grouped_id,
                bool(message.replies and message.replies.comments),
                str(message.replies.channel_id) if message.replies and message.replies.channel_id else None,
                json.dumps({
                    'id': message.id,
                    'message': message.message,
                    'date': message.date.isoformat() if message.date else None,
                    'grouped_id': message.grouped_id,
                    'views': getattr(message, 'views', None),
                    'forwards': getattr(message, 'forwards', None)
                })
            ))
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ {message.id}: {e}")
    
    async def _save_comment_to_db(self, comment: Message, post_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞
            media_type = None
            media_data = {}
            
            if comment.media:
                media_type = comment.media.__class__.__name__
                if hasattr(comment.media, 'document') and comment.media.document:
                    media_data = {
                        'document_id': comment.media.document.id,
                        'mime_type': getattr(comment.media.document, 'mime_type', ''),
                        'size': getattr(comment.media.document, 'size', 0),
                        'filename': self._extract_filename(comment.media.document)
                    }
                elif hasattr(comment.media, 'photo') and comment.media.photo:
                    media_data = {
                        'photo_id': comment.media.photo.id
                    }
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ entities
            entities = []
            if comment.entities:
                for entity in comment.entities:
                    entities.append({
                        'type': entity.__class__.__name__,
                        'offset': entity.offset,
                        'length': entity.length,
                        'url': getattr(entity, 'url', None)
                    })
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            reply_to_comment_id = None
            if comment.reply_to and hasattr(comment.reply_to, 'reply_to_msg_id'):
                reply_to_comment_id = comment.reply_to.reply_to_msg_id
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.db_connection.execute("""
                INSERT OR REPLACE INTO comments
                (id, post_id, discussion_group_id, comment_text, date_posted,
                 media_type, media_data, entities, reply_to_comment_id, raw_message)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                comment.id,
                post_id,
                str(self.discussion_entity.id) if self.discussion_entity else None,
                comment.message or '',
                comment.date.isoformat() if comment.date else None,
                media_type,
                json.dumps(media_data) if media_data else None,
                json.dumps(entities) if entities else None,
                reply_to_comment_id,
                json.dumps({
                    'id': comment.id,
                    'message': comment.message,
                    'date': comment.date.isoformat() if comment.date else None,
                    'views': getattr(comment, 'views', None)
                })
            ))
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}: {e}")
    
    async def _get_comments_for_post(self, post: Message) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞."""
        comments = []
        
        try:
            if not self.discussion_entity or not post.replies or not post.replies.comments:
                return comments
            
            # –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ discussion group
            discussion_message_id = await self._find_discussion_message_id(post)
            
            if discussion_message_id:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                async for comment in self.client.iter_messages(
                    self.discussion_entity, 
                    reply_to=discussion_message_id
                ):
                    comments.append(comment)
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}: {e}")
        
        return comments
    
    async def _find_discussion_message_id(self, post: Message) -> Optional[int]:
        """–ü–æ–∏—Å–∫ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ discussion group, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç—É –∫–∞–Ω–∞–ª–∞."""
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –ø–æ ID (—á–∞—Å—Ç–æ ID —Å–æ–≤–ø–∞–¥–∞—é—Ç)
            try:
                message = await self.client.get_messages(self.discussion_entity, ids=post.id)
                if message and not message.empty:
                    return post.id
            except:
                pass
            
            # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ forward header
            async for message in self.client.iter_messages(self.discussion_entity, limit=200):
                if (message.forward and 
                    hasattr(message.forward, 'channel_post') and 
                    message.forward.channel_post == post.id):
                    return message.id
            
            # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)
            if post.message and len(post.message.strip()) > 20:
                search_text = post.message.strip()[:100]
                async for message in self.client.iter_messages(self.discussion_entity, limit=100):
                    if message.message and search_text in message.message:
                        return message.id
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ discussion message –¥–ª—è –ø–æ—Å—Ç–∞ {post.id}: {e}")
        
        return None
    
    def _extract_filename(self, document) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        try:
            for attr in getattr(document, 'attributes', []):
                if isinstance(attr, DocumentAttributeFilename):
                    return attr.file_name
        except:
            pass
        return None
    
    def _get_file_attributes_from_media(self, media, message_id: int) -> Tuple[Optional[str], Optional[str], Optional[str]]:
        """
        –ù–û–í–û–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞ –∏–∑ –º–µ–¥–∏–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–º–º–∏—Ç–∞ 907d630).
        
        Args:
            media: –ú–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
            
        Returns:
            Tuple (suggested_filename, original_mime_type, extension)
        """
        suggested_filename = None
        original_mime_type = None
        extension = None
        
        try:
            if hasattr(media, 'document') and media.document:
                doc = media.document
                original_attributes = doc.attributes if hasattr(doc, 'attributes') else []
                original_mime_type = getattr(doc, 'mime_type', None)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                for attr in original_attributes:
                    if isinstance(attr, DocumentAttributeFilename):
                        suggested_filename = attr.file_name
                        break
                
                # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ MIME-—Ç–∏–ø–∞
                if not suggested_filename and original_mime_type:
                    if original_mime_type.startswith('image/'):
                        extension = original_mime_type.split('/')[-1]
                        if extension == 'jpeg':
                            extension = 'jpg'
                        suggested_filename = f"image_{message_id}.{extension}"
                    elif original_mime_type.startswith('video/'):
                        extension = original_mime_type.split('/')[-1]
                        suggested_filename = f"video_{message_id}.{extension}"
                    elif original_mime_type.startswith('audio/'):
                        extension = original_mime_type.split('/')[-1]
                        suggested_filename = f"audio_{message_id}.{extension}"
                    else:
                        suggested_filename = f"document_{message_id}"
                
                if not suggested_filename:
                    suggested_filename = f"document_{message_id}"
                    
            elif isinstance(media, MessageMediaPhoto):
                suggested_filename = f"photo_{message_id}.jpg"
                original_mime_type = "image/jpeg"
                extension = "jpg"
            
            # Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
            if not suggested_filename:
                suggested_filename = f"media_{message_id}"
                
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞: {e}")
            suggested_filename = f"media_{message_id}"
        
        return suggested_filename, original_mime_type, extension
    
    async def _download_media_with_attributes(self, media, message_id: int):
        """
        –ù–û–í–û–ï: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Ñ–∞–π–ª–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–∞ 907d630).
        
        Args:
            media: –ú–µ–¥–∏–∞ –æ–±—ä–µ–∫—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏
            
        Returns:
            Tuple (media_file, filename) –≥–¥–µ filename=None –¥–ª—è fallback –∫ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ñ–∞–π–ª–∞
            suggested_filename, original_mime_type, extension = self._get_file_attributes_from_media(
                media, message_id
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ bytes
            downloaded_file = await self.client.download_media(media, file=bytes)
            
            if downloaded_file and suggested_filename:
                self.logger.debug(f"–ú–µ–¥–∏–∞ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –∫–∞–∫: {suggested_filename}")
                return (downloaded_file, suggested_filename)
            else:
                self.logger.debug("Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –º–µ–¥–∏–∞")
                return (media, None)
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–µ–¥–∏–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return (media, None)
    
    async def copy_all_messages_chronologically(self) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
        –ü–û–†–Ø–î–û–ö: –ø–æ—Å—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Üí –ø–æ—Å—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Üí –ø–æ—Å—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...
        """
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ...")
            self.logger.info("üìã –ü–æ—Ä—è–¥–æ–∫: –ø–æ—Å—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Üí –ø–æ—Å—Ç ‚Üí –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            cursor = self.db_connection.execute("""
                SELECT * FROM posts 
                WHERE processed = FALSE 
                ORDER BY date_posted ASC
            """)
            
            posts_data = cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
            albums = {}  # grouped_id -> [posts]
            single_posts = []
            
            for post_row in posts_data:
                grouped_id = post_row[7]  # –∏–Ω–¥–µ–∫—Å grouped_id –≤ —Ç–∞–±–ª–∏—Ü–µ
                if grouped_id:
                    if grouped_id not in albums:
                        albums[grouped_id] = []
                    albums[grouped_id].append(post_row)
                else:
                    single_posts.append(post_row)
            
            # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            all_items = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ—Å—Ç—ã
            for post_row in single_posts:
                all_items.append(('single_post', post_row))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º—ã (–∫–∞–∂–¥—ã–π –∞–ª—å–±–æ–º –∫–∞–∫ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç)
            for grouped_id, album_posts in albums.items():
                # –ë–µ—Ä–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                first_post_date = album_posts[0][3]  # date_posted
                all_items.append(('album', album_posts, first_post_date))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –¥–∞—Ç–µ
            all_items.sort(key=lambda x: x[2] if len(x) > 2 else x[1][3])
            
            self.stats.total_posts = len(single_posts)
            self.stats.total_albums = len(albums)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            cursor = self.db_connection.execute("SELECT COUNT(*) FROM comments WHERE processed = FALSE")
            self.stats.total_comments = cursor.fetchone()[0]
            
            self.logger.info(f"üìä –ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é: {len(single_posts)} –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, {len(albums)} –∞–ª—å–±–æ–º–æ–≤, {self.stats.total_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            for item in all_items:
                if self.stop_requested:
                    break
                
                if item[0] == 'single_post':
                    # –ö–æ–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–π –ø–æ—Å—Ç
                    post_row = item[1]
                    post_id = post_row[0]
                    
                    self.logger.info(f"üìù –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç {post_id}")
                    success = await self._copy_single_post_from_db(post_row)
                    
                    if success:
                        self.stats.copied_posts += 1
                        
                        # –°—Ä–∞–∑—É –∫–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É
                        await self._copy_comments_for_post(post_id)
                    else:
                        self.stats.failed_posts += 1
                
                elif item[0] == 'album':
                    # –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º
                    album_posts = item[1]
                    grouped_id = album_posts[0][7]
                    
                    self.logger.info(f"üì∑ –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º {grouped_id} ({len(album_posts)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
                    success = await self._copy_album_from_db(album_posts)
                    
                    if success:
                        self.stats.copied_albums += 1
                        
                        # –°—Ä–∞–∑—É –∫–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º –∞–ª—å–±–æ–º–∞
                        for post_row in album_posts:
                            post_id = post_row[0]
                            await self._copy_comments_for_post(post_id)
                    else:
                        self.stats.failed_albums += 1
                
                await asyncio.sleep(self.delay_seconds)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.logger.info("üéâ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.logger.info(f"   üìù –ü–æ—Å—Ç—ã: {self.stats.copied_posts}/{self.stats.total_posts}")
            self.logger.info(f"   üì∑ –ê–ª—å–±–æ–º—ã: {self.stats.copied_albums}/{self.stats.total_albums}")
            self.logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {self.stats.copied_comments}/{self.stats.total_comments}")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    async def _copy_comments_for_post(self, post_id: int):
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
        –í —Ä–µ–∂–∏–º–µ flatten_structure –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.
        
        Args:
            post_id: ID –ø–æ—Å—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        """
        try:
            # –í —Ä–µ–∂–∏–º–µ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –Ω—É–∂–Ω–∞ discussion group
            if not self.flatten_structure and not self.target_discussion_entity:
                return  # –ù–µ—Ç —Ü–µ–ª–µ–≤–æ–π discussion group –∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
            cursor = self.db_connection.execute("""
                SELECT c.*, p.target_message_id 
                FROM comments c
                JOIN posts p ON c.post_id = p.id
                WHERE c.post_id = ? AND c.processed = FALSE AND p.processed = TRUE
                ORDER BY c.date_posted ASC
            """, (post_id,))
            
            comments_data = cursor.fetchall()
            
            if not comments_data:
                return  # –ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
            
            if self.flatten_structure:
                self.logger.info(f"   üí¨ –ö–æ–ø–∏—Ä—É–µ–º {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {post_id} –ö–ê–ö –û–ë–´–ß–ù–´–ï –ü–û–°–¢–´ (—Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)")
            else:
                self.logger.info(f"   üí¨ –ö–æ–ø–∏—Ä—É–µ–º {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É {post_id}")
            
            for comment_row in comments_data:
                if self.stop_requested:
                    break
                
                success = await self._copy_single_comment_from_db(comment_row)
                if success:
                    self.stats.copied_comments += 1
                else:
                    self.stats.failed_comments += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
                await asyncio.sleep(1)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    async def _copy_all_posts(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            cursor = self.db_connection.execute("""
                SELECT * FROM posts 
                WHERE processed = FALSE 
                ORDER BY date_posted ASC
            """)
            
            posts_data = cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
            albums = {}  # grouped_id -> [posts]
            single_posts = []
            
            for post_row in posts_data:
                grouped_id = post_row[7]  # –∏–Ω–¥–µ–∫—Å grouped_id –≤ —Ç–∞–±–ª–∏—Ü–µ
                if grouped_id:
                    if grouped_id not in albums:
                        albums[grouped_id] = []
                    albums[grouped_id].append(post_row)
                else:
                    single_posts.append(post_row)
            
            self.stats.total_posts = len(single_posts)
            self.stats.total_albums = len(albums)
            
            self.logger.info(f"üìä –ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é: {len(single_posts)} –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤, {len(albums)} –∞–ª—å–±–æ–º–æ–≤")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ—Å—Ç—ã
            for post_row in single_posts:
                if self.stop_requested:
                    break
                
                success = await self._copy_single_post_from_db(post_row)
                if success:
                    self.stats.copied_posts += 1
                else:
                    self.stats.failed_posts += 1
                
                await asyncio.sleep(self.delay_seconds)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
            for grouped_id, album_posts in albums.items():
                if self.stop_requested:
                    break
                
                success = await self._copy_album_from_db(album_posts)
                if success:
                    self.stats.copied_albums += 1
                else:
                    self.stats.failed_albums += 1
                
                await asyncio.sleep(self.delay_seconds)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _copy_single_post_from_db(self, post_row: tuple) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î."""
        try:
            post_id = post_row[0]
            message_text = post_row[2] or ''
            media_type = post_row[4]
            media_data = json.loads(post_row[5]) if post_row[5] else {}
            entities_data = json.loads(post_row[6]) if post_row[6] else []
            
            if self.dry_run:
                self.logger.info(f"üîß [DRY RUN] –ü–æ—Å—Ç {post_id}: {message_text[:50]}...")
                self._mark_post_processed(post_id, 999999)  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è dry run
                return True
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
            send_kwargs = {
                'entity': self.target_entity,
                'message': message_text,
                'formatting_entities': self._restore_entities(entities_data),
                'link_preview': False
            }
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–∞ 907d630)
            if media_type and media_data:
                original_message = await self._get_original_message(post_id)
                if original_message and original_message.media:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    media_file, filename = await self._download_media_with_attributes(original_message.media, post_id)
                    
                    if filename:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (data, filename) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        send_kwargs['file'] = (media_file, filename)
                        self.logger.debug(f"–ü–æ—Å—Ç –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫: {filename}")
                    else:
                        # Fallback –∫ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
                        send_kwargs['file'] = media_file
                    
                    send_kwargs['caption'] = message_text
                    del send_kwargs['message']  # –î–ª—è –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            sent_message = await self.client.send_message(**send_kwargs)
            
            # –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            self._mark_post_processed(post_id, sent_message.id)
            
            self.logger.debug(f"‚úÖ –ü–æ—Å—Ç {post_id} -> {sent_message.id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {post_row[0]}: {e}")
            return False
    
    async def _copy_album_from_db(self, album_posts: List[tuple]) -> bool:
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î."""
        try:
            if not album_posts:
                return False
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
            album_posts.sort(key=lambda x: x[0])  # sort by post_id
            
            grouped_id = album_posts[0][7]  # grouped_id
            
            if self.dry_run:
                self.logger.info(f"üîß [DRY RUN] –ê–ª—å–±–æ–º {grouped_id}: {len(album_posts)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                for post_row in album_posts:
                    self._mark_post_processed(post_row[0], 999999)
                return True
            
            # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç
            media_files = []
            caption = ""
            entities = []
            
            for post_row in album_posts:
                post_id = post_row[0]
                message_text = post_row[2] or ''
                entities_data = json.loads(post_row[6]) if post_row[6] else []
                
                # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not caption and message_text.strip():
                    caption = message_text
                    entities = self._restore_entities(entities_data)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–¥–∏–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (–∫–æ–º–º–∏—Ç 907d630)
                original_message = await self._get_original_message(post_id)
                if original_message and original_message.media:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    media_file, filename = await self._download_media_with_attributes(original_message.media, post_id)
                    
                    if filename:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (data, filename) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        media_files.append((media_file, filename))
                        self.logger.debug(f"–ê–ª—å–±–æ–º –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫: {filename}")
                    else:
                        # Fallback –∫ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
                        media_files.append(media_file)
            
            if not media_files:
                self.logger.warning(f"‚ö†Ô∏è –ê–ª—å–±–æ–º {grouped_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
                if caption.strip():
                    sent_message = await self.client.send_message(
                        self.target_entity, 
                        caption, 
                        formatting_entities=entities
                    )
                    for post_row in album_posts:
                        self._mark_post_processed(post_row[0], sent_message.id)
                    return True
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
            sent_messages = await self.client.send_file(
                self.target_entity,
                media_files,
                caption=caption,
                formatting_entities=entities
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            if isinstance(sent_messages, list):
                for i, post_row in enumerate(album_posts):
                    target_id = sent_messages[i].id if i < len(sent_messages) else sent_messages[0].id
                    self._mark_post_processed(post_row[0], target_id)
            else:
                # –û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –∞–ª—å–±–æ–º–∞
                for post_row in album_posts:
                    self._mark_post_processed(post_row[0], sent_messages.id)
            
            self.logger.info(f"‚úÖ –ê–ª—å–±–æ–º {grouped_id} ({len(album_posts)} —Å–æ–æ–±—â–µ–Ω–∏–π) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª—å–±–æ–º–∞: {e}")
            return False
    
    async def _copy_all_comments(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        try:
            if not self.target_discussion_entity:
                self.logger.warning("‚ö†Ô∏è –¶–µ–ª–µ–≤–∞—è discussion group –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            cursor = self.db_connection.execute("""
                SELECT c.*, p.target_message_id 
                FROM comments c
                JOIN posts p ON c.post_id = p.id
                WHERE c.processed = FALSE AND p.processed = TRUE
                ORDER BY c.date_posted ASC
            """)
            
            comments_data = cursor.fetchall()
            self.stats.total_comments = len(comments_data)
            
            self.logger.info(f"üìä –ö –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é: {len(comments_data)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            
            for comment_row in comments_data:
                if self.stop_requested:
                    break
                
                success = await self._copy_single_comment_from_db(comment_row)
                if success:
                    self.stats.copied_comments += 1
                else:
                    self.stats.failed_comments += 1
                
                await asyncio.sleep(self.delay_seconds)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
    
    async def _copy_single_comment_from_db(self, comment_row: tuple) -> bool:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î.
        –í —Ä–µ–∂–∏–º–µ flatten_structure –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.
        """
        try:
            comment_id = comment_row[0]
            comment_text = comment_row[3] or ''
            media_type = comment_row[5]
            media_data = json.loads(comment_row[6]) if comment_row[6] else {}
            entities_data = json.loads(comment_row[7]) if comment_row[7] else []
            target_post_id = comment_row[-1]  # target_message_id –∏–∑ JOIN
            
            if self.dry_run:
                mode_text = "–ö–ê–ö –û–ë–´–ß–ù–´–ô –ü–û–°–¢" if self.flatten_structure else "–∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                self.logger.info(f"üîß [DRY RUN] –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} {mode_text}: {comment_text[:50]}...")
                self._mark_comment_processed(comment_id, 999999)
                return True
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.flatten_structure:
                # –í —Ä–µ–∂–∏–º–µ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                target_entity = self.target_entity
                send_kwargs = {
                    'entity': target_entity,
                    'message': comment_text,
                    'formatting_entities': self._restore_entities(entities_data),
                    # –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º reply_to - —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç
                }
                self.logger.debug(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª")
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ discussion group –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                target_entity = self.target_discussion_entity
                send_kwargs = {
                    'entity': target_entity,
                    'message': comment_text,
                    'formatting_entities': self._restore_entities(entities_data),
                    'reply_to': target_post_id  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
                }
                self.logger.debug(f"üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å—Ç {target_post_id}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–∞ 907d630)
            if media_type and media_data:
                original_comment = await self._get_original_comment(comment_id)
                if original_comment and original_comment.media:
                    # –°–∫–∞—á–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ (–¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)
                    media_file, filename = await self._download_media_with_attributes(original_comment.media, comment_id)
                    
                    if filename:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (data, filename) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        send_kwargs['file'] = (media_file, filename)
                        self.logger.debug(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫: {filename}")
                    else:
                        # Fallback –∫ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
                        send_kwargs['file'] = media_file
                    
                    send_kwargs['caption'] = comment_text
                    del send_kwargs['message']  # –î–ª—è –º–µ–¥–∏–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º caption
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞
            sent_message = await self.client.send_message(**send_kwargs)
            
            # –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
            self._mark_comment_processed(comment_id, sent_message.id)
            
            if self.flatten_structure:
                self.logger.debug(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} -> –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç {sent_message.id}")
            else:
                self.logger.debug(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment_id} -> –æ—Ç–≤–µ—Ç {sent_message.id}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment_row[0]}: {e}")
            return False
    
    async def _get_original_message(self, message_id: int) -> Optional[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID."""
        try:
            message = await self.client.get_messages(self.source_entity, ids=message_id)
            return message if message and not message.empty else None
        except:
            return None
    
    async def _get_original_comment(self, comment_id: int) -> Optional[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ ID."""
        try:
            if not self.discussion_entity:
                return None
            comment = await self.client.get_messages(self.discussion_entity, ids=comment_id)
            return comment if comment and not comment.empty else None
        except:
            return None
    
    def _restore_entities(self, entities_data: List[Dict]) -> List:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ entities –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ë–î."""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        return []
    
    def _mark_post_processed(self, post_id: int, target_message_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ –ø–æ—Å—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ."""
        try:
            self.db_connection.execute("""
                UPDATE posts 
                SET processed = TRUE, target_message_id = ?, processed_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (target_message_id, post_id))
            self.db_connection.commit()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    def _mark_comment_processed(self, comment_id: int, target_message_id: int):
        """–û—Ç–º–µ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ."""
        try:
            self.db_connection.execute("""
                UPDATE comments 
                SET processed = TRUE, target_message_id = ?, processed_at = CURRENT_TIMESTAMP
                WHERE id = ?
            """, (target_message_id, comment_id))
            self.db_connection.commit()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment_id}: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if self.db_connection:
            self.db_connection.close()
            self.logger.info("üîí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.stop_requested = True
        self.logger.info("‚èπÔ∏è –ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    async def _validate_entity_access(self, entity, entity_name: str) -> bool:
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π entity."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ entity –Ω–µ None –∏ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if not entity or not hasattr(entity, 'id'):
                return False
            
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞
            if hasattr(entity, 'megagroup') or hasattr(entity, 'broadcast'):
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                try:
                    messages = await self.client.get_messages(entity, limit=1)
                    self.logger.debug(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ {entity_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                    return True
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {entity_name}: {e}")
                    return False
            
            return True
            
        except Exception as e:
            self.logger.debug(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ {entity_name}: {e}")
            return False
    
    async def _log_diagnostic_info(self, entity_id: Union[str, int], entity_name: str):
        """–ù–û–í–û–ï: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è troubleshooting."""
        try:
            self.logger.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
            if await self.client.is_user_authorized():
                me = await self.client.get_me()
                self.logger.error(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name} (ID: {me.id})")
            else:
                self.logger.error("   ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ entity_id
            self.logger.error(f"   üéØ –ò—Å–∫–æ–º—ã–π ID: {entity_id} (—Ç–∏–ø: {type(entity_id).__name__})")
            
            # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            try:
                dialogs = await self.client.get_dialogs(limit=10)
                self.logger.error(f"   üìÅ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}")
                for i, dialog in enumerate(dialogs[:5]):
                    entity_info = f"ID: {dialog.entity.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(dialog.entity, 'title', getattr(dialog.entity, 'first_name', 'N/A'))}"
                    self.logger.error(f"     {i+1}. {entity_info}")
                if len(dialogs) > 5:
                    self.logger.error(f"     ... –∏ –µ—â–µ {len(dialogs) - 5} –¥–∏–∞–ª–æ–≥–æ–≤")
            except Exception as e:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é
            self.logger.error("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            self.logger.error("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∫–∞–Ω–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            self.logger.error("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞")
            self.logger.error("   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            self.logger.error("   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @username –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ ID")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")


async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
    client = TelegramClient('session', 'api_id', 'api_hash')
    
    copier = TelegramCopierV3(
        client=client,
        source_channel_id='@source_channel',
        target_channel_id='@target_channel',
        dry_run=True  # –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    )
    
    try:
        await client.start()
        await copier.initialize()
        
        # –≠—Ç–∞–ø 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
        await copier.scan_and_save_all_messages()
        
        # –≠—Ç–∞–ø 2: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        await copier.copy_all_messages_chronologically()
        
    finally:
        copier.close()
        await client.disconnect()


if __name__ == '__main__':
    asyncio.run(main())