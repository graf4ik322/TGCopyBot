"""
Telegram Entity Manager - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è entities —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "Cannot find any entity corresponding to" —á–µ—Ä–µ–∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
"""

import asyncio
import logging
import time
from typing import Optional, Union, List, Dict, Any
from telethon import TelegramClient
from telethon.tl.types import (
    Channel, Chat, User, PeerChannel, PeerChat, PeerUser,
    InputPeerChannel, InputPeerChat, InputPeerUser
)
from telethon.tl import functions
from telethon.errors import (
    FloodWaitError, PeerFloodError, ChannelPrivateError, 
    ChatAdminRequiredError, UserNotParticipantError,
    ChannelInvalidError, ValueError
)


class EntityNotFoundError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ entity –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞."""
    pass


class EntityAccessDeniedError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ entity."""
    pass


class TelegramEntityManager:
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram entities.
    –í–∫–ª—é—á–∞–µ—Ç retry –º–µ—Ö–∞–Ω–∏–∑–º—ã, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞.
    """
    
    def __init__(self, client: TelegramClient, max_retries: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ entities.
        
        Args:
            client: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π Telegram –∫–ª–∏–µ–Ω—Ç
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        """
        self.client = client
        self.max_retries = max_retries
        self.logger = logging.getLogger('entity_manager')
        
        # –ö—ç—à –¥–ª—è entities
        self._entity_cache: Dict[str, Any] = {}
        self._access_cache: Dict[str, bool] = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        self._attempt_stats: Dict[str, int] = {}
    
    async def get_entity_robust(self, 
                               entity_id: Union[str, int],
                               force_refresh: bool = False) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ entity —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞.
        
        Args:
            entity_id: ID –∏–ª–∏ username entity
            force_refresh: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
            
        Returns:
            Entity –æ–±—ä–µ–∫—Ç –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            
        Raises:
            EntityNotFoundError: –ï—Å–ª–∏ entity –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
            EntityAccessDeniedError: –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ entity
        """
        entity_key = str(entity_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if not force_refresh and entity_key in self._entity_cache:
            self.logger.debug(f"–í–æ–∑–≤—Ä–∞—Ç entity {entity_key} –∏–∑ –∫—ç—à–∞")
            return self._entity_cache[entity_key]
        
        self.logger.info(f"üîç –ü–æ–∏—Å–∫ entity: {entity_key}")
        
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
        strategies = [
            self._get_entity_direct,
            self._get_entity_with_dialogs_sync,
            self._get_entity_by_search,
            self._get_entity_by_username_variants,
            self._get_entity_by_invite_link
        ]
        
        last_exception = None
        
        for attempt in range(self.max_retries):
            self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}")
            
            for strategy_idx, strategy in enumerate(strategies):
                try:
                    self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_idx + 1}: {strategy.__name__}")
                    
                    entity = await strategy(entity_id)
                    
                    if entity:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
                        if await self._verify_entity_access(entity):
                            self._entity_cache[entity_key] = entity
                            self._access_cache[entity_key] = True
                            self.logger.info(f"‚úÖ Entity {entity_key} –Ω–∞–π–¥–µ–Ω–∞ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_idx + 1})")
                            return entity
                        else:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ entity {entity_key}")
                            self._access_cache[entity_key] = False
                            raise EntityAccessDeniedError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {entity_key}")
                    
                except (FloodWaitError, PeerFloodError) as e:
                    wait_time = getattr(e, 'seconds', 30)
                    self.logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å")
                    await asyncio.sleep(wait_time)
                    
                except (ChannelPrivateError, ChatAdminRequiredError, UserNotParticipantError):
                    self.logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {entity_key}")
                    self._access_cache[entity_key] = False
                    raise EntityAccessDeniedError(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ {entity_key}")
                    
                except Exception as e:
                    last_exception = e
                    self.logger.debug(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {strategy_idx + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: {e}")
                    continue
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            if attempt < self.max_retries - 1:
                await asyncio.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        # –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        self._attempt_stats[entity_key] = self._attempt_stats.get(entity_key, 0) + 1
        error_msg = f"Entity {entity_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫"
        
        if last_exception:
            error_msg += f". –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_exception}"
        
        raise EntityNotFoundError(error_msg)
    
    async def _get_entity_direct(self, entity_id: Union[str, int]) -> Optional[Any]:
        """–ü—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ entity —á–µ—Ä–µ–∑ get_entity."""
        return await self.client.get_entity(entity_id)
    
    async def _get_entity_with_dialogs_sync(self, entity_id: Union[str, int]) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ entity —á–µ—Ä–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–æ–≤."""
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            self.logger.debug("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤...")
            dialogs = await self.client.get_dialogs(limit=200)
            
            # –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
            for dialog in dialogs:
                if self._match_entity(dialog.entity, entity_id):
                    return dialog.entity
                    
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ get_entity –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            return await self.client.get_entity(entity_id)
            
        except Exception as e:
            self.logger.debug(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –Ω–µ –ø–æ–º–æ–≥–ª–∞: {e}")
            return None
    
    async def _get_entity_by_search(self, entity_id: Union[str, int]) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫."""
        try:
            if isinstance(entity_id, str) and entity_id.startswith('@'):
                username = entity_id[1:]  # –£–±–∏—Ä–∞–µ–º @
                
                # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
                result = await self.client(functions.contacts.SearchRequest(
                    q=username,
                    limit=10
                ))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                for chat in result.chats:
                    if hasattr(chat, 'username') and chat.username == username:
                        return chat
                        
                for user in result.users:
                    if hasattr(user, 'username') and user.username == username:
                        return user
                        
        except Exception as e:
            self.logger.debug(f"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SearchRequest –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
        return None
    
    async def _get_entity_by_username_variants(self, entity_id: Union[str, int]) -> Optional[Any]:
        """–ü–æ–∏—Å–∫ entity —á–µ—Ä–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç—ã username."""
        if not isinstance(entity_id, str):
            return None
            
        variants = []
        
        if entity_id.startswith('@'):
            username = entity_id[1:]
            variants = [entity_id, username, f"t.me/{username}"]
        else:
            variants = [entity_id, f"@{entity_id}", f"t.me/{entity_id}"]
            
        for variant in variants:
            try:
                entity = await self.client.get_entity(variant)
                if entity:
                    return entity
            except:
                continue
                
        return None
    
    async def _get_entity_by_invite_link(self, entity_id: Union[str, int]) -> Optional[Any]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ invite link (–µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞)."""
        if not isinstance(entity_id, str) or not entity_id.startswith('https://t.me/'):
            return None
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
            parts = entity_id.split('/')
            if len(parts) >= 4:
                username = parts[-1]
                return await self.client.get_entity(f"@{username}")
        except:
            pass
            
        return None
    
    def _match_entity(self, entity: Any, target_id: Union[str, int]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è entity —Ü–µ–ª–µ–≤–æ–º—É ID."""
        try:
            # –ü–æ ID
            if isinstance(target_id, int) and hasattr(entity, 'id'):
                return entity.id == target_id
                
            # –ü–æ username
            if isinstance(target_id, str):
                if target_id.startswith('@'):
                    username = target_id[1:]
                else:
                    username = target_id
                    
                if hasattr(entity, 'username') and entity.username:
                    return entity.username.lower() == username.lower()
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ title –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ username
                if hasattr(entity, 'title') and entity.title:
                    return username.lower() in entity.title.lower()
                    
        except Exception:
            pass
            
        return False
    
    async def _verify_entity_access(self, entity: Any) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ entity."""
        try:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            if hasattr(entity, 'id') and str(entity.id).startswith('-100'):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                await self.client(functions.channels.GetFullChannelRequest(entity))
                return True
                
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤
            elif hasattr(entity, 'id'):
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await self.client.get_entity(entity.id)
                return True
                
        except (ChannelPrivateError, ChatAdminRequiredError, UserNotParticipantError):
            return False
        except Exception as e:
            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
            
        return True
    
    async def get_entity_info(self, entity_id: Union[str, int]) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± entity.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± entity
        """
        try:
            entity = await self.get_entity_robust(entity_id)
            
            info = {
                'id': getattr(entity, 'id', None),
                'title': getattr(entity, 'title', None),
                'username': getattr(entity, 'username', None),
                'type': entity.__class__.__name__,
                'access': True
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
            if hasattr(entity, 'id') and str(entity.id).startswith('-100'):
                try:
                    full_info = await self.client(functions.channels.GetFullChannelRequest(entity))
                    info.update({
                        'participants_count': getattr(full_info.full_chat, 'participants_count', None),
                        'about': getattr(full_info.full_chat, 'about', None),
                        'linked_chat_id': getattr(full_info.full_chat, 'linked_chat_id', None)
                    })
                except:
                    pass
                    
            return info
            
        except EntityNotFoundError:
            return {'id': entity_id, 'access': False, 'error': 'Entity not found'}
        except EntityAccessDeniedError:
            return {'id': entity_id, 'access': False, 'error': 'Access denied'}
        except Exception as e:
            return {'id': entity_id, 'access': False, 'error': str(e)}
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ entities."""
        self._entity_cache.clear()
        self._access_cache.clear()
        self.logger.info("–ö—ç—à entities –æ—á–∏—â–µ–Ω")
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        return {
            'cached_entities': len(self._entity_cache),
            'access_cache_size': len(self._access_cache),
            'attempt_stats': self._attempt_stats.copy()
        }


async def test_entity_manager():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    from telethon import TelegramClient
    
    client = TelegramClient('test_session', 'api_id', 'api_hash')
    manager = TelegramEntityManager(client)
    
    await client.start()
    
    try:
        # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º ID
        entity_info = await manager.get_entity_info('-1002399927446')
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {entity_info}")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        
    finally:
        await client.disconnect()


if __name__ == '__main__':
    asyncio.run(test_entity_manager())