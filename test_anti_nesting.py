#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –ø–ª–æ—Å–∫—É—é.
"""

import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class AntiNestingDemo:
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏."""
    
    def __init__(self):
        self.logger = logging.getLogger('anti_nesting_demo')
    
    def demonstrate_concepts(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏."""
        
        self.logger.info("=" * 80)
        self.logger.info("üîÑ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ñ–ò–ú–ê –ê–ù–¢–ò–í–õ–û–ñ–ï–ù–ù–û–°–¢–ò")
        self.logger.info("=" * 80)
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        self.logger.info("\nüìã –ò–°–•–û–î–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –í –¢–ï–õ–ï–ì–†–ê–ú –ö–ê–ù–ê–õ–ï:")
        original_structure = [
            "üìå –ü–æ—Å—Ç 1: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!' (ID: 100)",
            "  ‚îú‚îÄ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '–ü—Ä–∏–≤–µ—Ç –∏ —Ç–µ–±–µ!' (ID: 101)", 
            "  ‚îî‚îÄ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '–ö–∞–∫ –¥–µ–ª–∞?' (ID: 102)",
            "",
            "üé¨ –ê–ª—å–±–æ–º: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—É—Å–∫–∞ (ID: 103-105)",
            "  ‚îú‚îÄ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '–ö—Ä–∞—Å–∏–≤—ã–µ –º–µ—Å—Ç–∞!' (ID: 106)",
            "  ‚îú‚îÄ üé¨ –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –µ—â–µ —Ñ–æ—Ç–æ (ID: 107-108)",
            "  ‚îî‚îÄ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '–ì–¥–µ —ç—Ç–æ –±—ã–ª–æ?' (ID: 109)",
            "",
            "üìå –ü–æ—Å—Ç 2: '–í–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å' (ID: 110)",
            "  ‚îî‚îÄ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é' (ID: 111)",
            "      ‚îî‚îÄ üí¨ –û—Ç–≤–µ—Ç: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!' (ID: 112)"
        ]
        
        for line in original_structure:
            self.logger.info(f"   {line}")
        
        # –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
        self.logger.info("\n‚úÖ –†–ï–ñ–ò–ú –° –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –í–õ–û–ñ–ï–ù–ù–û–°–¢–ò (flatten_structure=False):")
        nested_result = [
            "üìå –ü–æ—Å—Ç 1 (ID: 100)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 101)", 
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 102)",
            "üé¨ –ê–ª—å–±–æ–º (ID: 103-105)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É (ID: 106)",
            "üé¨ –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (ID: 107-108)", 
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É (ID: 109)",
            "üìå –ü–æ—Å—Ç 2 (ID: 110)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 111)",
            "üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 112)"
        ]
        
        for i, line in enumerate(nested_result, 1):
            self.logger.info(f"   {i:2d}. {line}")
        
        self.logger.info("   ‚û§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–ª–µ–¥—É—é—Ç —Å—Ä–∞–∑—É –∑–∞ –ø–æ—Å—Ç–∞–º–∏")
        
        # –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        self.logger.info("\nüîÑ –†–ï–ñ–ò–ú –ê–ù–¢–ò–í–õ–û–ñ–ï–ù–ù–û–°–¢–ò (flatten_structure=True):")
        flattened_result = [
            "üìå –ü–æ—Å—Ç 1 (ID: 100)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 101) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç", 
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 102) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç",
            "üé¨ –ê–ª—å–±–æ–º (ID: 103-105)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 106) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç",
            "üé¨ –ê–ª—å–±–æ–º (ID: 107-108) ‚Üê –±—ã–ª –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Å—Ç–∞–ª –æ–±—ã—á–Ω—ã–º –∞–ª—å–±–æ–º–æ–º", 
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 109) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç",
            "üìå –ü–æ—Å—Ç 2 (ID: 110)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 111) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç",
            "üí¨ –û—Ç–≤–µ—Ç (ID: 112) ‚Üê –ø—Ä–µ–≤—Ä–∞—â–µ–Ω –≤ –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç"
        ]
        
        for i, line in enumerate(flattened_result, 1):
            self.logger.info(f"   {i:2d}. {line}")
        
        self.logger.info("   ‚û§ –í—Å–µ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏!")
        
        # –ö–ª—é—á–µ–≤—ã–µ –æ—Ç–ª–∏—á–∏—è
        self.logger.info("\nüîç –ö–õ–Æ–ß–ï–í–´–ï –û–¢–õ–ò–ß–ò–Ø:")
        differences = [
            "üéØ –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è: –°—Ç—Ä–æ–≥–æ –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏–π (100, 101, 102, 103-105, 106, 107-108, 109, 110, 111, 112)",
            "üì± –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: –°—Ç–∞–Ω–æ–≤—è—Ç—Å—è –æ–±—ã—á–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –±–µ–∑ —Å–≤—è–∑–∏ —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º–∏",
            "üé¨ –ê–ª—å–±–æ–º—ã: –û—Å—Ç–∞—é—Ç—Å—è –∞–ª—å–±–æ–º–∞–º–∏, –Ω–æ —Ç–µ—Ä—è—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç '–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'",
            "üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ü–ª–æ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –¥–µ—Ä–µ–≤–∞",
            "‚ö° –ü—Ä–æ—Å—Ç–æ—Ç–∞: –õ–µ–≥—á–µ –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –ª–µ–Ω—Ç–∞ –ø–æ—Å—Ç–æ–≤"
        ]
        
        for diff in differences:
            self.logger.info(f"   ‚Ä¢ {diff}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
        self.logger.info("\n‚öôÔ∏è –ö–ê–ö –í–ö–õ–Æ–ß–ò–¢–¨ –†–ï–ñ–ò–ú –ê–ù–¢–ò–í–õ–û–ñ–ï–ù–ù–û–°–¢–ò:")
        setup_instructions = [
            "1. –í —Ñ–∞–π–ª–µ .env –¥–æ–±–∞–≤–∏—Ç—å: FLATTEN_STRUCTURE=true",
            "2. –ò–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: export FLATTEN_STRUCTURE=true", 
            "3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫ –∫–∞–∫ –æ–±—ã—á–Ω–æ: python main.py",
            "4. –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–Ω—É—Ç –æ–±—ã—á–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏"
        ]
        
        for instruction in setup_instructions:
            self.logger.info(f"   {instruction}")
        
        # –°—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.logger.info("\nüí° –ö–û–ì–î–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –ö–ê–ñ–î–´–ô –†–ï–ñ–ò–ú:")
        use_cases = [
            "",
            "üîó –í–õ–û–ñ–ï–ù–ù–´–ô –†–ï–ñ–ò–ú (flatten_structure=False) - –¥–ª—è:",
            "   ‚Ä¢ –ü–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π",
            "   ‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä—É–º–æ–≤ –∏ –≥—Ä—É–ø–ø —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏", 
            "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '—á—Ç–æ –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è'",
            "",
            "üìã –ü–õ–û–°–ö–ò–ô –†–ï–ñ–ò–ú (flatten_structure=True) - –¥–ª—è:",
            "   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ª–µ–Ω—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π",
            "   ‚Ä¢ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª—ã –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
            "   ‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è",
            "   ‚Ä¢ –ò–∑–±–µ–∂–∞–Ω–∏—è '–≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ö–∞–æ—Å–∞' –≤ –±–æ–ª—å—à–∏—Ö –≥—Ä—É–ø–ø–∞—Ö"
        ]
        
        for case in use_cases:
            self.logger.info(f"   {case}")
        
        self.logger.info("\n" + "=" * 80)
        self.logger.info("‚úÖ –û–±–∞ —Ä–µ–∂–∏–º–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∞–ª—å–±–æ–º–æ–≤!")
        self.logger.info("‚úÖ –û–±–∞ —Ä–µ–∂–∏–º–∞ —Å–æ–±–ª—é–¥–∞—é—Ç —Å—Ç—Ä–æ–≥—É—é —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é!")
        self.logger.info("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ - –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ!")
        self.logger.info("=" * 80)

def main():
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    demo = AntiNestingDemo()
    demo.demonstrate_concepts()

if __name__ == "__main__":
    main()