#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω—ã–π —É—á–µ—Ç –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

import json
import logging
import os
from typing import Dict, List, Optional, Any
from datetime import datetime


class MessageTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self, tracker_file: str = "copied_messages.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            tracker_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        self.tracker_file = tracker_file
        self.logger = logging.getLogger('telegram_copier.tracker')
        self.data = self._load_data()
    
    def _load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.tracker_file):
            try:
                with open(self.tracker_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(data.get('copied_messages', {}))} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
                    return data
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        return {
            "copied_messages": {},  # source_id -> {target_id, timestamp, status}
            "statistics": {
                "total_copied": 0,
                "total_failed": 0,
                "last_updated": None
            },
            "source_channel": None,
            "target_channel": None
        }
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª."""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.data["statistics"]["last_updated"] = datetime.now().isoformat()
            
            with open(self.tracker_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            
            self.logger.debug(f"–î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.tracker_file}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞: {e}")
    
    def set_channels(self, source_channel: str, target_channel: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö."""
        self.data["source_channel"] = source_channel
        self.data["target_channel"] = target_channel
        self._save_data()
    
    def is_message_copied(self, source_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ.
        
        Args:
            source_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ
        """
        return str(source_id) in self.data["copied_messages"]
    
    def mark_message_copied(self, source_id: int, target_id: int, message_type: str = "single"):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.
        
        Args:
            source_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            target_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            message_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (single, album)
        """
        self.data["copied_messages"][str(source_id)] = {
            "target_id": target_id,
            "timestamp": datetime.now().isoformat(),
            "type": message_type,
            "status": "copied"
        }
        
        self.data["statistics"]["total_copied"] += 1
        self._save_data()
        
        self.logger.debug(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {source_id} -> {target_id}")
    
    def mark_album_copied(self, source_ids: List[int], target_ids: List[int]):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å –∞–ª—å–±–æ–º –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π.
        
        Args:
            source_ids: –°–ø–∏—Å–æ–∫ ID –∏—Å—Ö–æ–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
            target_ids: –°–ø–∏—Å–æ–∫ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
        """
        timestamp = datetime.now().isoformat()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ target_ids –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è IndexError
        for i, source_id in enumerate(source_ids):
            # –ï—Å–ª–∏ target_ids –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
            if target_ids and i < len(target_ids):
                target_id = target_ids[i]
            elif target_ids:
                target_id = target_ids[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ fallback
            else:
                target_id = 0  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–ª—É—á–∞—è –ø—É—Å—Ç–æ–≥–æ target_ids
            
            self.data["copied_messages"][str(source_id)] = {
                "target_id": target_id,
                "timestamp": timestamp,
                "type": "album",
                "status": "copied",
                "album_position": i + 1,
                "album_size": len(source_ids)
            }
        
        self.data["statistics"]["total_copied"] += len(source_ids)
        self.data["statistics"]["last_updated"] = datetime.now().isoformat()
        self._save_data()
        
        self.logger.debug(f"–û—Ç–º–µ—á–µ–Ω –∞–ª—å–±–æ–º –∫–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {len(source_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    def mark_message_failed(self, source_id: int, error: str):
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ.
        
        Args:
            source_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
            error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        """
        self.data["copied_messages"][str(source_id)] = {
            "target_id": None,
            "timestamp": datetime.now().isoformat(),
            "type": "failed",
            "status": "failed",
            "error": error
        }
        
        self.data["statistics"]["total_failed"] += 1
        self._save_data()
        
        self.logger.debug(f"–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ: {source_id} - {error}")
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        copied_count = len([m for m in self.data["copied_messages"].values() if m["status"] == "copied"])
        failed_count = len([m for m in self.data["copied_messages"].values() if m["status"] == "failed"])
        
        return {
            "total_tracked": len(self.data["copied_messages"]),
            "successfully_copied": copied_count,
            "failed_copies": failed_count,
            "last_updated": self.data["statistics"].get("last_updated"),
            "source_channel": self.data.get("source_channel"),
            "target_channel": self.data.get("target_channel")
        }
    
    def get_last_copied_id(self) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        copied_messages = {
            int(k): v for k, v in self.data["copied_messages"].items() 
            if v["status"] == "copied"
        }
        
        if not copied_messages:
            return None
        
        return max(copied_messages.keys())
    
    def cleanup_failed_messages(self):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏."""
        failed_count = 0
        for source_id in list(self.data["copied_messages"].keys()):
            if self.data["copied_messages"][source_id]["status"] == "failed":
                del self.data["copied_messages"][source_id]
                failed_count += 1
        
        if failed_count > 0:
            self._save_data()
            self.logger.info(f"–û—á–∏—â–µ–Ω–æ {failed_count} –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö")
    
    def generate_debug_tag(self, source_id: int, add_tags: bool = False) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è debug —Ç–µ–≥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            source_id: ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            add_tags: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ —Ç–µ–≥–∏ –∫ —Ç–µ–∫—Å—Ç—É
        
        Returns:
            Debug —Ç–µ–≥ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not add_tags:
            return ""
        
        return f"\n\n#src_{self.data.get('source_channel', 'unknown')}_{source_id}"


def test_message_tracker():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–µ—Ä–∞."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MessageTracker...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
    tracker = MessageTracker("test_tracker.json")
    tracker.set_channels("source_channel", "target_channel")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    tracker.mark_message_copied(12345, 67890, "single")
    tracker.mark_message_copied(12346, 67891, "single")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å–±–æ–º
    tracker.mark_album_copied([12347, 12348, 12349], [67892, 67893, 67894])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á—É
    tracker.mark_message_failed(12350, "MediaInvalidError")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = tracker.get_statistics()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    print(f"üîç –°–æ–æ–±—â–µ–Ω–∏–µ 12345 —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {tracker.is_message_copied(12345)}")
    print(f"üîç –°–æ–æ–±—â–µ–Ω–∏–µ 99999 —É–∂–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {tracker.is_message_copied(99999)}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
    last_id = tracker.get_last_copied_id()
    print(f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID: {last_id}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if os.path.exists("test_tracker.json"):
        os.remove("test_tracker.json")
    
    print("‚úÖ –¢–µ—Å—Ç MessageTracker –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_message_tracker()