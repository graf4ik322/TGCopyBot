"""
Secure Telegram Client - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
"""

import asyncio
import logging
import platform
import random
from typing import Optional, Dict, Any
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError


class SecureTelegramClient:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è TelegramClient —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å–µ—Å—Å–∏–∏.
    –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å–µ—Å—Å–∏–π –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.
    """
    
    # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
    DEVICE_PROFILES = [
        {
            'device_model': 'Samsung SM-G991B',
            'system_version': 'SDK 31',
            'app_version': '8.9.2',
            'lang_code': 'en',
            'system_lang_code': 'en-US'
        },
        {
            'device_model': 'iPhone 13 Pro',
            'system_version': 'iOS 15.6.1',
            'app_version': '8.9.2',
            'lang_code': 'en',
            'system_lang_code': 'en-US'
        },
        {
            'device_model': 'Pixel 6',
            'system_version': 'Android 12',
            'app_version': '8.9.2',
            'lang_code': 'en',
            'system_lang_code': 'en-US'
        }
    ]
    
    def __init__(self, 
                 session_name: str,
                 api_id: int,
                 api_hash: str,
                 phone: str,
                 proxy: Optional[dict] = None,
                 device_profile: Optional[dict] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Telegram –∫–ª–∏–µ–Ω—Ç–∞.
        
        Args:
            session_name: –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            api_id: API ID –æ—Ç my.telegram.org
            api_hash: API Hash –æ—Ç my.telegram.org
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            proxy: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            device_profile: –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.session_name = session_name
        self.api_id = api_id
        self.api_hash = api_hash
        self.phone = phone
        self.proxy = proxy
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if device_profile:
            self.device_profile = device_profile
        else:
            # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ session_name
            # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ —Å–µ—Å—Å–∏—è –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
            profile_index = hash(session_name) % len(self.DEVICE_PROFILES)
            self.device_profile = self.DEVICE_PROFILES[profile_index]
        
        self.logger = logging.getLogger('secure_telegram_client')
        self.client: Optional[TelegramClient] = None
    
    async def create_client(self) -> TelegramClient:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ TelegramClient —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π TelegramClient
        """
        try:
            self.logger.info(f"üîê –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {self.session_name}")
            self.logger.info(f"üì± –ü—Ä–æ—Ñ–∏–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {self.device_profile['device_model']}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            self.client = TelegramClient(
                session=self.session_name,
                api_id=self.api_id,
                api_hash=self.api_hash,
                proxy=self.proxy,
                
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–π
                device_model=self.device_profile['device_model'],
                system_version=self.device_profile['system_version'],
                app_version=self.device_profile['app_version'],
                lang_code=self.device_profile['lang_code'],
                system_lang_code=self.device_profile['system_lang_code'],
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                connection_retries=5,
                retry_delay=1,
                auto_reconnect=True,
                
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                timeout=30,
                request_retries=3,
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                receive_updates=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞
            )
            
            return self.client
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def start_safely(self) -> TelegramClient:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
        
        Returns:
            –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π TelegramClient
        """
        if not self.client:
            await self.create_client()
        
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await self.client.start(phone=self.phone)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if not await self.client.is_user_authorized():
                self.logger.info("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                await self._handle_authorization()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            me = await self.client.get_me()
            self.logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {me.first_name} (ID: {me.id})")
            self.logger.info(f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {self.device_profile['device_model']}")
            
            return self.client
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def _handle_authorization(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        max_attempts = 3
        
        for attempt in range(max_attempts):
            try:
                self.logger.info(f"üìû –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ {attempt + 1}/{max_attempts}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
                await self.client.send_code_request(self.phone)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                code = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è {self.phone}: ").strip()
                
                if not code:
                    self.logger.warning("‚ö†Ô∏è –ö–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω")
                    continue
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –∫–æ–¥–æ–º
                    await self.client.sign_in(self.phone, code)
                    self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É —É—Å–ø–µ—à–Ω–∞")
                    return
                    
                except SessionPasswordNeededError:
                    self.logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
                    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ").strip()
                    
                    if password:
                        await self.client.sign_in(password=password)
                        self.logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA —É—Å–ø–µ—à–Ω–∞")
                        return
                    else:
                        self.logger.warning("‚ö†Ô∏è –ü–∞—Ä–æ–ª—å 2FA –Ω–µ –≤–≤–µ–¥–µ–Ω")
                        continue
                
            except FloodWaitError as e:
                wait_time = e.seconds
                self.logger.warning(f"‚è≥ FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_time)
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                if attempt == max_attempts - 1:
                    raise
                
                self.logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)
        
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    async def disconnect(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞."""
        if self.client:
            try:
                await self.client.disconnect()
                self.logger.info("üîí –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    def get_device_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ."""
        return {
            'session_name': self.session_name,
            'device_profile': self.device_profile.copy(),
            'proxy': bool(self.proxy)
        }


class TelegramClientFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    
    @staticmethod
    def create_stable_client(session_name: str,
                           api_id: int,
                           api_hash: str,
                           phone: str,
                           proxy: Optional[dict] = None) -> SecureTelegramClient:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
            api_id: API ID
            api_hash: API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            proxy: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SecureTelegramClient
        """
        return SecureTelegramClient(
            session_name=session_name,
            api_id=api_id,
            api_hash=api_hash,
            phone=phone,
            proxy=proxy
        )
    
    @staticmethod
    def create_custom_client(session_name: str,
                           api_id: int,
                           api_hash: str,
                           phone: str,
                           device_model: str,
                           system_version: str,
                           app_version: str = "8.9.2",
                           proxy: Optional[dict] = None) -> SecureTelegramClient:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
            api_id: API ID
            api_hash: API Hash
            phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            device_model: –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            system_version: –í–µ—Ä—Å–∏—è —Å–∏—Å—Ç–µ–º—ã
            app_version: –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            proxy: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SecureTelegramClient
        """
        device_profile = {
            'device_model': device_model,
            'system_version': system_version,
            'app_version': app_version,
            'lang_code': 'en',
            'system_lang_code': 'en-US'
        }
        
        return SecureTelegramClient(
            session_name=session_name,
            api_id=api_id,
            api_hash=api_hash,
            phone=phone,
            proxy=proxy,
            device_profile=device_profile
        )


async def test_secure_client():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."""
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    client_manager = TelegramClientFactory.create_stable_client(
        session_name='test_secure_session',
        api_id=12345,  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_ID
        api_hash='your_api_hash',  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API_HASH
        phone='+1234567890'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä
    )
    
    try:
        client = await client_manager.start_safely()
        print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {client_manager.get_device_info()}")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        me = await client.get_me()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {me.first_name}")
        
    finally:
        await client_manager.disconnect()


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(test_secure_client())