#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–∞—Ç—á–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
"""

import asyncio
import sys
import signal
import os
from typing import Optional
from telethon import TelegramClient

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
from config import Config
from utils import setup_logging, RateLimiter, ProcessLock
from copier import TelegramCopier
from fix_private_channel_comments import apply_private_channel_patch


class PrivateChannelCopierApp:
    """–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        self.config = Config()
        self.logger = setup_logging()
        self.client: Optional[TelegramClient] = None
        self.copier: Optional[TelegramCopier] = None
        self.running = False
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.running = False
    
    async def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if not self.config.validate():
                self.logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                self._show_config_help()
                return False
            
            # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            with ProcessLock():
                self.logger.info("üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                await self._initialize_client()
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø–∞—Ç—á–∞–º–∏
                await self._initialize_copier_with_patches()
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
                await self._run_diagnostics()
                
                # –ó–∞–ø—É—Å–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                self.running = True
                await self._run_copying_process()
                
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            self.logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
            return False
        finally:
            await self._cleanup()
        
        return True
    
    def _show_config_help(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        self.logger.info("üìã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ —É–∫–∞–∂–∏—Ç–µ –≤ .env:")
        self.logger.info("   SOURCE_GROUP_ID=<ID –∏–ª–∏ @username –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞>")
        self.logger.info("   TARGET_GROUP_ID=<ID –∏–ª–∏ @username —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞>")
        self.logger.info("   DISCUSSION_GROUP_ID=<ID –∏–ª–∏ @username –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        self.logger.info("   TARGET_DISCUSSION_GROUP_ID=<ID –∏–ª–∏ @username —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤> (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        self.logger.info("")
        self.logger.info("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python diagnose_private_channel.py")
    
    async def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞."""
        try:
            proxy_config = self.config.get_proxy_config()
            if proxy_config:
                self.logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: {proxy_config['addr']}:{proxy_config['port']}")
            
            self.client = TelegramClient(
                self.config.session_name,
                self.config.api_id,
                self.config.api_hash,
                proxy=proxy_config
            )
            
            await self.client.start()
            
            if not await self.client.is_user_authorized():
                self.logger.info("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
                await self.client.send_code_request(self.config.phone)
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ")
                
                try:
                    await self.client.sign_in(self.config.phone, code)
                except Exception as e:
                    if "password" in str(e).lower():
                        password = input("–í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: ")
                        await self.client.sign_in(password=password)
                    else:
                        raise
            
            me = await self.client.get_me()
            self.logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {me.first_name}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    async def _initialize_copier_with_patches(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–∞—Ç—á–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ rate limiter
            rate_limiter = RateLimiter(
                messages_per_hour=self.config.messages_per_hour,
                delay_seconds=self.config.delay_seconds
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞
            self.copier = TelegramCopier(
                client=self.client,
                source_group_id=self.config.source_group_id,
                target_group_id=self.config.target_group_id,
                rate_limiter=rate_limiter,
                dry_run=self.config.dry_run,
                resume_file=self.config.resume_file,
                use_message_tracker=self.config.use_message_tracker,
                tracker_file=self.config.tracker_file,
                add_debug_tags=self.config.add_debug_tags,
                flatten_structure=self.config.flatten_structure,
                debug_message_ids=self.config.debug_message_ids,
                batch_size=self.config.batch_size
            )
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ discussion_group_id
            self.copier.config = self.config
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞
            await self.copier.initialize()
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            self.logger.info("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
            apply_private_channel_patch(self.copier)
            
            self.logger.info("‚úÖ –ö–æ–ø–∏—Ä–æ–≤—â–∏–∫ —Å –ø–∞—Ç—á–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            raise
    
    async def _run_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            self.logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–∑ –ø–∞—Ç—á–∞
            if hasattr(self.copier, 'diagnose_comments_setup'):
                await self.copier.diagnose_comments_setup()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            await self._check_channel_access()
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    
    async def _check_channel_access(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º –∏ –≥—Ä—É–ø–ø–∞–º."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
            try:
                source_entity = await self.client.get_entity(self.config.source_group_id)
                self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É: {getattr(source_entity, 'title', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for _ in self.client.iter_messages(source_entity, limit=1):
                    self.logger.info("‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: OK")
                    break
            except Exception as e:
                self.logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º: {e}")
                raise
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
            try:
                target_entity = await self.client.get_entity(self.config.target_group_id)
                self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ü–µ–ª–µ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {getattr(target_entity, 'title', 'N/A')}")
                
                if not self.config.dry_run:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ dry_run)
                    test_msg = await self.client.send_message(target_entity, "üîß –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞")
                    await self.client.delete_messages(target_entity, test_msg)
                    self.logger.info("‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: OK")
            except Exception as e:
                self.logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–µ–ª–µ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º: {e}")
                raise
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
            if hasattr(self.config, 'discussion_group_id') and self.config.discussion_group_id:
                try:
                    discussion_entity = await self.client.get_entity(self.config.discussion_group_id)
                    self.logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {getattr(discussion_entity, 'title', 'N/A')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                    async for _ in self.client.iter_messages(discussion_entity, limit=1):
                        self.logger.info("‚úÖ –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: OK")
                        break
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {e}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
            raise
    
    async def _run_copying_process(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...")
            
            if self.config.dry_run:
                self.logger.info("üîß –†–ï–ñ–ò–ú DRY RUN - —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫ –±–∞—Ç—á–µ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            stats = await self.copier.batch_copy_all_messages()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.logger.info("üéâ –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
            self.logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            self.logger.info(f"   ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('copied_messages', 0)}")
            self.logger.info(f"   ‚ùå –û—à–∏–±–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('failed_messages', 0)}")
            self.logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats.get('execution_time', 'N/A')}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            cache_size = len(self.copier.comments_cache)
            if cache_size > 0:
                total_comments = sum(len(comments) for comments in self.copier.comments_cache.values())
                self.logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫—ç—à–µ: {total_comments} –¥–ª—è {cache_size} –ø–æ—Å—Ç–æ–≤")
            else:
                self.logger.warning("   ‚ö†Ô∏è –ö—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—É—Å—Ç - –≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            if self.client:
                await self.client.disconnect()
            self.logger.info("üîí –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    app = PrivateChannelCopierApp()
    success = await app.run()
    return 0 if success else 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    print("üîß –ó–∞–ø—É—Å–∫ Telegram Copier –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    print("üìã –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python diagnose_private_channel.py")
    print("üìã –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python main.py")
    print("")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    exit_code = asyncio.run(main())
    sys.exit(exit_code)