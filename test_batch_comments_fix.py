#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–≤—ã–π –º–µ—Ç–æ–¥ copy_all_messages_batch() 
–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π copy_all_messages().
"""

import asyncio
import logging
import sys
from typing import List, Dict, Any
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('test_batch_comments_fix.log')
    ]
)

class MockMessage:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    def __init__(self, id: int, text: str = "", date: datetime = None, 
                 grouped_id: int = None, reply_to: int = None, 
                 has_comments: bool = False, discussion_group_id: int = None):
        self.id = id
        self.message = text
        self.date = date or datetime.now() + timedelta(seconds=id)
        self.grouped_id = grouped_id
        self.reply_to = MockReplyTo(reply_to) if reply_to else None
        self.has_comments = has_comments
        self.discussion_group_id = discussion_group_id
        
        # –≠–º—É–ª–∏—Ä—É–µ–º replies –¥–ª—è discussion groups
        if has_comments and discussion_group_id:
            self.replies = MockReplies(discussion_group_id)
        else:
            self.replies = None

class MockReplyTo:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è reply_to."""
    def __init__(self, reply_to_msg_id: int):
        self.reply_to_msg_id = reply_to_msg_id

class MockReplies:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –¥–ª—è replies —Å discussion group."""
    def __init__(self, channel_id: int):
        self.comments = True
        self.channel_id = channel_id

class MockCopierTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
    
    def __init__(self):
        self.logger = logging.getLogger('batch_comments_test')
        self.processed_messages = []
        self.processed_comments = []
        self.flatten_structure = False
        
    def create_test_scenario(self) -> List[MockMessage]:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π:
        - –ü–æ—Å—Ç 1 (ID: 10) + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (11, 12)
        - –ê–ª—å–±–æ–º (ID: 20, 21, 22) + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (23, 24)  
        - –ü–æ—Å—Ç 2 (ID: 30) + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (31) + –≤–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (32)
        """
        
        messages = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –∏ –∞–ª—å–±–æ–º—ã
        messages.append(MockMessage(10, "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç 1", has_comments=True, discussion_group_id=1001))
        messages.append(MockMessage(20, "–ê–ª—å–±–æ–º 1/3", grouped_id=100, has_comments=True, discussion_group_id=1001))
        messages.append(MockMessage(21, "–ê–ª—å–±–æ–º 2/3", grouped_id=100))
        messages.append(MockMessage(22, "–ê–ª—å–±–æ–º 3/3", grouped_id=100))
        messages.append(MockMessage(30, "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç 2", has_comments=True, discussion_group_id=1001))
        
        return messages
    
    def create_test_comments(self) -> Dict[int, List[MockMessage]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
        """
        comments = {
            10: [  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É 1
                MockMessage(11, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –∫ –ø–æ—Å—Ç—É 1"),
                MockMessage(12, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –∫ –ø–æ—Å—Ç—É 1")
            ],
            20: [  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∞–ª—å–±–æ–º—É (–ø–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
                MockMessage(23, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 1 –∫ –∞–ª—å–±–æ–º—É"),
                MockMessage(24, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π 2 –∫ –∞–ª—å–±–æ–º—É")  
            ],
            30: [  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É 2
                MockMessage(31, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É 2", has_comments=True, discussion_group_id=1001)
            ],
            31: [  # –í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                MockMessage(32, "–í–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
            ]
        }
        return comments
        
    async def mock_get_comments_for_message(self, message: MockMessage) -> List[MockMessage]:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è."""
        comments_db = self.create_test_comments()
        
        if message.id in comments_db:
            comments = comments_db[message.id]
            self.logger.debug(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
            return comments
        
        self.logger.debug(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return []
    
    async def mock_copy_single_message(self, message: MockMessage) -> bool:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(message, '_is_from_discussion_group') and message._is_from_discussion_group:
            msg_type = "–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô"
            parent_id = getattr(message, '_parent_message_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            self.processed_comments.append(message.id)
            self.logger.info(f"üí¨ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {msg_type} {message.id} (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π: {parent_id}): '{message.message}'")
        else:
            msg_type = "–ü–û–°–¢"
            self.processed_messages.append(message.id)
            self.logger.info(f"üìù –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω {msg_type} {message.id}: '{message.message}'")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        await asyncio.sleep(0.01)
        return True
    
    async def mock_copy_album(self, album_messages: List[MockMessage]) -> bool:
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª—å–±–æ–º–∞."""
        album_ids = [msg.id for msg in album_messages]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∞–ª—å–±–æ–º-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–ª—å–±–æ–º
        is_comment_album = any(hasattr(msg, '_is_from_discussion_group') and msg._is_from_discussion_group 
                             for msg in album_messages)
        
        if is_comment_album:
            parent_id = getattr(album_messages[0], '_parent_message_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            self.logger.info(f"üí¨ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ê–õ–¨–ë–û–ú-–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô {album_ids} (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π: {parent_id})")
            self.processed_comments.extend(album_ids)
        else:
            self.logger.info(f"üì∏ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –û–°–ù–û–í–ù–û–ô –ê–õ–¨–ë–û–ú {album_ids}")
            self.processed_messages.extend(album_ids)
        
        await asyncio.sleep(0.01)
        return True
    
    async def test_batch_comments_processing(self, flatten_structure: bool = False) -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –±–∞—Ç—á–µ–≤–æ–º —Ä–µ–∂–∏–º–µ.
        
        Args:
            flatten_structure: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
        """
        self.flatten_structure = flatten_structure
        self.processed_messages = []
        self.processed_comments = []
        
        mode_name = "–∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏" if flatten_structure else "—Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é"
        self.logger.info(f"\nüß™ === –¢–ï–°–¢ –ë–ê–¢–ß–ï–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –í –†–ï–ñ–ò–ú–ï {mode_name.upper()} ===")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        messages = self.create_test_scenario()
        batch_size = 3  # –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞—Ç—á –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        self.logger.info(f"üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞: {batch_size}")
        self.logger.info(f"üìù –û—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(messages)}")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        batch_number = 1
        total_copied = 0
        total_failed = 0
        
        for i in range(0, len(messages), batch_size):
            batch = messages[i:i + batch_size]
            self.logger.info(f"\nüì¶ === –ë–ê–¢–ß #{batch_number}: {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π ===")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º _process_message_batch —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
            batch_stats = await self._simulate_process_message_batch(batch)
            
            total_copied += batch_stats['copied']
            total_failed += batch_stats['failed']
            
            self.logger.info(f"‚úÖ –ë–∞—Ç—á #{batch_number} –∑–∞–≤–µ—Ä—à–µ–Ω: "
                           f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {batch_stats['copied']}, "
                           f"–æ—à–∏–±–æ–∫ {batch_stats['failed']}")
            batch_number += 1
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        results = {
            'mode': mode_name,
            'total_messages_processed': len(self.processed_messages),
            'total_comments_processed': len(self.processed_comments),
            'total_copied': total_copied,
            'total_failed': total_failed,
            'messages_order': self.processed_messages,
            'comments_order': self.processed_comments,
            'flatten_structure': flatten_structure
        }
        
        self.logger.info(f"\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===")
        self.logger.info(f"–†–µ–∂–∏–º: {mode_name}")
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {results['total_messages_processed']}")
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {results['total_comments_processed']}")
        self.logger.info(f"–í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {results['total_copied']}")
        self.logger.info(f"–û—à–∏–±–æ–∫: {results['total_failed']}")
        self.logger.info(f"–ü–æ—Ä—è–¥–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {results['messages_order']}")
        self.logger.info(f"–ü–æ—Ä—è–¥–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {results['comments_order']}")
        
        return results
    
    async def _simulate_process_message_batch(self, batch: List[MockMessage]) -> Dict[str, int]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ _process_message_batch.
        """
        batch_stats = {'copied': 0, 'failed': 0}
        
        self.logger.debug(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ –∏–∑ {len(batch)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        batch_with_comments = []
        
        if self.flatten_structure:
            self.logger.debug("üí¨ –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏: —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ")
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ
            for message in batch:
                batch_with_comments.append(message)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    comments = await self.mock_get_comments_for_message(message)
                    if comments:
                        self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –Ω–∞–π–¥–µ–Ω–æ {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                        
                        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
                        for comment in comments:
                            comment._is_from_discussion_group = True
                            comment._parent_message_id = message.id
                        
                        batch_with_comments.extend(comments)
                    else:
                        self.logger.debug(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å—å –±–∞—Ç—á (—Å–æ–æ–±—â–µ–Ω–∏—è + –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏) –ø–æ –¥–∞—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            batch_with_comments.sort(key=lambda msg: msg.date if hasattr(msg, 'date') and msg.date else msg.id)
            self.logger.debug(f"üìä –ë–∞—Ç—á —Ä–∞—Å—à–∏—Ä–µ–Ω –¥–æ {len(batch_with_comments)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)")
            
        else:
            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –±–∞—Ç—á
            batch_with_comments = batch
            self.logger.debug("üîó –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ù–ï –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –±–∞—Ç—á")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –±–∞—Ç—á–µ
        albums = {}  # grouped_id -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        single_messages = []
        
        for message in batch_with_comments:
            if hasattr(message, 'grouped_id') and message.grouped_id:
                if message.grouped_id not in albums:
                    albums[message.grouped_id] = []
                albums[message.grouped_id].append(message)
            else:
                single_messages.append(message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö ID (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è)
        all_items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in single_messages:
            all_items.append(('single', msg))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º—ã (–±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª—å–±–æ–º–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
        for grouped_id, album_messages in albums.items():
            album_messages.sort(key=lambda x: x.id)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ –∞–ª—å–±–æ–º–∞
            all_items.append(('album', album_messages))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
        all_items.sort(key=lambda item: item[1].id if item[0] == 'single' else item[1][0].id)
        
        self.logger.debug(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(all_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(single_messages)} –æ–¥–∏–Ω–æ—á–Ω—ã—Ö, {len(albums)} –∞–ª—å–±–æ–º–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        for item_type, item_data in all_items:
            try:
                success = False
                if item_type == 'single':
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    message = item_data
                    success = await self.mock_copy_single_message(message)
                    
                    if success:
                        batch_stats['copied'] += 1
                    else:
                        batch_stats['failed'] += 1
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
                    if not self.flatten_structure and success and not hasattr(message, '_is_from_discussion_group'):
                        try:
                            self.logger.debug(f"üîó –ó–∞–ø—É—Å–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
                            comments_stats = await self._simulate_process_comments_recursively(message)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞
                            batch_stats['copied'] += comments_stats['copied']
                            batch_stats['failed'] += comments_stats['failed']
                            
                            if comments_stats['copied'] > 0 or comments_stats['failed'] > 0:
                                self.logger.debug(f"üìä –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                                f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {comments_stats['copied']}, –æ—à–∏–±–æ–∫ {comments_stats['failed']}")
                                        
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                
                elif item_type == 'album':
                    # –ê–ª—å–±–æ–º
                    album_messages = item_data
                    success = await self.mock_copy_album(album_messages)
                    
                    if success:
                        batch_stats['copied'] += len(album_messages)
                    else:
                        batch_stats['failed'] += len(album_messages)
                    
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–ª—å–±–æ–º—É –≤ —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
                    is_comment_album = any(hasattr(msg, '_is_from_discussion_group') and msg._is_from_discussion_group 
                                         for msg in album_messages)
                    
                    if not self.flatten_structure and success and not is_comment_album:
                        representative_message = album_messages[0]
                        try:
                            self.logger.debug(f"üîó –ó–∞–ø—É—Å–∫ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–ª—å–±–æ–º–∞ {representative_message.grouped_id}")
                            comments_stats = await self._simulate_process_comments_recursively(representative_message)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞—Ç—á–∞
                            batch_stats['copied'] += comments_stats['copied']
                            batch_stats['failed'] += comments_stats['failed']
                            
                            if comments_stats['copied'] > 0 or comments_stats['failed'] > 0:
                                self.logger.debug(f"üìä –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –∞–ª—å–±–æ–º—É {representative_message.grouped_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "
                                                f"—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {comments_stats['copied']}, –æ—à–∏–±–æ–∫ {comments_stats['failed']}")
                                        
                        except Exception as e:
                            self.logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–ª—å–±–æ–º–∞ {representative_message.grouped_id}: {e}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {item_type}: {e}")
                if item_type == 'single':
                    batch_stats['failed'] += 1
                else:
                    batch_stats['failed'] += len(item_data)
        
        return batch_stats
    
    async def _simulate_process_comments_recursively(self, parent_message: MockMessage, depth: int = 0, 
                                                    max_depth: int = 10) -> Dict[str, int]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
        """
        comments_stats = {'copied': 0, 'failed': 0}
        
        if depth >= max_depth:
            self.logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ {max_depth} –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return comments_stats
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            comments = await self.mock_get_comments_for_message(parent_message)
            
            if not comments:
                self.logger.debug(f"{'  ' * depth}üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ {parent_message.id}: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≥–ª—É–±–∏–Ω–∞ {depth})")
                return comments_stats
            
            self.logger.debug(f"{'  ' * depth}üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(comments)} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {parent_message.id} (–≥–ª—É–±–∏–Ω–∞ {depth})")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –¥–∞—Ç–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏
            comments.sort(key=lambda c: c.date if hasattr(c, 'date') and c.date else c.id)
            
            for comment in comments:
                try:
                    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    self.logger.debug(f"{'  ' * depth}üí¨ –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} (–≥–ª—É–±–∏–Ω–∞ {depth})")
                    comment_success = await self.mock_copy_single_message(comment)
                    
                    if comment_success:
                        comments_stats['copied'] += 1
                        self.logger.debug(f"{'  ' * depth}‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {comment.id} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω")
                        
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
                        nested_stats = await self._simulate_process_comments_recursively(comment, depth + 1, max_depth)
                        comments_stats['copied'] += nested_stats['copied']
                        comments_stats['failed'] += nested_stats['failed']
                        
                    else:
                        comments_stats['failed'] += 1
                        self.logger.debug(f"{'  ' * depth}‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}")
                        
                except Exception as comment_error:
                    self.logger.error(f"{'  ' * depth}–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è {comment.id}: {comment_error}")
                    comments_stats['failed'] += 1
                    
        except Exception as e:
            self.logger.warning(f"{'  ' * depth}–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {parent_message.id} (–≥–ª—É–±–∏–Ω–∞ {depth}): {e}")
        
        return comments_stats

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
    
    tester = MockCopierTester()
    
    # –¢–µ—Å—Ç 1: –†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
    results_nested = await tester.test_batch_comments_processing(flatten_structure=False)
    
    # –¢–µ—Å—Ç 2: –†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏  
    results_flat = await tester.test_batch_comments_processing(flatten_structure=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüéØ === –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
    print(f"–†–µ–∂–∏–º —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é:")
    print(f"  - –û—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {results_nested['total_messages_processed']}")
    print(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {results_nested['total_comments_processed']}")
    print(f"  - –í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {results_nested['total_copied']}")
    
    print(f"–†–µ–∂–∏–º –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:")
    print(f"  - –û—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {results_flat['total_messages_processed']}")
    print(f"  - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {results_flat['total_comments_processed']}")
    print(f"  - –í—Å–µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {results_flat['total_copied']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    expected_messages = 5  # 2 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞ + 3 —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞
    expected_comments = 5  # 2 + 2 + 1 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    
    success = True
    
    if results_nested['total_messages_processed'] != expected_messages:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –í —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_messages} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {results_nested['total_messages_processed']}")
        success = False
    
    if results_nested['total_comments_processed'] != expected_comments:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –í —Ä–µ–∂–∏–º–µ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ–ª—É—á–µ–Ω–æ {results_nested['total_comments_processed']}")
        success = False
    
    if results_flat['total_messages_processed'] != expected_messages:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –í —Ä–µ–∂–∏–º–µ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_messages} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {results_flat['total_messages_processed']}")
        success = False
    
    if results_flat['total_comments_processed'] != expected_comments:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –í —Ä–µ–∂–∏–º–µ –∞–Ω—Ç–∏–≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ–ª—É—á–µ–Ω–æ {results_flat['total_comments_processed']}")
        success = False
    
    if success:
        print(f"‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())