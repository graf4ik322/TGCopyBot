#!/usr/bin/env python3
"""
Test script for the improved entity resolution functionality.
"""

import asyncio
import sys
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError
from config import Config
from telegram_copier_v3 import TelegramCopierV3
from utils import setup_logging


async def test_entity_resolution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–∏—Å–∫–∞ entities."""
    config = Config()
    logger = setup_logging()
    
    if not config.validate():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    client = None
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        client = TelegramClient(
            session=config.session_name,
            api_id=config.api_id,
            api_hash=config.api_hash,
            proxy=config.get_proxy_config()
        )
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await client.start()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await client.is_user_authorized():
            logger.info("üì± –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            await client.send_code_request(config.phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ")
            
            try:
                await client.sign_in(config.phone, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å: ")
                await client.sign_in(password=password)
        
        me = await client.get_me()
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ entity resolution...")
        
        copier = TelegramCopierV3(
            client=client,
            source_channel_id=config.source_group_id,
            target_channel_id=config.target_group_id,
            database_path="test_telegram_copier.db",
            dry_run=True,  # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            delay_seconds=1,
            flatten_structure=False
        )
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info("üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π...")
        try:
            await copier.initialize()
            logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {getattr(copier.source_entity, 'title', 'N/A')}")
            logger.info(f"   –¶–µ–ª—å: {getattr(copier.target_entity, 'title', 'N/A')}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã")
            
        finally:
            copier.close()
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False
        
    finally:
        if client:
            await client.disconnect()


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ entity resolution")
    print("=" * 60)
    
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    success = asyncio.run(test_entity_resolution())
    sys.exit(0 if success else 1)