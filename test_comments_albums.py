#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∞–ª—å–±–æ–º—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –Ω–µ —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã.
"""

import logging
import asyncio
from typing import List, Optional, Dict, Any

# –ú–æ–∫-–∫–ª–∞—Å—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
class MockMessage:
    def __init__(self, id: int, message: str, grouped_id: Optional[int] = None, 
                 reply_to: Optional[int] = None, media=None):
        self.id = id
        self.message = message
        self.grouped_id = grouped_id
        self.reply_to = reply_to
        self.media = media
        self.entities = None

class TestCommentsAlbumGrouping:
    """–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"""
    
    def __init__(self):
        self.logger = logging.getLogger('test_comments_albums')
        handler = logging.StreamHandler()
        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.setLevel(logging.INFO)
    
    def test_album_grouping_in_comments(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö"""
        
        self.logger.info("üß™ –¢–ï–°–¢: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
        self.logger.info("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç
        messages.append(MockMessage(1, "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç 1"))
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        messages.append(MockMessage(2, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É 1", reply_to=1))
        
        # –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (3 —Ñ–æ—Ç–æ —Å –æ–¥–Ω–∏–º grouped_id)
        messages.append(MockMessage(3, "–§–æ—Ç–æ 1 –≤ –∞–ª—å–±–æ–º–µ", grouped_id=100, reply_to=1))
        messages.append(MockMessage(4, "–§–æ—Ç–æ 2 –≤ –∞–ª—å–±–æ–º–µ", grouped_id=100, reply_to=1))
        messages.append(MockMessage(5, "–§–æ—Ç–æ 3 –≤ –∞–ª—å–±–æ–º–µ", grouped_id=100, reply_to=1))
        
        # –ï—â–µ –æ–¥–∏–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        messages.append(MockMessage(6, "–ï—â–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_to=1))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç —Å –∞–ª—å–±–æ–º–æ–º
        messages.append(MockMessage(7, "–§–æ—Ç–æ 1 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞", grouped_id=200))
        messages.append(MockMessage(8, "–§–æ—Ç–æ 2 –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞", grouped_id=200))
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É
        messages.append(MockMessage(9, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–ª—å–±–æ–º—É", reply_to=7))
        
        self.logger.info("üìã –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
        for msg in messages:
            msg_type = "üí¨ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" if msg.reply_to else "üìå –ø–æ—Å—Ç"
            album_info = f" (–∞–ª—å–±–æ–º {msg.grouped_id})" if msg.grouped_id else ""
            reply_info = f" ‚Üí –æ—Ç–≤–µ—Ç –Ω–∞ {msg.reply_to}" if msg.reply_to else ""
            self.logger.info(f"   ID {msg.id}: {msg_type}{album_info}{reply_info} - '{msg.message}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ª–æ–≥–∏–∫–µ –∏–∑ copier.py)
        grouped_messages = {}
        main_posts_count = 0
        comments_count = 0
        albums_in_comments_count = 0
        albums_in_main_count = 0
        
        for message in messages:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            is_comment = hasattr(message, 'reply_to') and message.reply_to is not None
            
            if is_comment:
                comments_count += 1
            else:
                main_posts_count += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å—é –∞–ª—å–±–æ–º–∞
            if hasattr(message, 'grouped_id') and message.grouped_id:
                if message.grouped_id not in grouped_messages:
                    grouped_messages[message.grouped_id] = []
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∞–ª—å–±–æ–º—ã –ø–æ —Ç–∏–ø—É
                    if is_comment:
                        albums_in_comments_count += 1
                    else:
                        albums_in_main_count += 1
                grouped_messages[message.grouped_id].append(message)
        
        self.logger.info("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:")
        self.logger.info(f"   üìå –û—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {main_posts_count}")
        self.logger.info(f"   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}")
        self.logger.info(f"   üé¨ –ê–ª—å–±–æ–º–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö: {albums_in_main_count}")
        self.logger.info(f"   üé¨ –ê–ª—å–±–æ–º–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: {albums_in_comments_count}")
        self.logger.info(f"   üì¶ –í—Å–µ–≥–æ –∞–ª—å–±–æ–º–æ–≤: {len(grouped_messages)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª—å–±–æ–º—ã
        self.logger.info("\nüé¨ –î–µ—Ç–∞–ª–∏ –∞–ª—å–±–æ–º–æ–≤:")
        for grouped_id, album_messages in grouped_messages.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–ª—å–±–æ–º–∞
            first_msg = album_messages[0]
            is_comment_album = hasattr(first_msg, 'reply_to') and first_msg.reply_to is not None
            album_type = "–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" if is_comment_album else "–æ—Å–Ω–æ–≤–Ω–æ–π"
            
            self.logger.info(f"   –ê–ª—å–±–æ–º {grouped_id} ({album_type}):")
            for msg in sorted(album_messages, key=lambda x: x.id):
                reply_info = f" ‚Üí –æ—Ç–≤–µ—Ç –Ω–∞ {msg.reply_to}" if msg.reply_to else ""
                self.logger.info(f"     ‚Ä¢ ID {msg.id}{reply_info}: '{msg.message}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.logger.info("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        
        success = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∞–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
        if albums_in_comments_count != 1:
            self.logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è 1 –∞–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –Ω–∞–π–¥–µ–Ω–æ: {albums_in_comments_count}")
            success = False
        else:
            self.logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω 1 –∞–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∞–ª—å–±–æ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
        if albums_in_main_count != 1:
            self.logger.error(f"‚ùå –û–∂–∏–¥–∞–ª—Å—è 1 –∞–ª—å–±–æ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö, –Ω–∞–π–¥–µ–Ω–æ: {albums_in_main_count}")
            success = False
        else:
            self.logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–π–¥–µ–Ω 1 –∞–ª—å–±–æ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Å–æ–æ–±—â–µ–Ω–∏—è
        comment_album = None
        for grouped_id, album_messages in grouped_messages.items():
            first_msg = album_messages[0]
            if hasattr(first_msg, 'reply_to') and first_msg.reply_to is not None:
                comment_album = album_messages
                break
        
        if comment_album is None:
            self.logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")
            success = False
        elif len(comment_album) != 3:
            self.logger.error(f"‚ùå –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–π–¥–µ–Ω–æ: {len(comment_album)}")
            success = False
        else:
            self.logger.info("‚úÖ –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω (3 —Å–æ–æ–±—â–µ–Ω–∏—è)")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç
        if comment_album:
            reply_to_values = set(msg.reply_to for msg in comment_album)
            if len(reply_to_values) != 1:
                self.logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ –ø–æ—Å—Ç—ã: {reply_to_values}")
                success = False
            else:
                self.logger.info(f"‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª—å–±–æ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –ø–æ—Å—Ç {reply_to_values.pop()}")
        
        if success:
            self.logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            self.logger.info("–ê–ª—å–±–æ–º—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            self.logger.error("\nüí• –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
            self.logger.error("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∞–ª—å–±–æ–º–æ–≤!")
        
        return success
    
    def test_flatten_vs_nested_mode(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ flatten_structure"""
        
        self.logger.info("\n" + "=" * 60)
        self.logger.info("üß™ –¢–ï–°–¢: –†–µ–∂–∏–º—ã flatten_structure vs nested")
        self.logger.info("=" * 60)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_messages = [
            "üìå –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç (ID: 1)",
            "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (ID: 2) ‚Üí –æ—Ç–≤–µ—Ç –Ω–∞ 1", 
            "üé¨ –ê–ª—å–±–æ–º –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (ID: 3-5) ‚Üí –æ—Ç–≤–µ—Ç –Ω–∞ 1",
            "üìå –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Å—Ç (ID: 6)",
            "üé¨ –ê–ª—å–±–æ–º –æ—Å–Ω–æ–≤–Ω–æ–π (ID: 7-8)"
        ]
        
        self.logger.info("\nüîó –í–õ–û–ñ–ï–ù–ù–´–ô –†–ï–ñ–ò–ú (flatten_structure=False):")
        self.logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Å–≤—è–∑—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏:")
        for msg in test_messages:
            self.logger.info(f"   {msg}")
        
        self.logger.info("\nüîÑ –ü–õ–û–°–ö–ò–ô –†–ï–ñ–ò–ú (flatten_structure=True):")
        self.logger.info("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ –ø–æ—Å—Ç—ã:")
        for msg in test_messages:
            # –í –ø–ª–æ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ —É–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑—è—Ö
            flat_msg = msg.replace(" ‚Üí –æ—Ç–≤–µ—Ç –Ω–∞ 1", " (–±—ã–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)")
            self.logger.info(f"   {flat_msg}")
        
        self.logger.info("\nüí° –í–ê–ñ–ù–û:")
        self.logger.info("–í –õ–Æ–ë–û–ú —Ä–µ–∂–∏–º–µ –∞–ª—å–±–æ–º—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ü–µ–ª—ã–º–∏!")
        self.logger.info("–ê–ª—å–±–æ–º –∏–∑ 3 —Ñ–æ—Ç–æ = 1 –∞–ª—å–±–æ–º –∏–∑ 3 —Ñ–æ—Ç–æ")
        self.logger.info("–ù–ï 3 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞!")
        
        return True

def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    test = TestCommentsAlbumGrouping()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_result = test.test_album_grouping_in_comments()
    test2_result = test.test_flatten_vs_nested_mode()
    
    if test1_result and test2_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        return 1

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    exit(main())