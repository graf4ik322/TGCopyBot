"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∞.
–í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.
"""

import logging
import time
import asyncio
import os
import fcntl
import json
import hashlib
from typing import Optional, Union, Set, Dict, Any
from telethon.errors import FloodWaitError, PeerFloodError


def setup_logging(log_level: str = 'INFO') -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–æ–±–∏–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ UX.
    
    Args:
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR)
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π logger
    """
    logger = logging.getLogger('telegram_copier')
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # –ú–û–ë–ò–õ–¨–ù–û-–ê–î–ê–ü–¢–ò–í–ù–´–ô —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π)
    console_formatter = logging.Formatter(
        '%(asctime)s | %(message)s',
        datefmt='%H:%M:%S'  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è, –±–µ–∑ –¥–∞—Ç—ã
    )
    
    # –ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ (–ø–æ–¥—Ä–æ–±–Ω—ã–π)
    file_formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    data_dir = '/app/data' if os.path.exists('/app/data') else '.'
    os.makedirs(data_dir, exist_ok=True)
    log_file = os.path.join(data_dir, 'telegram_copier.log')
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setFormatter(file_formatter)
    logger.addHandler(file_handler)
    
    return logger


def create_mobile_friendly_box(title: str, content_lines: list, max_width: int = 50) -> list:
    """
    –°–æ–∑–¥–∞–µ—Ç –º–æ–±–∏–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω—É—é —Ä–∞–º–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–º–∫–∏
        content_lines: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        max_width: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É)
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    content_width = max(
        len(title),
        max(len(line) for line in content_lines) if content_lines else 0,
        30  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
    )
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    width = min(content_width + 4, max_width)
    
    lines = []
    
    # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    lines.append("‚ïî" + "‚ïê" * (width - 2) + "‚ïó")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    title_padding = (width - 2 - len(title)) // 2
    title_line = "‚ïë" + " " * title_padding + title + " " * (width - 2 - title_padding - len(title)) + "‚ïë"
    lines.append(title_line)
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    if content_lines:
        lines.append("‚ï†" + "‚ïê" * (width - 2) + "‚ï£")
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    for line in content_lines:
        if len(line) <= width - 4:
            # –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω—É –ª–∏–Ω–∏—é
            padding = width - 4 - len(line)
            content_line = "‚ïë " + line + " " * padding + " ‚ïë"
            lines.append(content_line)
        else:
            # –î–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = [line[i:i+width-4] for i in range(0, len(line), width-4)]
            for chunk in chunks:
                padding = width - 4 - len(chunk)
                content_line = "‚ïë " + chunk + " " * padding + " ‚ïë"
                lines.append(content_line)
    
    # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    lines.append("‚ïö" + "‚ïê" * (width - 2) + "‚ïù")
    
    return lines


def truncate_text(text: str, max_length: int) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    
    Returns:
        –û–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


class RateLimiter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    def __init__(self, messages_per_hour: int = 30, delay_seconds: int = 3):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏.
        
        Args:
            messages_per_hour: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
            delay_seconds: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.messages_per_hour = messages_per_hour
        self.delay_seconds = delay_seconds
        self.message_times = []
        self.logger = logging.getLogger('telegram_copier.rate_limiter')
    
    async def wait_if_needed(self) -> None:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤."""
        current_time = time.time()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ —á–∞—Å–∞
        self.message_times = [t for t in self.message_times if current_time - t < 3600]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å
        if len(self.message_times) >= self.messages_per_hour:
            wait_time = 3600 - (current_time - self.message_times[0])
            if wait_time > 0:
                self.logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time:.1f} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_time)
                self.message_times = []
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if self.message_times and current_time - self.message_times[-1] < self.delay_seconds:
            wait_time = self.delay_seconds - (current_time - self.message_times[-1])
            await asyncio.sleep(wait_time)
    
    def record_message_sent(self) -> None:
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        self.message_times.append(time.time())


async def handle_flood_wait(error: FloodWaitError, logger: logging.Logger, context: str = "") -> bool:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ FloodWaitError —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏–µ–º.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –í–°–ï–ì–î–ê –∂–¥–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏.
    
    Args:
        error: –û—à–∏–±–∫–∞ FloodWaitError –æ—Ç Telegram API
        logger: Logger –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        True - –≤—Å–µ–≥–¥–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—Å–µ–≥–¥–∞ –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait
    """
    wait_time = error.seconds
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if wait_time <= 10:
        # –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ - –∂–¥–µ–º
        logger.warning(f"üïê FloodWait ({context}): –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å - –ñ–î–ï–ú")
        await asyncio.sleep(wait_time)
        return True
    elif wait_time <= 60:
        # –°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ - –∂–¥–µ–º —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
        logger.warning(f"‚è∞ FloodWait ({context}): –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å - –ñ–î–ï–ú (—Å—Ä–µ–¥–Ω–µ–µ)")
        await asyncio.sleep(wait_time)
        return True
    elif wait_time <= 300:  # 5 –º–∏–Ω—É—Ç
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ - –∂–¥–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.warning(f"‚è≥ FloodWait ({context}): –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å ({wait_time//60}–º{wait_time%60}—Å) - –ñ–î–ï–ú (–¥–æ–ª–≥–æ–µ)")
        # –ñ–¥–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        elapsed = 0
        while elapsed < wait_time:
            sleep_chunk = min(30, wait_time - elapsed)
            await asyncio.sleep(sleep_chunk)
            elapsed += sleep_chunk
            if elapsed < wait_time:
                remaining = wait_time - elapsed
                logger.info(f"‚è≥ FloodWait ({context}): –æ—Å—Ç–∞–ª–æ—Å—å {remaining}—Å ({remaining//60}–º{remaining%60}—Å)")
        return True
    else:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–∂–µ –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–µ FloodWait –º—ã –ñ–î–ï–ú
        logger.warning(f"‚è≥ FloodWait ({context}): –æ—á–µ–Ω—å –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å ({wait_time//60}–º) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ñ–î–ï–ú")
        logger.warning(f"üîÑ FloodWait –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Ä—É—à–∞–µ—Ç —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é")
        logger.warning(f"üìä –î–æ–∂–∏–¥–∞–µ–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        
        # –ñ–¥–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        elapsed = 0
        while elapsed < wait_time:
            sleep_chunk = min(120, wait_time - elapsed)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(sleep_chunk)
            elapsed += sleep_chunk
            if elapsed < wait_time:
                remaining = wait_time - elapsed
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                seconds = remaining % 60
                if hours > 0:
                    time_str = f"{hours}—á{minutes}–º{seconds}—Å"
                elif minutes > 0:
                    time_str = f"{minutes}–º{seconds}—Å"
                else:
                    time_str = f"{seconds}—Å"
                logger.info(f"‚è≥ FloodWait ({context}): –æ—Å—Ç–∞–ª–æ—Å—å {time_str} ({remaining}—Å)")
        
        logger.info(f"‚úÖ FloodWait ({context}) –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É")
        return True

async def handle_media_flood_wait(error: FloodWaitError, logger: logging.Logger, message_id: int = None) -> bool:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ FloodWaitError –¥–ª—è –º–µ–¥–∏–∞ –æ–ø–µ—Ä–∞—Ü–∏–π.
    –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –í–°–ï–ì–î–ê –∂–¥–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Args:
        error: –û—à–∏–±–∫–∞ FloodWaitError –æ—Ç Telegram API  
        logger: Logger –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
    Returns:
        True - –≤—Å–µ–≥–¥–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –≤—Å–µ–≥–¥–∞ –∂–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait
    """
    wait_time = error.seconds
    context = f"Media Upload (msg {message_id})" if message_id else "Media Upload"
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–ø—É—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    # FloodWait –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫ –Ω–µ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É
    # –ú—ã –î–û–õ–ñ–ù–´ –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—é
    
    if wait_time <= 30:
        logger.warning(f"üì∏ Media FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å - –ñ–î–ï–ú")
        await asyncio.sleep(wait_time + 1)  # +1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    elif wait_time <= 120:  # 2 –º–∏–Ω—É—Ç—ã
        logger.warning(f"üì∏ Media FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å ({wait_time//60}–º{wait_time%60}—Å) - –ñ–î–ï–ú")
        await asyncio.sleep(wait_time + 2)  # +2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    elif wait_time <= 600:  # 10 –º–∏–Ω—É—Ç
        logger.warning(f"üì∏ Media FloodWait: –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å ({wait_time//60}–º) - –ñ–î–ï–ú —Å –ø–∞—É–∑–∞–º–∏")
        # –ñ–¥–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        elapsed = 0
        while elapsed < wait_time:
            sleep_chunk = min(60, wait_time - elapsed)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            await asyncio.sleep(sleep_chunk)
            elapsed += sleep_chunk
            if elapsed < wait_time:
                remaining = wait_time - elapsed
                logger.info(f"üì∏ Media FloodWait: –æ—Å—Ç–∞–ª–æ—Å—å {remaining}—Å ({remaining//60}–º)")
        await asyncio.sleep(3)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    else:
        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–∂–µ –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–µ FloodWait –º—ã –ñ–î–ï–ú, –∞ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        logger.warning(f"‚è≥ Media FloodWait: –æ—á–µ–Ω—å –¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time}—Å ({wait_time//60}–º) - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ñ–î–ï–ú")
        logger.warning(f"üîÑ FloodWait –¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞ –≤–µ—Å—å –∞–∫–∫–∞—É–Ω—Ç, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–º–æ–∂–µ—Ç")
        logger.warning(f"üìä –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–æ –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if message_id:
            save_flood_wait_state(message_id, wait_time, f"Media Upload FloodWait - {context}")
        
        # –ñ–¥–µ–º —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
        elapsed = 0
        while elapsed < wait_time:
            sleep_chunk = min(120, wait_time - elapsed)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
            await asyncio.sleep(sleep_chunk)
            elapsed += sleep_chunk
            if elapsed < wait_time:
                remaining = wait_time - elapsed
                hours = remaining // 3600
                minutes = (remaining % 3600) // 60
                seconds = remaining % 60
                if hours > 0:
                    time_str = f"{hours}—á{minutes}–º{seconds}—Å"
                elif minutes > 0:
                    time_str = f"{minutes}–º{seconds}—Å"
                else:
                    time_str = f"{seconds}—Å"
                logger.info(f"‚è≥ Media FloodWait: –æ—Å—Ç–∞–ª–æ—Å—å {time_str} ({remaining}—Å)")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await asyncio.sleep(5)
        logger.info(f"‚úÖ Media FloodWait –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
    
    # –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True - –º—ã –¥–æ–∂–¥–∞–ª–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è FloodWait
    return True


def save_last_message_id(message_id: int, filename: str = 'last_message_id.txt') -> None:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
        data_dir = '/app/data' if os.path.exists('/app/data') else '.'
        os.makedirs(data_dir, exist_ok=True)
        
        # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        full_path = os.path.join(data_dir, filename)
        temp_filename = f"{full_path}.tmp"
        
        with open(temp_filename, 'w', encoding='utf-8') as f:
            f.write(str(message_id))
            f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
            os.fsync(f.fileno())  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –¥–∏—Å–∫–æ–º
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        if os.path.exists(full_path):
            os.replace(temp_filename, full_path)
        else:
            os.rename(temp_filename, full_path)
            
    except Exception as e:
        logging.getLogger('telegram_copier').error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if os.path.exists(f"{full_path}.tmp"):
                os.remove(f"{full_path}.tmp")
        except:
            pass

def save_flood_wait_state(message_id: int, wait_time: int, reason: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º FloodWait –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    Args:
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–µ–ª FloodWait
        wait_time: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        reason: –ü—Ä–∏—á–∏–Ω–∞ FloodWait
    """
    try:
        data_dir = '/app/data' if os.path.exists('/app/data') else '.'
        os.makedirs(data_dir, exist_ok=True)
        
        flood_state = {
            'message_id': message_id,
            'wait_time': wait_time,
            'reason': reason,
            'timestamp': time.time(),
            'resume_after': time.time() + wait_time
        }
        
        state_file = os.path.join(data_dir, 'flood_wait_state.json')
        with open(state_file, 'w', encoding='utf-8') as f:
            json.dump(flood_state, f, indent=2)
            
        logging.getLogger('telegram_copier').warning(
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FloodWait: ID:{message_id}, –æ–∂–∏–¥–∞–Ω–∏–µ:{wait_time}—Å, –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ: {time.strftime('%H:%M:%S', time.localtime(flood_state['resume_after']))}"
        )
            
    except Exception as e:
        logging.getLogger('telegram_copier').error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è FloodWait: {e}")

def load_flood_wait_state() -> Optional[dict]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FloodWait –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º FloodWait –∏–ª–∏ None
    """
    try:
        data_dir = '/app/data' if os.path.exists('/app/data') else '.'
        state_file = os.path.join(data_dir, 'flood_wait_state.json')
        
        if not os.path.exists(state_file):
            return None
            
        with open(state_file, 'r', encoding='utf-8') as f:
            state = json.load(f)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        current_time = time.time()
        if current_time >= state.get('resume_after', 0):
            # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å
            os.remove(state_file)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
            logging.getLogger('telegram_copier').info(
                f"‚úÖ FloodWait –∏—Å—Ç–µ–∫, –º–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è ID:{state.get('message_id')}"
            )
            return state
        else:
            # –í—Å–µ –µ—â–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
            remaining = int(state.get('resume_after', 0) - current_time)
            logging.getLogger('telegram_copier').warning(
                f"‚è≥ FloodWait –∞–∫—Ç–∏–≤–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {remaining}—Å ({remaining//60}–º{remaining%60}—Å)"
            )
            return None
            
    except Exception as e:
        logging.getLogger('telegram_copier').error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FloodWait: {e}")
        return None


def load_last_message_id(filename: str = 'last_message_id.txt') -> Optional[int]:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    
    Returns:
        ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None
    """
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
        data_dir = '/app/data' if os.path.exists('/app/data') else '.'
        full_path = os.path.join(data_dir, filename)
        
        if os.path.exists(full_path):
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if not content:
                    logging.getLogger('telegram_copier').warning(f"–§–∞–π–ª {full_path} –ø—É—Å—Ç")
                    return None
                
                if not content.isdigit():
                    logging.getLogger('telegram_copier').error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {full_path}: '{content}'")
                    return None
                
                message_id = int(content)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º
                if message_id <= 0:
                    logging.getLogger('telegram_copier').error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
                    return None
                
                logging.getLogger('telegram_copier').info(f"–ó–∞–≥—Ä—É–∂–µ–Ω ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message_id}")
                return message_id
                
    except ValueError as e:
        logging.getLogger('telegram_copier').error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logging.getLogger('telegram_copier').error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    return None


def format_file_size(size_bytes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥.
    
    Args:
        size_bytes: –†–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    """
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    size = float(size_bytes)
    
    while size >= 1024.0 and i < len(size_names) - 1:
        size /= 1024.0
        i += 1
    
    return f"{size:.1f} {size_names[i]}"


def sanitize_filename(filename: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
    
    Args:
        filename: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    
    Returns:
        –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    """
    invalid_chars = '<>:"/\\|?*'
    for char in invalid_chars:
        filename = filename.replace(char, '_')
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    if len(filename) > 255:
        name, ext = os.path.splitext(filename)
        filename = name[:255-len(ext)] + ext
    
    return filename


class ProgressTracker:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    def __init__(self, total_messages: int):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            total_messages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self.total_messages = total_messages
        self.processed_messages = 0
        self.failed_messages = 0
        self.start_time = time.time()
        self.logger = logging.getLogger('telegram_copier.progress')
    
    def update(self, success: bool = True) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–µ–≤—ã—Å–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if self.processed_messages < self.total_messages:
            self.processed_messages += 1
            if not success:
                self.failed_messages += 1
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞: {self.processed_messages}/{self.total_messages}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.processed_messages % 10 == 0:
            self._log_progress()
    
    def _log_progress(self) -> None:
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤.
        """
        elapsed_time = time.time() - self.start_time
        progress_percent = (self.processed_messages / self.total_messages) * 100 if self.total_messages > 0 else 0
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ 100%
        progress_percent = min(progress_percent, 100.0)
        
        if self.processed_messages > 0 and elapsed_time > 0:
            avg_time_per_message = elapsed_time / self.processed_messages
            remaining_messages = max(0, self.total_messages - self.processed_messages)
            estimated_remaining_time = avg_time_per_message * remaining_messages
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ
            if estimated_remaining_time < 60:
                time_str = f"{estimated_remaining_time:.0f} —Å–µ–∫"
            else:
                time_str = f"{estimated_remaining_time/60:.1f} –º–∏–Ω"
            
            self.logger.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.processed_messages}/{self.total_messages} "
                f"({progress_percent:.1f}%), "
                f"‚ùå –û—à–∏–±–æ–∫: {self.failed_messages}, "
                f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {time_str}"
            )
        else:
            self.logger.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {self.processed_messages}/{self.total_messages} "
                f"({progress_percent:.1f}%), "
                f"‚ùå –û—à–∏–±–æ–∫: {self.failed_messages}"
            )
    
    def get_final_stats(self) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        elapsed_time = time.time() - self.start_time
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
        processed_count = min(self.processed_messages, self.total_messages)
        success_count = max(0, processed_count - self.failed_messages)
        
        return {
            'total_messages': self.total_messages,
            'processed_messages': processed_count,
            'failed_messages': self.failed_messages,
            'success_rate': (success_count / processed_count * 100) if processed_count > 0 else 0,
            'elapsed_time': elapsed_time,
            'messages_per_minute': (processed_count / elapsed_time * 60) if elapsed_time > 0 else 0
        }


class MessageDeduplicator:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–∞—Ö."""
    
    def __init__(self, db_file: str = 'processed_messages.json'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ç–æ—Ä–∞.
        
        Args:
            db_file: –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.db_file = db_file
        self.processed_hashes: Set[str] = set()
        self.logger = logging.getLogger('telegram_copier.deduplicator')
        self.load_processed_messages()
    
    def _generate_message_hash(self, message_data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç, –º–µ–¥–∏–∞ —Ç–∏–ø, —Ä–∞–∑–º–µ—Ä)
        
        Returns:
            –•–µ—à —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        hash_string = f"{message_data.get('text', '')}{message_data.get('media_type', '')}{message_data.get('media_size', 0)}{message_data.get('date', '')}"
        return hashlib.md5(hash_string.encode('utf-8')).hexdigest()
    
    def is_message_processed(self, message) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telethon
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            message_data = {
                'text': message.message or '',
                'date': str(message.date) if message.date else '',
                'media_type': type(message.media).__name__ if message.media else '',
                'media_size': getattr(message.media.document, 'size', 0) if hasattr(message.media, 'document') else 0
            }
            
            message_hash = self._generate_message_hash(message_data)
            return message_hash in self.processed_hashes
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def mark_message_processed(self, message) -> None:
        """
        –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ.
        
        Args:
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telethon
        """
        try:
            message_data = {
                'text': message.message or '',
                'date': str(message.date) if message.date else '',
                'media_type': type(message.media).__name__ if message.media else '',
                'media_size': getattr(message.media.document, 'size', 0) if hasattr(message.media, 'document') else 0
            }
            
            message_hash = self._generate_message_hash(message_data)
            self.processed_hashes.add(message_hash)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if len(self.processed_hashes) % 10 == 0:
                self.save_processed_messages()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def load_processed_messages(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.processed_hashes = set(data.get('hashes', []))
                    self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.processed_hashes)} —Ö–µ—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            else:
                self.logger.info("–§–∞–π–ª –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
            self.processed_hashes = set()
    
    def save_processed_messages(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª."""
        try:
            data = {
                'hashes': list(self.processed_hashes),
                'last_updated': time.time()
            }
            
            # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å
            temp_file = f"{self.db_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
                f.flush()
                os.fsync(f.fileno())
            
            os.replace(temp_file, self.db_file)
            self.logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.processed_hashes)} —Ö–µ—à–µ–π")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {e}")
    
    def cleanup_old_hashes(self, max_age_days: int = 30) -> None:
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ —Ñ–∞–π–ª–∞.
        
        Args:
            max_age_days: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ö–µ—à–µ–π –≤ –¥–Ω—è—Ö
        """
        try:
            if os.path.exists(self.db_file):
                with open(self.db_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                last_updated = data.get('last_updated', 0)
                current_time = time.time()
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                if current_time - last_updated > max_age_days * 24 * 3600:
                    self.logger.info(f"–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π (—Å—Ç–∞—Ä—à–µ {max_age_days} –¥–Ω–µ–π)")
                    self.processed_hashes = set()
                    self.save_processed_messages()
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ö–µ—à–µ–π: {e}")


class ProcessLock:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."""
    
    def __init__(self, lock_file: str = 'telegram_copier.lock'):
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
        
        Args:
            lock_file: –ò–º—è —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        """
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è lock —Ñ–∞–π–ª–∞
        data_dir = '/app/data' if os.path.exists('/app/data') else '.'
        os.makedirs(data_dir, exist_ok=True)
        self.lock_file = os.path.join(data_dir, lock_file)
        self.lock_fd = None
        self.logger = logging.getLogger('telegram_copier.lock')
    
    def acquire(self) -> bool:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
        
        Returns:
            True –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, False –µ—Å–ª–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        """
        try:
            self.lock_fd = open(self.lock_file, 'w')
            fcntl.flock(self.lock_fd.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
            self.lock_fd.write(str(os.getpid()))
            self.lock_fd.flush()
            
            self.logger.info(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {self.lock_file}")
            return True
            
        except (IOError, OSError) as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É: {e}")
            if self.lock_fd:
                self.lock_fd.close()
                self.lock_fd = None
            return False
    
    def release(self) -> None:
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        if self.lock_fd:
            try:
                fcntl.flock(self.lock_fd.fileno(), fcntl.LOCK_UN)
                self.lock_fd.close()
                os.remove(self.lock_file)
                self.logger.info("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            finally:
                self.lock_fd = None
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π."""
        if not self.acquire():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞. –í–æ–∑–º–æ–∂–Ω–æ, –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        self.release()


class PerformanceMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        self.start_time = time.time()
        self.last_report_time = self.start_time
        self.messages_processed = 0
        self.messages_successful = 0
        self.messages_failed = 0
        self.bytes_processed = 0
        self.logger = logging.getLogger('telegram_copier.monitor')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.metrics = {
            'messages_per_minute': 0.0,
            'bytes_per_second': 0.0,
            'success_rate': 0.0,
            'average_message_size': 0.0,
            'uptime_seconds': 0.0
        }
    
    def record_message_processed(self, success: bool, message_size: int = 0) -> None:
        """
        –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            success: –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_size: –†–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–π—Ç–∞—Ö
        """
        self.messages_processed += 1
        self.bytes_processed += message_size
        
        if success:
            self.messages_successful += 1
        else:
            self.messages_failed += 1
        
        self._update_metrics()
        
        # –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
        if self.messages_processed % 100 == 0:
            self.log_performance_report()
    
    def _update_metrics(self) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        current_time = time.time()
        elapsed_time = current_time - self.start_time
        
        if elapsed_time > 0:
            self.metrics['messages_per_minute'] = (self.messages_processed / elapsed_time) * 60
            self.metrics['bytes_per_second'] = self.bytes_processed / elapsed_time
            self.metrics['uptime_seconds'] = elapsed_time
        
        if self.messages_processed > 0:
            self.metrics['success_rate'] = (self.messages_successful / self.messages_processed) * 100
            self.metrics['average_message_size'] = self.bytes_processed / self.messages_processed
    
    def log_performance_report(self) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        self._update_metrics()
        
        self.logger.info("=== –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===")
        self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.messages_processed}")
        self.logger.info(f"–£—Å–ø–µ—à–Ω–æ: {self.messages_successful} | –û—à–∏–±–æ–∫: {self.messages_failed}")
        self.logger.info(f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {self.metrics['success_rate']:.1f}%")
        self.logger.info(f"–°–∫–æ—Ä–æ—Å—Ç—å: {self.metrics['messages_per_minute']:.1f} —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω")
        self.logger.info(f"–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {format_file_size(int(self.metrics['bytes_per_second']))}/—Å")
        self.logger.info(f"–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {format_file_size(int(self.metrics['average_message_size']))}")
        self.logger.info(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {self.metrics['uptime_seconds']:.0f} —Å–µ–∫")
        self.logger.info("=====================================")
    
    def get_metrics(self) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        self._update_metrics()
        return self.metrics.copy()
    
    def get_final_report(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
        
        Returns:
            –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        self._update_metrics()
        
        return {
            'total_messages': self.messages_processed,
            'successful_messages': self.messages_successful,
            'failed_messages': self.messages_failed,
            'total_bytes': self.bytes_processed,
            'metrics': self.metrics,
            'efficiency_score': self._calculate_efficiency_score()
        }
    
    def _calculate_efficiency_score(self) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (0-100).
        
        Returns:
            –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        """
        if self.messages_processed == 0:
            return 0.0
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        base_score = self.metrics['success_rate']
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å (–µ—Å–ª–∏ –±–æ–ª—å—à–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É)
        speed_bonus = min(self.metrics['messages_per_minute'] / 10, 1.0) * 10
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        error_penalty = (self.messages_failed / self.messages_processed) * 20
        
        efficiency = base_score + speed_bonus - error_penalty
        return max(0.0, min(100.0, efficiency))